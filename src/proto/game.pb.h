// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
namespace game {
class client_name;
struct client_nameDefaultTypeInternal;
extern client_nameDefaultTypeInternal _client_name_default_instance_;
class login_request;
struct login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class login_response;
struct login_responseDefaultTypeInternal;
extern login_responseDefaultTypeInternal _login_response_default_instance_;
class make_move_request;
struct make_move_requestDefaultTypeInternal;
extern make_move_requestDefaultTypeInternal _make_move_request_default_instance_;
class make_move_response;
struct make_move_responseDefaultTypeInternal;
extern make_move_responseDefaultTypeInternal _make_move_response_default_instance_;
class player;
struct playerDefaultTypeInternal;
extern playerDefaultTypeInternal _player_default_instance_;
class register_request;
struct register_requestDefaultTypeInternal;
extern register_requestDefaultTypeInternal _register_request_default_instance_;
class register_response;
struct register_responseDefaultTypeInternal;
extern register_responseDefaultTypeInternal _register_response_default_instance_;
class salt_hash;
struct salt_hashDefaultTypeInternal;
extern salt_hashDefaultTypeInternal _salt_hash_default_instance_;
class search_a_game_request;
struct search_a_game_requestDefaultTypeInternal;
extern search_a_game_requestDefaultTypeInternal _search_a_game_request_default_instance_;
class search_a_game_response;
struct search_a_game_responseDefaultTypeInternal;
extern search_a_game_responseDefaultTypeInternal _search_a_game_response_default_instance_;
class status_message;
struct status_messageDefaultTypeInternal;
extern status_messageDefaultTypeInternal _status_message_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::client_name* Arena::CreateMaybeMessage<::game::client_name>(Arena*);
template<> ::game::login_request* Arena::CreateMaybeMessage<::game::login_request>(Arena*);
template<> ::game::login_response* Arena::CreateMaybeMessage<::game::login_response>(Arena*);
template<> ::game::make_move_request* Arena::CreateMaybeMessage<::game::make_move_request>(Arena*);
template<> ::game::make_move_response* Arena::CreateMaybeMessage<::game::make_move_response>(Arena*);
template<> ::game::player* Arena::CreateMaybeMessage<::game::player>(Arena*);
template<> ::game::register_request* Arena::CreateMaybeMessage<::game::register_request>(Arena*);
template<> ::game::register_response* Arena::CreateMaybeMessage<::game::register_response>(Arena*);
template<> ::game::salt_hash* Arena::CreateMaybeMessage<::game::salt_hash>(Arena*);
template<> ::game::search_a_game_request* Arena::CreateMaybeMessage<::game::search_a_game_request>(Arena*);
template<> ::game::search_a_game_response* Arena::CreateMaybeMessage<::game::search_a_game_response>(Arena*);
template<> ::game::status_message* Arena::CreateMaybeMessage<::game::status_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

enum player_status : int {
  fold = 0,
  playing = 1,
  win = 2,
  player_status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  player_status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool player_status_IsValid(int value);
constexpr player_status player_status_MIN = fold;
constexpr player_status player_status_MAX = win;
constexpr int player_status_ARRAYSIZE = player_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* player_status_descriptor();
template<typename T>
inline const std::string& player_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, player_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function player_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    player_status_descriptor(), enum_t_value);
}
inline bool player_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, player_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<player_status>(
    player_status_descriptor(), name, value);
}
// ===================================================================

class login_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.login_request) */ {
 public:
  inline login_request() : login_request(nullptr) {}
  ~login_request() override;
  explicit PROTOBUF_CONSTEXPR login_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_request(const login_request& from);
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_request& operator=(login_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_request& default_instance() {
    return *internal_default_instance();
  }
  enum LoginEventsRequestCase {
    kName = 1,
    kAfterCompare = 2,
    LOGIN_EVENTS_REQUEST_NOT_SET = 0,
  };

  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }
  inline void Swap(login_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_request& from) {
    login_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.login_request";
  }
  protected:
  explicit login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAfterCompareFieldNumber = 2,
  };
  // .game.client_name name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::game::client_name& name() const;
  PROTOBUF_NODISCARD ::game::client_name* release_name();
  ::game::client_name* mutable_name();
  void set_allocated_name(::game::client_name* name);
  private:
  const ::game::client_name& _internal_name() const;
  ::game::client_name* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::game::client_name* name);
  ::game::client_name* unsafe_arena_release_name();

  // bool after_compare = 2;
  bool has_after_compare() const;
  private:
  bool _internal_has_after_compare() const;
  public:
  void clear_after_compare();
  bool after_compare() const;
  void set_after_compare(bool value);
  private:
  bool _internal_after_compare() const;
  void _internal_set_after_compare(bool value);
  public:

  void clear_login_events_request();
  LoginEventsRequestCase login_events_request_case() const;
  // @@protoc_insertion_point(class_scope:game.login_request)
 private:
  class _Internal;
  void set_has_name();
  void set_has_after_compare();

  inline bool has_login_events_request() const;
  inline void clear_has_login_events_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union LoginEventsRequestUnion {
      constexpr LoginEventsRequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::game::client_name* name_;
      bool after_compare_;
    } login_events_request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class login_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.login_response) */ {
 public:
  inline login_response() : login_response(nullptr) {}
  ~login_response() override;
  explicit PROTOBUF_CONSTEXPR login_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_response(const login_response& from);
  login_response(login_response&& from) noexcept
    : login_response() {
    *this = ::std::move(from);
  }

  inline login_response& operator=(const login_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_response& operator=(login_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_response& default_instance() {
    return *internal_default_instance();
  }
  enum LoginEventsResponseCase {
    kSaltHash = 1,
    kStatusMessage = 2,
    LOGIN_EVENTS_RESPONSE_NOT_SET = 0,
  };

  static inline const login_response* internal_default_instance() {
    return reinterpret_cast<const login_response*>(
               &_login_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_response& a, login_response& b) {
    a.Swap(&b);
  }
  inline void Swap(login_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_response& from) {
    login_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.login_response";
  }
  protected:
  explicit login_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaltHashFieldNumber = 1,
    kStatusMessageFieldNumber = 2,
  };
  // .game.salt_hash salt_hash = 1;
  bool has_salt_hash() const;
  private:
  bool _internal_has_salt_hash() const;
  public:
  void clear_salt_hash();
  const ::game::salt_hash& salt_hash() const;
  PROTOBUF_NODISCARD ::game::salt_hash* release_salt_hash();
  ::game::salt_hash* mutable_salt_hash();
  void set_allocated_salt_hash(::game::salt_hash* salt_hash);
  private:
  const ::game::salt_hash& _internal_salt_hash() const;
  ::game::salt_hash* _internal_mutable_salt_hash();
  public:
  void unsafe_arena_set_allocated_salt_hash(
      ::game::salt_hash* salt_hash);
  ::game::salt_hash* unsafe_arena_release_salt_hash();

  // .game.status_message status_message = 2;
  bool has_status_message() const;
  private:
  bool _internal_has_status_message() const;
  public:
  void clear_status_message();
  const ::game::status_message& status_message() const;
  PROTOBUF_NODISCARD ::game::status_message* release_status_message();
  ::game::status_message* mutable_status_message();
  void set_allocated_status_message(::game::status_message* status_message);
  private:
  const ::game::status_message& _internal_status_message() const;
  ::game::status_message* _internal_mutable_status_message();
  public:
  void unsafe_arena_set_allocated_status_message(
      ::game::status_message* status_message);
  ::game::status_message* unsafe_arena_release_status_message();

  void clear_login_events_response();
  LoginEventsResponseCase login_events_response_case() const;
  // @@protoc_insertion_point(class_scope:game.login_response)
 private:
  class _Internal;
  void set_has_salt_hash();
  void set_has_status_message();

  inline bool has_login_events_response() const;
  inline void clear_has_login_events_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union LoginEventsResponseUnion {
      constexpr LoginEventsResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::game::salt_hash* salt_hash_;
      ::game::status_message* status_message_;
    } login_events_response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class register_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.register_request) */ {
 public:
  inline register_request() : register_request(nullptr) {}
  ~register_request() override;
  explicit PROTOBUF_CONSTEXPR register_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_request(const register_request& from);
  register_request(register_request&& from) noexcept
    : register_request() {
    *this = ::std::move(from);
  }

  inline register_request& operator=(const register_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_request& operator=(register_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const register_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_request* internal_default_instance() {
    return reinterpret_cast<const register_request*>(
               &_register_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(register_request& a, register_request& b) {
    a.Swap(&b);
  }
  inline void Swap(register_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  register_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<register_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const register_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const register_request& from) {
    register_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.register_request";
  }
  protected:
  explicit register_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSaltHashFieldNumber = 2,
  };
  // .game.client_name name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::game::client_name& name() const;
  PROTOBUF_NODISCARD ::game::client_name* release_name();
  ::game::client_name* mutable_name();
  void set_allocated_name(::game::client_name* name);
  private:
  const ::game::client_name& _internal_name() const;
  ::game::client_name* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::game::client_name* name);
  ::game::client_name* unsafe_arena_release_name();

  // .game.salt_hash salt_hash = 2;
  bool has_salt_hash() const;
  private:
  bool _internal_has_salt_hash() const;
  public:
  void clear_salt_hash();
  const ::game::salt_hash& salt_hash() const;
  PROTOBUF_NODISCARD ::game::salt_hash* release_salt_hash();
  ::game::salt_hash* mutable_salt_hash();
  void set_allocated_salt_hash(::game::salt_hash* salt_hash);
  private:
  const ::game::salt_hash& _internal_salt_hash() const;
  ::game::salt_hash* _internal_mutable_salt_hash();
  public:
  void unsafe_arena_set_allocated_salt_hash(
      ::game::salt_hash* salt_hash);
  ::game::salt_hash* unsafe_arena_release_salt_hash();

  // @@protoc_insertion_point(class_scope:game.register_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::client_name* name_;
    ::game::salt_hash* salt_hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class register_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.register_response) */ {
 public:
  inline register_response() : register_response(nullptr) {}
  ~register_response() override;
  explicit PROTOBUF_CONSTEXPR register_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_response(const register_response& from);
  register_response(register_response&& from) noexcept
    : register_response() {
    *this = ::std::move(from);
  }

  inline register_response& operator=(const register_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_response& operator=(register_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const register_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_response* internal_default_instance() {
    return reinterpret_cast<const register_response*>(
               &_register_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(register_response& a, register_response& b) {
    a.Swap(&b);
  }
  inline void Swap(register_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  register_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<register_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const register_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const register_response& from) {
    register_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.register_response";
  }
  protected:
  explicit register_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageFieldNumber = 1,
  };
  // .game.status_message status_message = 1;
  bool has_status_message() const;
  private:
  bool _internal_has_status_message() const;
  public:
  void clear_status_message();
  const ::game::status_message& status_message() const;
  PROTOBUF_NODISCARD ::game::status_message* release_status_message();
  ::game::status_message* mutable_status_message();
  void set_allocated_status_message(::game::status_message* status_message);
  private:
  const ::game::status_message& _internal_status_message() const;
  ::game::status_message* _internal_mutable_status_message();
  public:
  void unsafe_arena_set_allocated_status_message(
      ::game::status_message* status_message);
  ::game::status_message* unsafe_arena_release_status_message();

  // @@protoc_insertion_point(class_scope:game.register_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::status_message* status_message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class client_name final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.client_name) */ {
 public:
  inline client_name() : client_name(nullptr) {}
  ~client_name() override;
  explicit PROTOBUF_CONSTEXPR client_name(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_name(const client_name& from);
  client_name(client_name&& from) noexcept
    : client_name() {
    *this = ::std::move(from);
  }

  inline client_name& operator=(const client_name& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_name& operator=(client_name&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_name& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_name* internal_default_instance() {
    return reinterpret_cast<const client_name*>(
               &_client_name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(client_name& a, client_name& b) {
    a.Swap(&b);
  }
  inline void Swap(client_name* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_name* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_name* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_name>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_name& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const client_name& from) {
    client_name::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_name* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.client_name";
  }
  protected:
  explicit client_name(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:game.client_name)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class salt_hash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.salt_hash) */ {
 public:
  inline salt_hash() : salt_hash(nullptr) {}
  ~salt_hash() override;
  explicit PROTOBUF_CONSTEXPR salt_hash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  salt_hash(const salt_hash& from);
  salt_hash(salt_hash&& from) noexcept
    : salt_hash() {
    *this = ::std::move(from);
  }

  inline salt_hash& operator=(const salt_hash& from) {
    CopyFrom(from);
    return *this;
  }
  inline salt_hash& operator=(salt_hash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const salt_hash& default_instance() {
    return *internal_default_instance();
  }
  static inline const salt_hash* internal_default_instance() {
    return reinterpret_cast<const salt_hash*>(
               &_salt_hash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(salt_hash& a, salt_hash& b) {
    a.Swap(&b);
  }
  inline void Swap(salt_hash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(salt_hash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  salt_hash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<salt_hash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const salt_hash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const salt_hash& from) {
    salt_hash::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(salt_hash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.salt_hash";
  }
  protected:
  explicit salt_hash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaltFieldNumber = 1,
    kHashFieldNumber = 2,
  };
  // string salt = 1;
  void clear_salt();
  const std::string& salt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_salt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_salt();
  PROTOBUF_NODISCARD std::string* release_salt();
  void set_allocated_salt(std::string* salt);
  private:
  const std::string& _internal_salt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_salt(const std::string& value);
  std::string* _internal_mutable_salt();
  public:

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:game.salt_hash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class search_a_game_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.search_a_game_request) */ {
 public:
  inline search_a_game_request() : search_a_game_request(nullptr) {}
  ~search_a_game_request() override;
  explicit PROTOBUF_CONSTEXPR search_a_game_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  search_a_game_request(const search_a_game_request& from);
  search_a_game_request(search_a_game_request&& from) noexcept
    : search_a_game_request() {
    *this = ::std::move(from);
  }

  inline search_a_game_request& operator=(const search_a_game_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline search_a_game_request& operator=(search_a_game_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const search_a_game_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const search_a_game_request* internal_default_instance() {
    return reinterpret_cast<const search_a_game_request*>(
               &_search_a_game_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(search_a_game_request& a, search_a_game_request& b) {
    a.Swap(&b);
  }
  inline void Swap(search_a_game_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(search_a_game_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  search_a_game_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<search_a_game_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const search_a_game_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const search_a_game_request& from) {
    search_a_game_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(search_a_game_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.search_a_game_request";
  }
  protected:
  explicit search_a_game_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberOfPlayersFieldNumber = 1,
    kMinimalBetFieldNumber = 2,
  };
  // int32 number_of_players = 1;
  void clear_number_of_players();
  int32_t number_of_players() const;
  void set_number_of_players(int32_t value);
  private:
  int32_t _internal_number_of_players() const;
  void _internal_set_number_of_players(int32_t value);
  public:

  // int32 minimal_bet = 2;
  void clear_minimal_bet();
  int32_t minimal_bet() const;
  void set_minimal_bet(int32_t value);
  private:
  int32_t _internal_minimal_bet() const;
  void _internal_set_minimal_bet(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.search_a_game_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t number_of_players_;
    int32_t minimal_bet_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class search_a_game_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.search_a_game_response) */ {
 public:
  inline search_a_game_response() : search_a_game_response(nullptr) {}
  ~search_a_game_response() override;
  explicit PROTOBUF_CONSTEXPR search_a_game_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  search_a_game_response(const search_a_game_response& from);
  search_a_game_response(search_a_game_response&& from) noexcept
    : search_a_game_response() {
    *this = ::std::move(from);
  }

  inline search_a_game_response& operator=(const search_a_game_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline search_a_game_response& operator=(search_a_game_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const search_a_game_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const search_a_game_response* internal_default_instance() {
    return reinterpret_cast<const search_a_game_response*>(
               &_search_a_game_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(search_a_game_response& a, search_a_game_response& b) {
    a.Swap(&b);
  }
  inline void Swap(search_a_game_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(search_a_game_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  search_a_game_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<search_a_game_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const search_a_game_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const search_a_game_response& from) {
    search_a_game_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(search_a_game_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.search_a_game_response";
  }
  protected:
  explicit search_a_game_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusMessageFieldNumber = 1,
  };
  // .game.status_message status_message = 1;
  bool has_status_message() const;
  private:
  bool _internal_has_status_message() const;
  public:
  void clear_status_message();
  const ::game::status_message& status_message() const;
  PROTOBUF_NODISCARD ::game::status_message* release_status_message();
  ::game::status_message* mutable_status_message();
  void set_allocated_status_message(::game::status_message* status_message);
  private:
  const ::game::status_message& _internal_status_message() const;
  ::game::status_message* _internal_mutable_status_message();
  public:
  void unsafe_arena_set_allocated_status_message(
      ::game::status_message* status_message);
  ::game::status_message* unsafe_arena_release_status_message();

  // @@protoc_insertion_point(class_scope:game.search_a_game_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::status_message* status_message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class make_move_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.make_move_request) */ {
 public:
  inline make_move_request() : make_move_request(nullptr) {}
  ~make_move_request() override;
  explicit PROTOBUF_CONSTEXPR make_move_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  make_move_request(const make_move_request& from);
  make_move_request(make_move_request&& from) noexcept
    : make_move_request() {
    *this = ::std::move(from);
  }

  inline make_move_request& operator=(const make_move_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline make_move_request& operator=(make_move_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const make_move_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const make_move_request* internal_default_instance() {
    return reinterpret_cast<const make_move_request*>(
               &_make_move_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(make_move_request& a, make_move_request& b) {
    a.Swap(&b);
  }
  inline void Swap(make_move_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(make_move_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  make_move_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<make_move_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const make_move_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const make_move_request& from) {
    make_move_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(make_move_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.make_move_request";
  }
  protected:
  explicit make_move_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientNameFieldNumber = 1,
    kMakeBlindFieldNumber = 2,
    kFoldFieldNumber = 3,
  };
  // .game.client_name client_name = 1;
  bool has_client_name() const;
  private:
  bool _internal_has_client_name() const;
  public:
  void clear_client_name();
  const ::game::client_name& client_name() const;
  PROTOBUF_NODISCARD ::game::client_name* release_client_name();
  ::game::client_name* mutable_client_name();
  void set_allocated_client_name(::game::client_name* client_name);
  private:
  const ::game::client_name& _internal_client_name() const;
  ::game::client_name* _internal_mutable_client_name();
  public:
  void unsafe_arena_set_allocated_client_name(
      ::game::client_name* client_name);
  ::game::client_name* unsafe_arena_release_client_name();

  // int32 make_blind = 2;
  void clear_make_blind();
  int32_t make_blind() const;
  void set_make_blind(int32_t value);
  private:
  int32_t _internal_make_blind() const;
  void _internal_set_make_blind(int32_t value);
  public:

  // bool fold = 3;
  void clear_fold();
  bool fold() const;
  void set_fold(bool value);
  private:
  bool _internal_fold() const;
  void _internal_set_fold(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.make_move_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::client_name* client_name_;
    int32_t make_blind_;
    bool fold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class make_move_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.make_move_response) */ {
 public:
  inline make_move_response() : make_move_response(nullptr) {}
  ~make_move_response() override;
  explicit PROTOBUF_CONSTEXPR make_move_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  make_move_response(const make_move_response& from);
  make_move_response(make_move_response&& from) noexcept
    : make_move_response() {
    *this = ::std::move(from);
  }

  inline make_move_response& operator=(const make_move_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline make_move_response& operator=(make_move_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const make_move_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const make_move_response* internal_default_instance() {
    return reinterpret_cast<const make_move_response*>(
               &_make_move_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(make_move_response& a, make_move_response& b) {
    a.Swap(&b);
  }
  inline void Swap(make_move_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(make_move_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  make_move_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<make_move_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const make_move_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const make_move_response& from) {
    make_move_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(make_move_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.make_move_response";
  }
  protected:
  explicit make_move_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .game.player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::game::player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::player >*
      mutable_players();
  private:
  const ::game::player& _internal_players(int index) const;
  ::game::player* _internal_add_players();
  public:
  const ::game::player& players(int index) const;
  ::game::player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::player >&
      players() const;

  // @@protoc_insertion_point(class_scope:game.make_move_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::player > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.player) */ {
 public:
  inline player() : player(nullptr) {}
  ~player() override;
  explicit PROTOBUF_CONSTEXPR player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  player(const player& from);
  player(player&& from) noexcept
    : player() {
    *this = ::std::move(from);
  }

  inline player& operator=(const player& from) {
    CopyFrom(from);
    return *this;
  }
  inline player& operator=(player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const player& default_instance() {
    return *internal_default_instance();
  }
  static inline const player* internal_default_instance() {
    return reinterpret_cast<const player*>(
               &_player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(player& a, player& b) {
    a.Swap(&b);
  }
  inline void Swap(player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const player& from) {
    player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.player";
  }
  protected:
  explicit player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kBalanceFieldNumber = 3,
  };
  // .game.client_name name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::game::client_name& name() const;
  PROTOBUF_NODISCARD ::game::client_name* release_name();
  ::game::client_name* mutable_name();
  void set_allocated_name(::game::client_name* name);
  private:
  const ::game::client_name& _internal_name() const;
  ::game::client_name* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::game::client_name* name);
  ::game::client_name* unsafe_arena_release_name();

  // .game.player_status status = 2;
  void clear_status();
  ::game::player_status status() const;
  void set_status(::game::player_status value);
  private:
  ::game::player_status _internal_status() const;
  void _internal_set_status(::game::player_status value);
  public:

  // int32 balance = 3;
  void clear_balance();
  int32_t balance() const;
  void set_balance(int32_t value);
  private:
  int32_t _internal_balance() const;
  void _internal_set_balance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::client_name* name_;
    int status_;
    int32_t balance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class status_message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.status_message) */ {
 public:
  inline status_message() : status_message(nullptr) {}
  ~status_message() override;
  explicit PROTOBUF_CONSTEXPR status_message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  status_message(const status_message& from);
  status_message(status_message&& from) noexcept
    : status_message() {
    *this = ::std::move(from);
  }

  inline status_message& operator=(const status_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline status_message& operator=(status_message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const status_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const status_message* internal_default_instance() {
    return reinterpret_cast<const status_message*>(
               &_status_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(status_message& a, status_message& b) {
    a.Swap(&b);
  }
  inline void Swap(status_message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(status_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  status_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<status_message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const status_message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const status_message& from) {
    status_message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(status_message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.status_message";
  }
  protected:
  explicit status_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.status_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login_request

// .game.client_name name = 1;
inline bool login_request::_internal_has_name() const {
  return login_events_request_case() == kName;
}
inline bool login_request::has_name() const {
  return _internal_has_name();
}
inline void login_request::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void login_request::clear_name() {
  if (_internal_has_name()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.login_events_request_.name_;
    }
    clear_has_login_events_request();
  }
}
inline ::game::client_name* login_request::release_name() {
  // @@protoc_insertion_point(field_release:game.login_request.name)
  if (_internal_has_name()) {
    clear_has_login_events_request();
    ::game::client_name* temp = _impl_.login_events_request_.name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.login_events_request_.name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::client_name& login_request::_internal_name() const {
  return _internal_has_name()
      ? *_impl_.login_events_request_.name_
      : reinterpret_cast< ::game::client_name&>(::game::_client_name_default_instance_);
}
inline const ::game::client_name& login_request::name() const {
  // @@protoc_insertion_point(field_get:game.login_request.name)
  return _internal_name();
}
inline ::game::client_name* login_request::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.login_request.name)
  if (_internal_has_name()) {
    clear_has_login_events_request();
    ::game::client_name* temp = _impl_.login_events_request_.name_;
    _impl_.login_events_request_.name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void login_request::unsafe_arena_set_allocated_name(::game::client_name* name) {
  clear_login_events_request();
  if (name) {
    set_has_name();
    _impl_.login_events_request_.name_ = name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.login_request.name)
}
inline ::game::client_name* login_request::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_login_events_request();
    set_has_name();
    _impl_.login_events_request_.name_ = CreateMaybeMessage< ::game::client_name >(GetArenaForAllocation());
  }
  return _impl_.login_events_request_.name_;
}
inline ::game::client_name* login_request::mutable_name() {
  ::game::client_name* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.login_request.name)
  return _msg;
}

// bool after_compare = 2;
inline bool login_request::_internal_has_after_compare() const {
  return login_events_request_case() == kAfterCompare;
}
inline bool login_request::has_after_compare() const {
  return _internal_has_after_compare();
}
inline void login_request::set_has_after_compare() {
  _impl_._oneof_case_[0] = kAfterCompare;
}
inline void login_request::clear_after_compare() {
  if (_internal_has_after_compare()) {
    _impl_.login_events_request_.after_compare_ = false;
    clear_has_login_events_request();
  }
}
inline bool login_request::_internal_after_compare() const {
  if (_internal_has_after_compare()) {
    return _impl_.login_events_request_.after_compare_;
  }
  return false;
}
inline void login_request::_internal_set_after_compare(bool value) {
  if (!_internal_has_after_compare()) {
    clear_login_events_request();
    set_has_after_compare();
  }
  _impl_.login_events_request_.after_compare_ = value;
}
inline bool login_request::after_compare() const {
  // @@protoc_insertion_point(field_get:game.login_request.after_compare)
  return _internal_after_compare();
}
inline void login_request::set_after_compare(bool value) {
  _internal_set_after_compare(value);
  // @@protoc_insertion_point(field_set:game.login_request.after_compare)
}

inline bool login_request::has_login_events_request() const {
  return login_events_request_case() != LOGIN_EVENTS_REQUEST_NOT_SET;
}
inline void login_request::clear_has_login_events_request() {
  _impl_._oneof_case_[0] = LOGIN_EVENTS_REQUEST_NOT_SET;
}
inline login_request::LoginEventsRequestCase login_request::login_events_request_case() const {
  return login_request::LoginEventsRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// login_response

// .game.salt_hash salt_hash = 1;
inline bool login_response::_internal_has_salt_hash() const {
  return login_events_response_case() == kSaltHash;
}
inline bool login_response::has_salt_hash() const {
  return _internal_has_salt_hash();
}
inline void login_response::set_has_salt_hash() {
  _impl_._oneof_case_[0] = kSaltHash;
}
inline void login_response::clear_salt_hash() {
  if (_internal_has_salt_hash()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.login_events_response_.salt_hash_;
    }
    clear_has_login_events_response();
  }
}
inline ::game::salt_hash* login_response::release_salt_hash() {
  // @@protoc_insertion_point(field_release:game.login_response.salt_hash)
  if (_internal_has_salt_hash()) {
    clear_has_login_events_response();
    ::game::salt_hash* temp = _impl_.login_events_response_.salt_hash_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.login_events_response_.salt_hash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::salt_hash& login_response::_internal_salt_hash() const {
  return _internal_has_salt_hash()
      ? *_impl_.login_events_response_.salt_hash_
      : reinterpret_cast< ::game::salt_hash&>(::game::_salt_hash_default_instance_);
}
inline const ::game::salt_hash& login_response::salt_hash() const {
  // @@protoc_insertion_point(field_get:game.login_response.salt_hash)
  return _internal_salt_hash();
}
inline ::game::salt_hash* login_response::unsafe_arena_release_salt_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.login_response.salt_hash)
  if (_internal_has_salt_hash()) {
    clear_has_login_events_response();
    ::game::salt_hash* temp = _impl_.login_events_response_.salt_hash_;
    _impl_.login_events_response_.salt_hash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void login_response::unsafe_arena_set_allocated_salt_hash(::game::salt_hash* salt_hash) {
  clear_login_events_response();
  if (salt_hash) {
    set_has_salt_hash();
    _impl_.login_events_response_.salt_hash_ = salt_hash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.login_response.salt_hash)
}
inline ::game::salt_hash* login_response::_internal_mutable_salt_hash() {
  if (!_internal_has_salt_hash()) {
    clear_login_events_response();
    set_has_salt_hash();
    _impl_.login_events_response_.salt_hash_ = CreateMaybeMessage< ::game::salt_hash >(GetArenaForAllocation());
  }
  return _impl_.login_events_response_.salt_hash_;
}
inline ::game::salt_hash* login_response::mutable_salt_hash() {
  ::game::salt_hash* _msg = _internal_mutable_salt_hash();
  // @@protoc_insertion_point(field_mutable:game.login_response.salt_hash)
  return _msg;
}

// .game.status_message status_message = 2;
inline bool login_response::_internal_has_status_message() const {
  return login_events_response_case() == kStatusMessage;
}
inline bool login_response::has_status_message() const {
  return _internal_has_status_message();
}
inline void login_response::set_has_status_message() {
  _impl_._oneof_case_[0] = kStatusMessage;
}
inline void login_response::clear_status_message() {
  if (_internal_has_status_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.login_events_response_.status_message_;
    }
    clear_has_login_events_response();
  }
}
inline ::game::status_message* login_response::release_status_message() {
  // @@protoc_insertion_point(field_release:game.login_response.status_message)
  if (_internal_has_status_message()) {
    clear_has_login_events_response();
    ::game::status_message* temp = _impl_.login_events_response_.status_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.login_events_response_.status_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::status_message& login_response::_internal_status_message() const {
  return _internal_has_status_message()
      ? *_impl_.login_events_response_.status_message_
      : reinterpret_cast< ::game::status_message&>(::game::_status_message_default_instance_);
}
inline const ::game::status_message& login_response::status_message() const {
  // @@protoc_insertion_point(field_get:game.login_response.status_message)
  return _internal_status_message();
}
inline ::game::status_message* login_response::unsafe_arena_release_status_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.login_response.status_message)
  if (_internal_has_status_message()) {
    clear_has_login_events_response();
    ::game::status_message* temp = _impl_.login_events_response_.status_message_;
    _impl_.login_events_response_.status_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void login_response::unsafe_arena_set_allocated_status_message(::game::status_message* status_message) {
  clear_login_events_response();
  if (status_message) {
    set_has_status_message();
    _impl_.login_events_response_.status_message_ = status_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.login_response.status_message)
}
inline ::game::status_message* login_response::_internal_mutable_status_message() {
  if (!_internal_has_status_message()) {
    clear_login_events_response();
    set_has_status_message();
    _impl_.login_events_response_.status_message_ = CreateMaybeMessage< ::game::status_message >(GetArenaForAllocation());
  }
  return _impl_.login_events_response_.status_message_;
}
inline ::game::status_message* login_response::mutable_status_message() {
  ::game::status_message* _msg = _internal_mutable_status_message();
  // @@protoc_insertion_point(field_mutable:game.login_response.status_message)
  return _msg;
}

inline bool login_response::has_login_events_response() const {
  return login_events_response_case() != LOGIN_EVENTS_RESPONSE_NOT_SET;
}
inline void login_response::clear_has_login_events_response() {
  _impl_._oneof_case_[0] = LOGIN_EVENTS_RESPONSE_NOT_SET;
}
inline login_response::LoginEventsResponseCase login_response::login_events_response_case() const {
  return login_response::LoginEventsResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// register_request

// .game.client_name name = 1;
inline bool register_request::_internal_has_name() const {
  return this != internal_default_instance() && _impl_.name_ != nullptr;
}
inline bool register_request::has_name() const {
  return _internal_has_name();
}
inline void register_request::clear_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
}
inline const ::game::client_name& register_request::_internal_name() const {
  const ::game::client_name* p = _impl_.name_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::client_name&>(
      ::game::_client_name_default_instance_);
}
inline const ::game::client_name& register_request::name() const {
  // @@protoc_insertion_point(field_get:game.register_request.name)
  return _internal_name();
}
inline void register_request::unsafe_arena_set_allocated_name(
    ::game::client_name* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  _impl_.name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.register_request.name)
}
inline ::game::client_name* register_request::release_name() {
  
  ::game::client_name* temp = _impl_.name_;
  _impl_.name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::client_name* register_request::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:game.register_request.name)
  
  ::game::client_name* temp = _impl_.name_;
  _impl_.name_ = nullptr;
  return temp;
}
inline ::game::client_name* register_request::_internal_mutable_name() {
  
  if (_impl_.name_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::client_name>(GetArenaForAllocation());
    _impl_.name_ = p;
  }
  return _impl_.name_;
}
inline ::game::client_name* register_request::mutable_name() {
  ::game::client_name* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.register_request.name)
  return _msg;
}
inline void register_request::set_allocated_name(::game::client_name* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.name_ = name;
  // @@protoc_insertion_point(field_set_allocated:game.register_request.name)
}

// .game.salt_hash salt_hash = 2;
inline bool register_request::_internal_has_salt_hash() const {
  return this != internal_default_instance() && _impl_.salt_hash_ != nullptr;
}
inline bool register_request::has_salt_hash() const {
  return _internal_has_salt_hash();
}
inline void register_request::clear_salt_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.salt_hash_ != nullptr) {
    delete _impl_.salt_hash_;
  }
  _impl_.salt_hash_ = nullptr;
}
inline const ::game::salt_hash& register_request::_internal_salt_hash() const {
  const ::game::salt_hash* p = _impl_.salt_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::salt_hash&>(
      ::game::_salt_hash_default_instance_);
}
inline const ::game::salt_hash& register_request::salt_hash() const {
  // @@protoc_insertion_point(field_get:game.register_request.salt_hash)
  return _internal_salt_hash();
}
inline void register_request::unsafe_arena_set_allocated_salt_hash(
    ::game::salt_hash* salt_hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.salt_hash_);
  }
  _impl_.salt_hash_ = salt_hash;
  if (salt_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.register_request.salt_hash)
}
inline ::game::salt_hash* register_request::release_salt_hash() {
  
  ::game::salt_hash* temp = _impl_.salt_hash_;
  _impl_.salt_hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::salt_hash* register_request::unsafe_arena_release_salt_hash() {
  // @@protoc_insertion_point(field_release:game.register_request.salt_hash)
  
  ::game::salt_hash* temp = _impl_.salt_hash_;
  _impl_.salt_hash_ = nullptr;
  return temp;
}
inline ::game::salt_hash* register_request::_internal_mutable_salt_hash() {
  
  if (_impl_.salt_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::salt_hash>(GetArenaForAllocation());
    _impl_.salt_hash_ = p;
  }
  return _impl_.salt_hash_;
}
inline ::game::salt_hash* register_request::mutable_salt_hash() {
  ::game::salt_hash* _msg = _internal_mutable_salt_hash();
  // @@protoc_insertion_point(field_mutable:game.register_request.salt_hash)
  return _msg;
}
inline void register_request::set_allocated_salt_hash(::game::salt_hash* salt_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.salt_hash_;
  }
  if (salt_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(salt_hash);
    if (message_arena != submessage_arena) {
      salt_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, salt_hash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.salt_hash_ = salt_hash;
  // @@protoc_insertion_point(field_set_allocated:game.register_request.salt_hash)
}

// -------------------------------------------------------------------

// register_response

// .game.status_message status_message = 1;
inline bool register_response::_internal_has_status_message() const {
  return this != internal_default_instance() && _impl_.status_message_ != nullptr;
}
inline bool register_response::has_status_message() const {
  return _internal_has_status_message();
}
inline void register_response::clear_status_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
}
inline const ::game::status_message& register_response::_internal_status_message() const {
  const ::game::status_message* p = _impl_.status_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::status_message&>(
      ::game::_status_message_default_instance_);
}
inline const ::game::status_message& register_response::status_message() const {
  // @@protoc_insertion_point(field_get:game.register_response.status_message)
  return _internal_status_message();
}
inline void register_response::unsafe_arena_set_allocated_status_message(
    ::game::status_message* status_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_message_);
  }
  _impl_.status_message_ = status_message;
  if (status_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.register_response.status_message)
}
inline ::game::status_message* register_response::release_status_message() {
  
  ::game::status_message* temp = _impl_.status_message_;
  _impl_.status_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::status_message* register_response::unsafe_arena_release_status_message() {
  // @@protoc_insertion_point(field_release:game.register_response.status_message)
  
  ::game::status_message* temp = _impl_.status_message_;
  _impl_.status_message_ = nullptr;
  return temp;
}
inline ::game::status_message* register_response::_internal_mutable_status_message() {
  
  if (_impl_.status_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::status_message>(GetArenaForAllocation());
    _impl_.status_message_ = p;
  }
  return _impl_.status_message_;
}
inline ::game::status_message* register_response::mutable_status_message() {
  ::game::status_message* _msg = _internal_mutable_status_message();
  // @@protoc_insertion_point(field_mutable:game.register_response.status_message)
  return _msg;
}
inline void register_response::set_allocated_status_message(::game::status_message* status_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_message_;
  }
  if (status_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status_message);
    if (message_arena != submessage_arena) {
      status_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_message_ = status_message;
  // @@protoc_insertion_point(field_set_allocated:game.register_response.status_message)
}

// -------------------------------------------------------------------

// client_name

// string name = 1;
inline void client_name::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& client_name::name() const {
  // @@protoc_insertion_point(field_get:game.client_name.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_name::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.client_name.name)
}
inline std::string* client_name::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.client_name.name)
  return _s;
}
inline const std::string& client_name::_internal_name() const {
  return _impl_.name_.Get();
}
inline void client_name::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* client_name::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* client_name::release_name() {
  // @@protoc_insertion_point(field_release:game.client_name.name)
  return _impl_.name_.Release();
}
inline void client_name::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.client_name.name)
}

// -------------------------------------------------------------------

// salt_hash

// string salt = 1;
inline void salt_hash::clear_salt() {
  _impl_.salt_.ClearToEmpty();
}
inline const std::string& salt_hash::salt() const {
  // @@protoc_insertion_point(field_get:game.salt_hash.salt)
  return _internal_salt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void salt_hash::set_salt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.salt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.salt_hash.salt)
}
inline std::string* salt_hash::mutable_salt() {
  std::string* _s = _internal_mutable_salt();
  // @@protoc_insertion_point(field_mutable:game.salt_hash.salt)
  return _s;
}
inline const std::string& salt_hash::_internal_salt() const {
  return _impl_.salt_.Get();
}
inline void salt_hash::_internal_set_salt(const std::string& value) {
  
  _impl_.salt_.Set(value, GetArenaForAllocation());
}
inline std::string* salt_hash::_internal_mutable_salt() {
  
  return _impl_.salt_.Mutable(GetArenaForAllocation());
}
inline std::string* salt_hash::release_salt() {
  // @@protoc_insertion_point(field_release:game.salt_hash.salt)
  return _impl_.salt_.Release();
}
inline void salt_hash::set_allocated_salt(std::string* salt) {
  if (salt != nullptr) {
    
  } else {
    
  }
  _impl_.salt_.SetAllocated(salt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.salt_.IsDefault()) {
    _impl_.salt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.salt_hash.salt)
}

// string hash = 2;
inline void salt_hash::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& salt_hash::hash() const {
  // @@protoc_insertion_point(field_get:game.salt_hash.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void salt_hash::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.salt_hash.hash)
}
inline std::string* salt_hash::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:game.salt_hash.hash)
  return _s;
}
inline const std::string& salt_hash::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void salt_hash::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* salt_hash::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* salt_hash::release_hash() {
  // @@protoc_insertion_point(field_release:game.salt_hash.hash)
  return _impl_.hash_.Release();
}
inline void salt_hash::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.salt_hash.hash)
}

// -------------------------------------------------------------------

// search_a_game_request

// int32 number_of_players = 1;
inline void search_a_game_request::clear_number_of_players() {
  _impl_.number_of_players_ = 0;
}
inline int32_t search_a_game_request::_internal_number_of_players() const {
  return _impl_.number_of_players_;
}
inline int32_t search_a_game_request::number_of_players() const {
  // @@protoc_insertion_point(field_get:game.search_a_game_request.number_of_players)
  return _internal_number_of_players();
}
inline void search_a_game_request::_internal_set_number_of_players(int32_t value) {
  
  _impl_.number_of_players_ = value;
}
inline void search_a_game_request::set_number_of_players(int32_t value) {
  _internal_set_number_of_players(value);
  // @@protoc_insertion_point(field_set:game.search_a_game_request.number_of_players)
}

// int32 minimal_bet = 2;
inline void search_a_game_request::clear_minimal_bet() {
  _impl_.minimal_bet_ = 0;
}
inline int32_t search_a_game_request::_internal_minimal_bet() const {
  return _impl_.minimal_bet_;
}
inline int32_t search_a_game_request::minimal_bet() const {
  // @@protoc_insertion_point(field_get:game.search_a_game_request.minimal_bet)
  return _internal_minimal_bet();
}
inline void search_a_game_request::_internal_set_minimal_bet(int32_t value) {
  
  _impl_.minimal_bet_ = value;
}
inline void search_a_game_request::set_minimal_bet(int32_t value) {
  _internal_set_minimal_bet(value);
  // @@protoc_insertion_point(field_set:game.search_a_game_request.minimal_bet)
}

// -------------------------------------------------------------------

// search_a_game_response

// .game.status_message status_message = 1;
inline bool search_a_game_response::_internal_has_status_message() const {
  return this != internal_default_instance() && _impl_.status_message_ != nullptr;
}
inline bool search_a_game_response::has_status_message() const {
  return _internal_has_status_message();
}
inline void search_a_game_response::clear_status_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
}
inline const ::game::status_message& search_a_game_response::_internal_status_message() const {
  const ::game::status_message* p = _impl_.status_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::status_message&>(
      ::game::_status_message_default_instance_);
}
inline const ::game::status_message& search_a_game_response::status_message() const {
  // @@protoc_insertion_point(field_get:game.search_a_game_response.status_message)
  return _internal_status_message();
}
inline void search_a_game_response::unsafe_arena_set_allocated_status_message(
    ::game::status_message* status_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_message_);
  }
  _impl_.status_message_ = status_message;
  if (status_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.search_a_game_response.status_message)
}
inline ::game::status_message* search_a_game_response::release_status_message() {
  
  ::game::status_message* temp = _impl_.status_message_;
  _impl_.status_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::status_message* search_a_game_response::unsafe_arena_release_status_message() {
  // @@protoc_insertion_point(field_release:game.search_a_game_response.status_message)
  
  ::game::status_message* temp = _impl_.status_message_;
  _impl_.status_message_ = nullptr;
  return temp;
}
inline ::game::status_message* search_a_game_response::_internal_mutable_status_message() {
  
  if (_impl_.status_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::status_message>(GetArenaForAllocation());
    _impl_.status_message_ = p;
  }
  return _impl_.status_message_;
}
inline ::game::status_message* search_a_game_response::mutable_status_message() {
  ::game::status_message* _msg = _internal_mutable_status_message();
  // @@protoc_insertion_point(field_mutable:game.search_a_game_response.status_message)
  return _msg;
}
inline void search_a_game_response::set_allocated_status_message(::game::status_message* status_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_message_;
  }
  if (status_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status_message);
    if (message_arena != submessage_arena) {
      status_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_message_ = status_message;
  // @@protoc_insertion_point(field_set_allocated:game.search_a_game_response.status_message)
}

// -------------------------------------------------------------------

// make_move_request

// .game.client_name client_name = 1;
inline bool make_move_request::_internal_has_client_name() const {
  return this != internal_default_instance() && _impl_.client_name_ != nullptr;
}
inline bool make_move_request::has_client_name() const {
  return _internal_has_client_name();
}
inline void make_move_request::clear_client_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_name_ != nullptr) {
    delete _impl_.client_name_;
  }
  _impl_.client_name_ = nullptr;
}
inline const ::game::client_name& make_move_request::_internal_client_name() const {
  const ::game::client_name* p = _impl_.client_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::client_name&>(
      ::game::_client_name_default_instance_);
}
inline const ::game::client_name& make_move_request::client_name() const {
  // @@protoc_insertion_point(field_get:game.make_move_request.client_name)
  return _internal_client_name();
}
inline void make_move_request::unsafe_arena_set_allocated_client_name(
    ::game::client_name* client_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_name_);
  }
  _impl_.client_name_ = client_name;
  if (client_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.make_move_request.client_name)
}
inline ::game::client_name* make_move_request::release_client_name() {
  
  ::game::client_name* temp = _impl_.client_name_;
  _impl_.client_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::client_name* make_move_request::unsafe_arena_release_client_name() {
  // @@protoc_insertion_point(field_release:game.make_move_request.client_name)
  
  ::game::client_name* temp = _impl_.client_name_;
  _impl_.client_name_ = nullptr;
  return temp;
}
inline ::game::client_name* make_move_request::_internal_mutable_client_name() {
  
  if (_impl_.client_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::client_name>(GetArenaForAllocation());
    _impl_.client_name_ = p;
  }
  return _impl_.client_name_;
}
inline ::game::client_name* make_move_request::mutable_client_name() {
  ::game::client_name* _msg = _internal_mutable_client_name();
  // @@protoc_insertion_point(field_mutable:game.make_move_request.client_name)
  return _msg;
}
inline void make_move_request::set_allocated_client_name(::game::client_name* client_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.client_name_;
  }
  if (client_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_name);
    if (message_arena != submessage_arena) {
      client_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_name_ = client_name;
  // @@protoc_insertion_point(field_set_allocated:game.make_move_request.client_name)
}

// int32 make_blind = 2;
inline void make_move_request::clear_make_blind() {
  _impl_.make_blind_ = 0;
}
inline int32_t make_move_request::_internal_make_blind() const {
  return _impl_.make_blind_;
}
inline int32_t make_move_request::make_blind() const {
  // @@protoc_insertion_point(field_get:game.make_move_request.make_blind)
  return _internal_make_blind();
}
inline void make_move_request::_internal_set_make_blind(int32_t value) {
  
  _impl_.make_blind_ = value;
}
inline void make_move_request::set_make_blind(int32_t value) {
  _internal_set_make_blind(value);
  // @@protoc_insertion_point(field_set:game.make_move_request.make_blind)
}

// bool fold = 3;
inline void make_move_request::clear_fold() {
  _impl_.fold_ = false;
}
inline bool make_move_request::_internal_fold() const {
  return _impl_.fold_;
}
inline bool make_move_request::fold() const {
  // @@protoc_insertion_point(field_get:game.make_move_request.fold)
  return _internal_fold();
}
inline void make_move_request::_internal_set_fold(bool value) {
  
  _impl_.fold_ = value;
}
inline void make_move_request::set_fold(bool value) {
  _internal_set_fold(value);
  // @@protoc_insertion_point(field_set:game.make_move_request.fold)
}

// -------------------------------------------------------------------

// make_move_response

// repeated .game.player players = 1;
inline int make_move_response::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int make_move_response::players_size() const {
  return _internal_players_size();
}
inline void make_move_response::clear_players() {
  _impl_.players_.Clear();
}
inline ::game::player* make_move_response::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.make_move_response.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::player >*
make_move_response::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:game.make_move_response.players)
  return &_impl_.players_;
}
inline const ::game::player& make_move_response::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::game::player& make_move_response::players(int index) const {
  // @@protoc_insertion_point(field_get:game.make_move_response.players)
  return _internal_players(index);
}
inline ::game::player* make_move_response::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::game::player* make_move_response::add_players() {
  ::game::player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:game.make_move_response.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::player >&
make_move_response::players() const {
  // @@protoc_insertion_point(field_list:game.make_move_response.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// player

// .game.client_name name = 1;
inline bool player::_internal_has_name() const {
  return this != internal_default_instance() && _impl_.name_ != nullptr;
}
inline bool player::has_name() const {
  return _internal_has_name();
}
inline void player::clear_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
}
inline const ::game::client_name& player::_internal_name() const {
  const ::game::client_name* p = _impl_.name_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::client_name&>(
      ::game::_client_name_default_instance_);
}
inline const ::game::client_name& player::name() const {
  // @@protoc_insertion_point(field_get:game.player.name)
  return _internal_name();
}
inline void player::unsafe_arena_set_allocated_name(
    ::game::client_name* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  _impl_.name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.player.name)
}
inline ::game::client_name* player::release_name() {
  
  ::game::client_name* temp = _impl_.name_;
  _impl_.name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::client_name* player::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:game.player.name)
  
  ::game::client_name* temp = _impl_.name_;
  _impl_.name_ = nullptr;
  return temp;
}
inline ::game::client_name* player::_internal_mutable_name() {
  
  if (_impl_.name_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::client_name>(GetArenaForAllocation());
    _impl_.name_ = p;
  }
  return _impl_.name_;
}
inline ::game::client_name* player::mutable_name() {
  ::game::client_name* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.player.name)
  return _msg;
}
inline void player::set_allocated_name(::game::client_name* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.name_ = name;
  // @@protoc_insertion_point(field_set_allocated:game.player.name)
}

// .game.player_status status = 2;
inline void player::clear_status() {
  _impl_.status_ = 0;
}
inline ::game::player_status player::_internal_status() const {
  return static_cast< ::game::player_status >(_impl_.status_);
}
inline ::game::player_status player::status() const {
  // @@protoc_insertion_point(field_get:game.player.status)
  return _internal_status();
}
inline void player::_internal_set_status(::game::player_status value) {
  
  _impl_.status_ = value;
}
inline void player::set_status(::game::player_status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.player.status)
}

// int32 balance = 3;
inline void player::clear_balance() {
  _impl_.balance_ = 0;
}
inline int32_t player::_internal_balance() const {
  return _impl_.balance_;
}
inline int32_t player::balance() const {
  // @@protoc_insertion_point(field_get:game.player.balance)
  return _internal_balance();
}
inline void player::_internal_set_balance(int32_t value) {
  
  _impl_.balance_ = value;
}
inline void player::set_balance(int32_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:game.player.balance)
}

// -------------------------------------------------------------------

// status_message

// bool status = 1;
inline void status_message::clear_status() {
  _impl_.status_ = false;
}
inline bool status_message::_internal_status() const {
  return _impl_.status_;
}
inline bool status_message::status() const {
  // @@protoc_insertion_point(field_get:game.status_message.status)
  return _internal_status();
}
inline void status_message::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void status_message::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.status_message.status)
}

// string message = 2;
inline void status_message::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& status_message::message() const {
  // @@protoc_insertion_point(field_get:game.status_message.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void status_message::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.status_message.message)
}
inline std::string* status_message::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:game.status_message.message)
  return _s;
}
inline const std::string& status_message::_internal_message() const {
  return _impl_.message_.Get();
}
inline void status_message::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* status_message::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* status_message::release_message() {
  // @@protoc_insertion_point(field_release:game.status_message.message)
  return _impl_.message_.Release();
}
inline void status_message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.status_message.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::player_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::player_status>() {
  return ::game::player_status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
