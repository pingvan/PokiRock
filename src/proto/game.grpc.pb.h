// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game.proto
#ifndef GRPC_game_2eproto__INCLUDED
#define GRPC_game_2eproto__INCLUDED

#include "game.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace game {

class Authorization final {
 public:
  static constexpr char const* service_full_name() {
    return "game.Authorization";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::game::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Registration(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::game::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RegisterResponse>> AsyncRegistration(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RegisterResponse>>(AsyncRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RegisterResponse>> PrepareAsyncRegistration(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RegisterResponse>>(PrepareAsyncRegistrationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Registration(::grpc::ClientContext* context, const ::game::RegisterRequest* request, ::game::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Registration(::grpc::ClientContext* context, const ::game::RegisterRequest* request, ::game::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::RegisterResponse>* AsyncRegistrationRaw(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::RegisterResponse>* PrepareAsyncRegistrationRaw(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::game::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Registration(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::game::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RegisterResponse>> AsyncRegistration(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RegisterResponse>>(AsyncRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RegisterResponse>> PrepareAsyncRegistration(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RegisterResponse>>(PrepareAsyncRegistrationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Registration(::grpc::ClientContext* context, const ::game::RegisterRequest* request, ::game::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Registration(::grpc::ClientContext* context, const ::game::RegisterRequest* request, ::game::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::RegisterResponse>* AsyncRegistrationRaw(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::RegisterResponse>* PrepareAsyncRegistrationRaw(::grpc::ClientContext* context, const ::game::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Registration_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response);
    virtual ::grpc::Status Registration(::grpc::ServerContext* context, const ::game::RegisterRequest* request, ::game::RegisterResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::game::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Registration() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::game::RegisterRequest* /*request*/, ::game::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistration(::grpc::ServerContext* context, ::game::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_Registration<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::LoginRequest, ::game::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::game::LoginRequest, ::game::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::LoginRequest, ::game::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Registration() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::RegisterRequest, ::game::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::RegisterRequest* request, ::game::RegisterResponse* response) { return this->Registration(context, request, response); }));}
    void SetMessageAllocatorFor_Registration(
        ::grpc::MessageAllocator< ::game::RegisterRequest, ::game::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::RegisterRequest, ::game::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::game::RegisterRequest* /*request*/, ::game::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Registration(
      ::grpc::CallbackServerContext* /*context*/, const ::game::RegisterRequest* /*request*/, ::game::RegisterResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_Registration<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Registration() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::game::RegisterRequest* /*request*/, ::game::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Registration() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::game::RegisterRequest* /*request*/, ::game::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Registration() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Registration(context, request, response); }));
    }
    ~WithRawCallbackMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::game::RegisterRequest* /*request*/, ::game::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Registration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::LoginRequest, ::game::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::LoginRequest, ::game::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::LoginRequest,::game::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Registration() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::RegisterRequest, ::game::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::RegisterRequest, ::game::RegisterResponse>* streamer) {
                       return this->StreamedRegistration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Registration(::grpc::ServerContext* /*context*/, const ::game::RegisterRequest* /*request*/, ::game::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::RegisterRequest,::game::RegisterResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Registration<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Registration<Service > > StreamedService;
};

class Lobby final {
 public:
  static constexpr char const* service_full_name() {
    return "game.Lobby";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>> LobbyFunc(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>>(LobbyFuncRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>> AsyncLobbyFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>>(AsyncLobbyFuncRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>> PrepareAsyncLobbyFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>>(PrepareAsyncLobbyFuncRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void LobbyFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::LobbyRequests,::game::LobbyResponses>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>* LobbyFuncRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>* AsyncLobbyFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::game::LobbyRequests, ::game::LobbyResponses>* PrepareAsyncLobbyFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>> LobbyFunc(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>>(LobbyFuncRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>> AsyncLobbyFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>>(AsyncLobbyFuncRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>> PrepareAsyncLobbyFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>>(PrepareAsyncLobbyFuncRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LobbyFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::LobbyRequests,::game::LobbyResponses>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>* LobbyFuncRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>* AsyncLobbyFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::game::LobbyRequests, ::game::LobbyResponses>* PrepareAsyncLobbyFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LobbyFunc_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status LobbyFunc(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::game::LobbyResponses, ::game::LobbyRequests>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_LobbyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LobbyFunc() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LobbyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LobbyFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::LobbyResponses, ::game::LobbyRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLobbyFunc(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::game::LobbyResponses, ::game::LobbyRequests>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LobbyFunc<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LobbyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LobbyFunc() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::game::LobbyRequests, ::game::LobbyResponses>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->LobbyFunc(context); }));
    }
    ~WithCallbackMethod_LobbyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LobbyFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::LobbyResponses, ::game::LobbyRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::game::LobbyRequests, ::game::LobbyResponses>* LobbyFunc(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_LobbyFunc<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LobbyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LobbyFunc() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LobbyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LobbyFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::LobbyResponses, ::game::LobbyRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LobbyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LobbyFunc() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LobbyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LobbyFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::LobbyResponses, ::game::LobbyRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLobbyFunc(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LobbyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LobbyFunc() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->LobbyFunc(context); }));
    }
    ~WithRawCallbackMethod_LobbyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LobbyFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::LobbyResponses, ::game::LobbyRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* LobbyFunc(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

class PokerGame final {
 public:
  static constexpr char const* service_full_name() {
    return "game.PokerGame";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>> GameFunc(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>>(GameFuncRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>> AsyncGameFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>>(AsyncGameFuncRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>> PrepareAsyncGameFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>>(PrepareAsyncGameFuncRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GameFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::GameRequests,::game::GameResponses>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>* GameFuncRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>* AsyncGameFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::game::GameRequests, ::game::GameResponses>* PrepareAsyncGameFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::game::GameRequests, ::game::GameResponses>> GameFunc(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::game::GameRequests, ::game::GameResponses>>(GameFuncRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::game::GameRequests, ::game::GameResponses>> AsyncGameFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::game::GameRequests, ::game::GameResponses>>(AsyncGameFuncRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::game::GameRequests, ::game::GameResponses>> PrepareAsyncGameFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::game::GameRequests, ::game::GameResponses>>(PrepareAsyncGameFuncRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GameFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::GameRequests,::game::GameResponses>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::game::GameRequests, ::game::GameResponses>* GameFuncRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::game::GameRequests, ::game::GameResponses>* AsyncGameFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::game::GameRequests, ::game::GameResponses>* PrepareAsyncGameFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GameFunc_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GameFunc(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::game::GameResponses, ::game::GameRequests>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GameFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GameFunc() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GameFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::GameResponses, ::game::GameRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGameFunc(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::game::GameResponses, ::game::GameRequests>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GameFunc<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GameFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GameFunc() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::game::GameRequests, ::game::GameResponses>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GameFunc(context); }));
    }
    ~WithCallbackMethod_GameFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::GameResponses, ::game::GameRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::game::GameRequests, ::game::GameResponses>* GameFunc(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_GameFunc<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GameFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GameFunc() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GameFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::GameResponses, ::game::GameRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GameFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GameFunc() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GameFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::GameResponses, ::game::GameRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGameFunc(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GameFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GameFunc() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->GameFunc(context); }));
    }
    ~WithRawCallbackMethod_GameFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GameFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::game::GameResponses, ::game::GameRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GameFunc(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace game


#endif  // GRPC_game_2eproto__INCLUDED
