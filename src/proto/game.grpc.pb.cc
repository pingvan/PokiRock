// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game.proto

#include "game.pb.h"
#include "game.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace game {

static const char* PokerGame_method_names[] = {
  "/game.PokerGame/PokerFunc",
};

std::unique_ptr< PokerGame::Stub> PokerGame::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PokerGame::Stub> stub(new PokerGame::Stub(channel, options));
  return stub;
}

PokerGame::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PokerFunc_(PokerGame_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::game::Requests, ::game::Responses>* PokerGame::Stub::PokerFuncRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::game::Requests, ::game::Responses>::Create(channel_.get(), rpcmethod_PokerFunc_, context);
}

void PokerGame::Stub::async::PokerFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::game::Requests,::game::Responses>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::game::Requests,::game::Responses>::Create(stub_->channel_.get(), stub_->rpcmethod_PokerFunc_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::game::Requests, ::game::Responses>* PokerGame::Stub::AsyncPokerFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::game::Requests, ::game::Responses>::Create(channel_.get(), cq, rpcmethod_PokerFunc_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::game::Requests, ::game::Responses>* PokerGame::Stub::PrepareAsyncPokerFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::game::Requests, ::game::Responses>::Create(channel_.get(), cq, rpcmethod_PokerFunc_, context, false, nullptr);
}

PokerGame::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PokerGame_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PokerGame::Service, ::game::Requests, ::game::Responses>(
          [](PokerGame::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::game::Responses,
             ::game::Requests>* stream) {
               return service->PokerFunc(ctx, stream);
             }, this)));
}

PokerGame::Service::~Service() {
}

::grpc::Status PokerGame::Service::PokerFunc(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::game::Responses, ::game::Requests>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game

