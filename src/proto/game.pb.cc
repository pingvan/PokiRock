// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR StatusMessage::StatusMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusMessageDefaultTypeInternal() {}
  union {
    StatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusMessageDefaultTypeInternal _StatusMessage_default_instance_;
PROTOBUF_CONSTEXPR ErrorMessage::ErrorMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0} {}
struct ErrorMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorMessageDefaultTypeInternal() {}
  union {
    ErrorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorMessageDefaultTypeInternal _ErrorMessage_default_instance_;
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_requests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
PROTOBUF_CONSTEXPR LoginRequestFirst::LoginRequestFirst(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRequestFirstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestFirstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestFirstDefaultTypeInternal() {}
  union {
    LoginRequestFirst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestFirstDefaultTypeInternal _LoginRequestFirst_default_instance_;
PROTOBUF_CONSTEXPR LoginRequestSecond::LoginRequestSecond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hashed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRequestSecondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestSecondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestSecondDefaultTypeInternal() {}
  union {
    LoginRequestSecond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestSecondDefaultTypeInternal _LoginRequestSecond_default_instance_;
PROTOBUF_CONSTEXPR LoginResponseFirst::LoginResponseFirst(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_responses_first_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LoginResponseFirstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseFirstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseFirstDefaultTypeInternal() {}
  union {
    LoginResponseFirst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseFirstDefaultTypeInternal _LoginResponseFirst_default_instance_;
PROTOBUF_CONSTEXPR LoginResponseSecond::LoginResponseSecond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_responses_second_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LoginResponseSecondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseSecondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseSecondDefaultTypeInternal() {}
  union {
    LoginResponseSecond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseSecondDefaultTypeInternal _LoginResponseSecond_default_instance_;
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterResponse::RegisterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.register_responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RegisterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
PROTOBUF_CONSTEXPR SaltHash::SaltHash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaltHashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaltHashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaltHashDefaultTypeInternal() {}
  union {
    SaltHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaltHashDefaultTypeInternal _SaltHash_default_instance_;
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_CONSTEXPR LobbyRequests::LobbyRequests(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LobbyRequestsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobbyRequestsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobbyRequestsDefaultTypeInternal() {}
  union {
    LobbyRequests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobbyRequestsDefaultTypeInternal _LobbyRequests_default_instance_;
PROTOBUF_CONSTEXPR LobbyResponses::LobbyResponses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LobbyResponsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobbyResponsesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobbyResponsesDefaultTypeInternal() {}
  union {
    LobbyResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobbyResponsesDefaultTypeInternal _LobbyResponses_default_instance_;
PROTOBUF_CONSTEXPR CreateGameRequest::CreateGameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.game_parameters_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateGameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGameRequestDefaultTypeInternal() {}
  union {
    CreateGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGameRequestDefaultTypeInternal _CreateGameRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateGameResponse::CreateGameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.status_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGameResponseDefaultTypeInternal() {}
  union {
    CreateGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGameResponseDefaultTypeInternal _CreateGameResponse_default_instance_;
PROTOBUF_CONSTEXPR SearchGameRequest::SearchGameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.game_parameters_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchGameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchGameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchGameRequestDefaultTypeInternal() {}
  union {
    SearchGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchGameRequestDefaultTypeInternal _SearchGameRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchGameResponse::SearchGameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.status_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchGameResponseDefaultTypeInternal() {}
  union {
    SearchGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchGameResponseDefaultTypeInternal _SearchGameResponse_default_instance_;
PROTOBUF_CONSTEXPR GameRequests::GameRequests(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GameRequestsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameRequestsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameRequestsDefaultTypeInternal() {}
  union {
    GameRequests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameRequestsDefaultTypeInternal _GameRequests_default_instance_;
PROTOBUF_CONSTEXPR GameResponses::GameResponses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GameResponsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameResponsesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameResponsesDefaultTypeInternal() {}
  union {
    GameResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameResponsesDefaultTypeInternal _GameResponses_default_instance_;
PROTOBUF_CONSTEXPR make_move_request::make_move_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.make_blind_)*/0
  , /*decltype(_impl_.fold_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct make_move_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR make_move_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~make_move_requestDefaultTypeInternal() {}
  union {
    make_move_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 make_move_requestDefaultTypeInternal _make_move_request_default_instance_;
PROTOBUF_CONSTEXPR make_move_response::make_move_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct make_move_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR make_move_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~make_move_responseDefaultTypeInternal() {}
  union {
    make_move_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 make_move_responseDefaultTypeInternal _make_move_response_default_instance_;
PROTOBUF_CONSTEXPR GameParameters::GameParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.number_of_players_)*/0
  , /*decltype(_impl_.minimal_bet_)*/0
  , /*decltype(_impl_.game_enter_balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameParametersDefaultTypeInternal() {}
  union {
    GameParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameParametersDefaultTypeInternal _GameParameters_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/0
  , /*decltype(_impl_.client_games_)*/0
  , /*decltype(_impl_.client_wins_)*/0
  , /*decltype(_impl_.client_balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_game_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_game_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const uint32_t TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::StatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::StatusMessage, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::game::StatusMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::game::ErrorMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::game::ErrorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::ErrorMessage, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::game::ErrorMessage, _impl_.message_string_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::LoginRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::LoginRequest, _impl_.login_requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::LoginResponse, _impl_.login_responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LoginRequestFirst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::LoginRequestFirst, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LoginRequestSecond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::LoginRequestSecond, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::LoginRequestSecond, _impl_.hashed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponseFirst, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponseFirst, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::LoginResponseFirst, _impl_.login_responses_first_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponseSecond, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::LoginResponseSecond, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::LoginResponseSecond, _impl_.login_responses_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::RegisterRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::RegisterRequest, _impl_.salt_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::RegisterResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::RegisterResponse, _impl_.register_responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SaltHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SaltHash, _impl_.salt_),
  PROTOBUF_FIELD_OFFSET(::game::SaltHash, _impl_.hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::Player, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::Player, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::game::Player, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LobbyRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::LobbyRequests, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::LobbyRequests, _impl_.requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::LobbyResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::LobbyResponses, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::LobbyResponses, _impl_.responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CreateGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CreateGameRequest, _impl_.game_owner_),
  PROTOBUF_FIELD_OFFSET(::game::CreateGameRequest, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::game::CreateGameRequest, _impl_.game_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CreateGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CreateGameResponse, _impl_.status_message_),
  PROTOBUF_FIELD_OFFSET(::game::CreateGameResponse, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SearchGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SearchGameRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::SearchGameRequest, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::game::SearchGameRequest, _impl_.game_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SearchGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SearchGameResponse, _impl_.status_message_),
  PROTOBUF_FIELD_OFFSET(::game::SearchGameResponse, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GameRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::GameRequests, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::GameRequests, _impl_.requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GameResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::GameResponses, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::GameResponses, _impl_.responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.client_name_),
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.make_blind_),
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.fold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::make_move_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::make_move_response, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GameParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::GameParameters, _impl_.game_name_),
  PROTOBUF_FIELD_OFFSET(::game::GameParameters, _impl_.number_of_players_),
  PROTOBUF_FIELD_OFFSET(::game::GameParameters, _impl_.minimal_bet_),
  PROTOBUF_FIELD_OFFSET(::game::GameParameters, _impl_.game_enter_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.client_games_),
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.client_wins_),
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.client_balance_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::StatusMessage)},
  { 8, 16, -1, sizeof(::game::ErrorMessage)},
  { 18, -1, -1, sizeof(::game::LoginRequest)},
  { 27, -1, -1, sizeof(::game::LoginResponse)},
  { 36, -1, -1, sizeof(::game::LoginRequestFirst)},
  { 43, -1, -1, sizeof(::game::LoginRequestSecond)},
  { 51, -1, -1, sizeof(::game::LoginResponseFirst)},
  { 60, -1, -1, sizeof(::game::LoginResponseSecond)},
  { 69, -1, -1, sizeof(::game::RegisterRequest)},
  { 77, -1, -1, sizeof(::game::RegisterResponse)},
  { 86, -1, -1, sizeof(::game::SaltHash)},
  { 94, -1, -1, sizeof(::game::Player)},
  { 103, -1, -1, sizeof(::game::LobbyRequests)},
  { 112, -1, -1, sizeof(::game::LobbyResponses)},
  { 121, -1, -1, sizeof(::game::CreateGameRequest)},
  { 130, -1, -1, sizeof(::game::CreateGameResponse)},
  { 138, -1, -1, sizeof(::game::SearchGameRequest)},
  { 147, -1, -1, sizeof(::game::SearchGameResponse)},
  { 155, -1, -1, sizeof(::game::GameRequests)},
  { 163, -1, -1, sizeof(::game::GameResponses)},
  { 171, -1, -1, sizeof(::game::make_move_request)},
  { 180, -1, -1, sizeof(::game::make_move_response)},
  { 187, -1, -1, sizeof(::game::GameParameters)},
  { 197, -1, -1, sizeof(::game::PlayerInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_StatusMessage_default_instance_._instance,
  &::game::_ErrorMessage_default_instance_._instance,
  &::game::_LoginRequest_default_instance_._instance,
  &::game::_LoginResponse_default_instance_._instance,
  &::game::_LoginRequestFirst_default_instance_._instance,
  &::game::_LoginRequestSecond_default_instance_._instance,
  &::game::_LoginResponseFirst_default_instance_._instance,
  &::game::_LoginResponseSecond_default_instance_._instance,
  &::game::_RegisterRequest_default_instance_._instance,
  &::game::_RegisterResponse_default_instance_._instance,
  &::game::_SaltHash_default_instance_._instance,
  &::game::_Player_default_instance_._instance,
  &::game::_LobbyRequests_default_instance_._instance,
  &::game::_LobbyResponses_default_instance_._instance,
  &::game::_CreateGameRequest_default_instance_._instance,
  &::game::_CreateGameResponse_default_instance_._instance,
  &::game::_SearchGameRequest_default_instance_._instance,
  &::game::_SearchGameResponse_default_instance_._instance,
  &::game::_GameRequests_default_instance_._instance,
  &::game::_GameResponses_default_instance_._instance,
  &::game::_make_move_request_default_instance_._instance,
  &::game::_make_move_response_default_instance_._instance,
  &::game::_GameParameters_default_instance_._instance,
  &::game::_PlayerInfo_default_instance_._instance,
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\022\004game\"0\n\rStatusMessage\022\016\n\006s"
  "tatus\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"Z\n\014ErrorMes"
  "sage\022\032\n\005error\030\001 \001(\0162\013.game.error\022\033\n\016mess"
  "age_string\030\002 \001(\tH\000\210\001\001B\021\n\017_message_string"
  "\"\222\001\n\014LoginRequest\0226\n\023login_request_first"
  "\030\001 \001(\0132\027.game.LoginRequestFirstH\000\0228\n\024log"
  "in_request_second\030\002 \001(\0132\030.game.LoginRequ"
  "estSecondH\000B\020\n\016login_requests\"\230\001\n\rLoginR"
  "esponse\0228\n\024login_response_first\030\001 \001(\0132\030."
  "game.LoginResponseFirstH\000\022:\n\025login_respo"
  "nse_second\030\002 \001(\0132\031.game.LoginResponseSec"
  "ondH\000B\021\n\017login_responses\"!\n\021LoginRequest"
  "First\022\014\n\004name\030\001 \001(\t\"2\n\022LoginRequestSecon"
  "d\022\014\n\004name\030\001 \001(\t\022\016\n\006hashed\030\002 \001(\t\"`\n\022Login"
  "ResponseFirst\022\016\n\004salt\030\001 \001(\tH\000\022!\n\003msg\030\002 \001"
  "(\0132\022.game.ErrorMessageH\000B\027\n\025login_respon"
  "ses_first\"{\n\023LoginResponseSecond\022\'\n\013play"
  "er_info\030\001 \001(\0132\020.game.PlayerInfoH\000\022!\n\003msg"
  "\030\002 \001(\0132\022.game.ErrorMessageH\000B\030\n\026login_re"
  "sponses_second\"B\n\017RegisterRequest\022\014\n\004nam"
  "e\030\001 \001(\t\022!\n\tsalt_hash\030\002 \001(\0132\016.game.SaltHa"
  "sh\"t\n\020RegisterResponse\022\'\n\013player_info\030\001 "
  "\001(\0132\020.game.PlayerInfoH\000\022!\n\003msg\030\002 \001(\0132\022.g"
  "ame.ErrorMessageH\000B\024\n\022register_responses"
  "\"&\n\010SaltHash\022\014\n\004salt\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t"
  "\"K\n\006Player\022\014\n\004name\030\001 \001(\t\022\"\n\006status\030\002 \001(\016"
  "2\022.game.PlayerStatus\022\017\n\007balance\030\003 \001(\005\"\213\001"
  "\n\rLobbyRequests\0226\n\023create_game_request\030\001"
  " \001(\0132\027.game.CreateGameRequestH\000\0226\n\023searc"
  "h_game_request\030\002 \001(\0132\027.game.SearchGameRe"
  "questH\000B\n\n\010requests\"\221\001\n\016LobbyResponses\0228"
  "\n\024create_game_response\030\001 \001(\0132\030.game.Crea"
  "teGameResponseH\000\0228\n\024search_game_response"
  "\030\002 \001(\0132\030.game.SearchGameResponseH\000B\013\n\tre"
  "sponses\"}\n\021CreateGameRequest\022\022\n\ngame_own"
  "er\030\001 \001(\t\022%\n\013player_info\030\002 \001(\0132\020.game.Pla"
  "yerInfo\022-\n\017game_parameters\030\003 \001(\0132\024.game."
  "GameParameters\"`\n\022CreateGameResponse\022+\n\016"
  "status_message\030\001 \001(\0132\023.game.StatusMessag"
  "e\022\035\n\007players\030\002 \003(\0132\014.game.Player\"w\n\021Sear"
  "chGameRequest\022\014\n\004name\030\001 \001(\t\022%\n\013player_in"
  "fo\030\002 \001(\0132\020.game.PlayerInfo\022-\n\017game_param"
  "eters\030\003 \001(\0132\024.game.GameParameters\"`\n\022Sea"
  "rchGameResponse\022+\n\016status_message\030\001 \001(\0132"
  "\023.game.StatusMessage\022\035\n\007players\030\002 \003(\0132\014."
  "game.Player\"P\n\014GameRequests\0224\n\021make_move"
  "_request\030\001 \001(\0132\027.game.make_move_requestH"
  "\000B\n\n\010requests\"T\n\rGameResponses\0226\n\022make_m"
  "ove_response\030\001 \001(\0132\030.game.make_move_resp"
  "onseH\000B\013\n\tresponses\"J\n\021make_move_request"
  "\022\023\n\013client_name\030\001 \001(\t\022\022\n\nmake_blind\030\002 \001("
  "\005\022\014\n\004fold\030\003 \001(\010\"3\n\022make_move_response\022\035\n"
  "\007players\030\001 \003(\0132\014.game.Player\"o\n\016GamePara"
  "meters\022\021\n\tgame_name\030\001 \001(\t\022\031\n\021number_of_p"
  "layers\030\002 \001(\005\022\023\n\013minimal_bet\030\003 \001(\005\022\032\n\022gam"
  "e_enter_balance\030\004 \001(\005\"b\n\nPlayerInfo\022\021\n\tc"
  "lient_id\030\001 \001(\005\022\024\n\014client_games\030\002 \001(\005\022\023\n\013"
  "client_wins\030\003 \001(\005\022\026\n\016client_balance\030\004 \001("
  "\005*\214\001\n\005error\022!\n\035ERROR_NO_USER_WITH_THIS_L"
  "OGIN\020\000\022-\n)ERROR_USER_WITH_THIS_LOGIN_ALR"
  "EADY_EXISTS\020\001\022\034\n\030ERROR_UNCORRECT_PASSWOR"
  "D\020\002\022\023\n\017ERROR_EXCEPTION\020\003*X\n\014PlayerStatus"
  "\022\026\n\022PLAYER_STATUS_FOLD\020\000\022\031\n\025PLAYER_STATU"
  "S_PLAYING\020\001\022\025\n\021PLAYER_STATUS_WIN\020\0022\200\001\n\rA"
  "uthorization\0220\n\005Login\022\022.game.LoginReques"
  "t\032\023.game.LoginResponse\022=\n\014Registration\022\025"
  ".game.RegisterRequest\032\026.game.RegisterRes"
  "ponse2C\n\005Lobby\022:\n\tLobbyFunc\022\023.game.Lobby"
  "Requests\032\024.game.LobbyResponses(\0010\0012D\n\tPo"
  "kerGame\0227\n\010GameFunc\022\022.game.GameRequests\032"
  "\023.game.GameResponses(\0010\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_game_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_game_2eproto = {
    false, false, 2832, descriptor_table_protodef_game_2eproto,
    "game.proto",
    &descriptor_table_game_2eproto_once, nullptr, 0, 24,
    schemas, file_default_instances, TableStruct_game_2eproto::offsets,
    file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto,
    file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_game_2eproto_getter() {
  return &descriptor_table_game_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[0];
}
bool error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[1];
}
bool PlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StatusMessage::_Internal {
 public:
};

StatusMessage::StatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.StatusMessage)
}
StatusMessage::StatusMessage(const StatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:game.StatusMessage)
}

inline void StatusMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusMessage::~StatusMessage() {
  // @@protoc_insertion_point(destructor:game.StatusMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void StatusMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:game.StatusMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.StatusMessage.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.StatusMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.StatusMessage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.StatusMessage)
  return target;
}

size_t StatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.StatusMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusMessage::GetClassData() const { return &_class_data_; }


void StatusMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusMessage*>(&to_msg);
  auto& from = static_cast<const StatusMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.StatusMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusMessage::CopyFrom(const StatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.StatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMessage::IsInitialized() const {
  return true;
}

void StatusMessage::InternalSwap(StatusMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[0]);
}

// ===================================================================

class ErrorMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorMessage>()._impl_._has_bits_);
  static void set_has_message_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErrorMessage::ErrorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.ErrorMessage)
}
ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_string_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_string()) {
    _this->_impl_.message_string_.Set(from._internal_message_string(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:game.ErrorMessage)
}

inline void ErrorMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_string_){}
    , decltype(_impl_.error_){0}
  };
  _impl_.message_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:game.ErrorMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_string_.Destroy();
}

void ErrorMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:game.ErrorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_string_.ClearNonDefaultToEmpty();
  }
  _impl_.error_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::game::error>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string message_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.ErrorMessage.message_string"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.ErrorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.error error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional string message_string = 2;
  if (_internal_has_message_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_string().data(), static_cast<int>(this->_internal_message_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.ErrorMessage.message_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.ErrorMessage)
  return target;
}

size_t ErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.ErrorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message_string = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_string());
  }

  // .game.error error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorMessage::GetClassData() const { return &_class_data_; }


void ErrorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorMessage*>(&to_msg);
  auto& from = static_cast<const ErrorMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.ErrorMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_string()) {
    _this->_internal_set_message_string(from._internal_message_string());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  return true;
}

void ErrorMessage::InternalSwap(ErrorMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_string_, lhs_arena,
      &other->_impl_.message_string_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[1]);
}

// ===================================================================

class LoginRequest::_Internal {
 public:
  static const ::game::LoginRequestFirst& login_request_first(const LoginRequest* msg);
  static const ::game::LoginRequestSecond& login_request_second(const LoginRequest* msg);
};

const ::game::LoginRequestFirst&
LoginRequest::_Internal::login_request_first(const LoginRequest* msg) {
  return *msg->_impl_.login_requests_.login_request_first_;
}
const ::game::LoginRequestSecond&
LoginRequest::_Internal::login_request_second(const LoginRequest* msg) {
  return *msg->_impl_.login_requests_.login_request_second_;
}
void LoginRequest::set_allocated_login_request_first(::game::LoginRequestFirst* login_request_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_requests();
  if (login_request_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request_first);
    if (message_arena != submessage_arena) {
      login_request_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request_first, submessage_arena);
    }
    set_has_login_request_first();
    _impl_.login_requests_.login_request_first_ = login_request_first;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LoginRequest.login_request_first)
}
void LoginRequest::set_allocated_login_request_second(::game::LoginRequestSecond* login_request_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_requests();
  if (login_request_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request_second);
    if (message_arena != submessage_arena) {
      login_request_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request_second, submessage_arena);
    }
    set_has_login_request_second();
    _impl_.login_requests_.login_request_second_ = login_request_second;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LoginRequest.login_request_second)
}
LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_requests();
  switch (from.login_requests_case()) {
    case kLoginRequestFirst: {
      _this->_internal_mutable_login_request_first()->::game::LoginRequestFirst::MergeFrom(
          from._internal_login_request_first());
      break;
    }
    case kLoginRequestSecond: {
      _this->_internal_mutable_login_request_second()->::game::LoginRequestSecond::MergeFrom(
          from._internal_login_request_second());
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.LoginRequest)
}

inline void LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_requests();
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:game.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_requests()) {
    clear_login_requests();
  }
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::clear_login_requests() {
// @@protoc_insertion_point(one_of_clear_start:game.LoginRequest)
  switch (login_requests_case()) {
    case kLoginRequestFirst: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_requests_.login_request_first_;
      }
      break;
    }
    case kLoginRequestSecond: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_requests_.login_request_second_;
      }
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_REQUESTS_NOT_SET;
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_requests();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.LoginRequestFirst login_request_first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.LoginRequestSecond login_request_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.LoginRequestFirst login_request_first = 1;
  if (_internal_has_login_request_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::login_request_first(this),
        _Internal::login_request_first(this).GetCachedSize(), target, stream);
  }

  // .game.LoginRequestSecond login_request_second = 2;
  if (_internal_has_login_request_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login_request_second(this),
        _Internal::login_request_second(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_requests_case()) {
    // .game.LoginRequestFirst login_request_first = 1;
    case kLoginRequestFirst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_requests_.login_request_first_);
      break;
    }
    // .game.LoginRequestSecond login_request_second = 2;
    case kLoginRequestSecond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_requests_.login_request_second_);
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_requests_case()) {
    case kLoginRequestFirst: {
      _this->_internal_mutable_login_request_first()->::game::LoginRequestFirst::MergeFrom(
          from._internal_login_request_first());
      break;
    }
    case kLoginRequestSecond: {
      _this->_internal_mutable_login_request_second()->::game::LoginRequestSecond::MergeFrom(
          from._internal_login_request_second());
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_requests_, other->_impl_.login_requests_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[2]);
}

// ===================================================================

class LoginResponse::_Internal {
 public:
  static const ::game::LoginResponseFirst& login_response_first(const LoginResponse* msg);
  static const ::game::LoginResponseSecond& login_response_second(const LoginResponse* msg);
};

const ::game::LoginResponseFirst&
LoginResponse::_Internal::login_response_first(const LoginResponse* msg) {
  return *msg->_impl_.login_responses_.login_response_first_;
}
const ::game::LoginResponseSecond&
LoginResponse::_Internal::login_response_second(const LoginResponse* msg) {
  return *msg->_impl_.login_responses_.login_response_second_;
}
void LoginResponse::set_allocated_login_response_first(::game::LoginResponseFirst* login_response_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses();
  if (login_response_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_response_first);
    if (message_arena != submessage_arena) {
      login_response_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_response_first, submessage_arena);
    }
    set_has_login_response_first();
    _impl_.login_responses_.login_response_first_ = login_response_first;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LoginResponse.login_response_first)
}
void LoginResponse::set_allocated_login_response_second(::game::LoginResponseSecond* login_response_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses();
  if (login_response_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_response_second);
    if (message_arena != submessage_arena) {
      login_response_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_response_second, submessage_arena);
    }
    set_has_login_response_second();
    _impl_.login_responses_.login_response_second_ = login_response_second;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LoginResponse.login_response_second)
}
LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_responses();
  switch (from.login_responses_case()) {
    case kLoginResponseFirst: {
      _this->_internal_mutable_login_response_first()->::game::LoginResponseFirst::MergeFrom(
          from._internal_login_response_first());
      break;
    }
    case kLoginResponseSecond: {
      _this->_internal_mutable_login_response_second()->::game::LoginResponseSecond::MergeFrom(
          from._internal_login_response_second());
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.LoginResponse)
}

inline void LoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_responses();
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:game.LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_responses()) {
    clear_login_responses();
  }
}

void LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse::clear_login_responses() {
// @@protoc_insertion_point(one_of_clear_start:game.LoginResponse)
  switch (login_responses_case()) {
    case kLoginResponseFirst: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_.login_response_first_;
      }
      break;
    }
    case kLoginResponseSecond: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_.login_response_second_;
      }
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_RESPONSES_NOT_SET;
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_responses();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.LoginResponseFirst login_response_first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_response_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.LoginResponseSecond login_response_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_response_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.LoginResponseFirst login_response_first = 1;
  if (_internal_has_login_response_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::login_response_first(this),
        _Internal::login_response_first(this).GetCachedSize(), target, stream);
  }

  // .game.LoginResponseSecond login_response_second = 2;
  if (_internal_has_login_response_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login_response_second(this),
        _Internal::login_response_second(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_responses_case()) {
    // .game.LoginResponseFirst login_response_first = 1;
    case kLoginResponseFirst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_.login_response_first_);
      break;
    }
    // .game.LoginResponseSecond login_response_second = 2;
    case kLoginResponseSecond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_.login_response_second_);
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse::GetClassData() const { return &_class_data_; }


void LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_responses_case()) {
    case kLoginResponseFirst: {
      _this->_internal_mutable_login_response_first()->::game::LoginResponseFirst::MergeFrom(
          from._internal_login_response_first());
      break;
    }
    case kLoginResponseSecond: {
      _this->_internal_mutable_login_response_second()->::game::LoginResponseSecond::MergeFrom(
          from._internal_login_response_second());
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_responses_, other->_impl_.login_responses_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[3]);
}

// ===================================================================

class LoginRequestFirst::_Internal {
 public:
};

LoginRequestFirst::LoginRequestFirst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LoginRequestFirst)
}
LoginRequestFirst::LoginRequestFirst(const LoginRequestFirst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequestFirst* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.LoginRequestFirst)
}

inline void LoginRequestFirst::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequestFirst::~LoginRequestFirst() {
  // @@protoc_insertion_point(destructor:game.LoginRequestFirst)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequestFirst::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void LoginRequestFirst::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequestFirst::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LoginRequestFirst)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequestFirst::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.LoginRequestFirst.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequestFirst::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LoginRequestFirst)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.LoginRequestFirst.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LoginRequestFirst)
  return target;
}

size_t LoginRequestFirst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LoginRequestFirst)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequestFirst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequestFirst::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequestFirst::GetClassData() const { return &_class_data_; }


void LoginRequestFirst::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequestFirst*>(&to_msg);
  auto& from = static_cast<const LoginRequestFirst&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LoginRequestFirst)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequestFirst::CopyFrom(const LoginRequestFirst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LoginRequestFirst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestFirst::IsInitialized() const {
  return true;
}

void LoginRequestFirst::InternalSwap(LoginRequestFirst* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequestFirst::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[4]);
}

// ===================================================================

class LoginRequestSecond::_Internal {
 public:
};

LoginRequestSecond::LoginRequestSecond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LoginRequestSecond)
}
LoginRequestSecond::LoginRequestSecond(const LoginRequestSecond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequestSecond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.hashed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hashed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hashed().empty()) {
    _this->_impl_.hashed_.Set(from._internal_hashed(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.LoginRequestSecond)
}

inline void LoginRequestSecond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.hashed_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hashed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequestSecond::~LoginRequestSecond() {
  // @@protoc_insertion_point(destructor:game.LoginRequestSecond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequestSecond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.hashed_.Destroy();
}

void LoginRequestSecond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequestSecond::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LoginRequestSecond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.hashed_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequestSecond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.LoginRequestSecond.name"));
        } else
          goto handle_unusual;
        continue;
      // string hashed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hashed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.LoginRequestSecond.hashed"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequestSecond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LoginRequestSecond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.LoginRequestSecond.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string hashed = 2;
  if (!this->_internal_hashed().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hashed().data(), static_cast<int>(this->_internal_hashed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.LoginRequestSecond.hashed");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hashed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LoginRequestSecond)
  return target;
}

size_t LoginRequestSecond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LoginRequestSecond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string hashed = 2;
  if (!this->_internal_hashed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequestSecond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequestSecond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequestSecond::GetClassData() const { return &_class_data_; }


void LoginRequestSecond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequestSecond*>(&to_msg);
  auto& from = static_cast<const LoginRequestSecond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LoginRequestSecond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_hashed().empty()) {
    _this->_internal_set_hashed(from._internal_hashed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequestSecond::CopyFrom(const LoginRequestSecond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LoginRequestSecond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestSecond::IsInitialized() const {
  return true;
}

void LoginRequestSecond::InternalSwap(LoginRequestSecond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hashed_, lhs_arena,
      &other->_impl_.hashed_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequestSecond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[5]);
}

// ===================================================================

class LoginResponseFirst::_Internal {
 public:
  static const ::game::ErrorMessage& msg(const LoginResponseFirst* msg);
};

const ::game::ErrorMessage&
LoginResponseFirst::_Internal::msg(const LoginResponseFirst* msg) {
  return *msg->_impl_.login_responses_first_.msg_;
}
void LoginResponseFirst::set_allocated_msg(::game::ErrorMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses_first();
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
    _impl_.login_responses_first_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LoginResponseFirst.msg)
}
LoginResponseFirst::LoginResponseFirst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LoginResponseFirst)
}
LoginResponseFirst::LoginResponseFirst(const LoginResponseFirst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponseFirst* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_first_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_responses_first();
  switch (from.login_responses_first_case()) {
    case kSalt: {
      _this->_internal_set_salt(from._internal_salt());
      break;
    }
    case kMsg: {
      _this->_internal_mutable_msg()->::game::ErrorMessage::MergeFrom(
          from._internal_msg());
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.LoginResponseFirst)
}

inline void LoginResponseFirst::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_first_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_responses_first();
}

LoginResponseFirst::~LoginResponseFirst() {
  // @@protoc_insertion_point(destructor:game.LoginResponseFirst)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponseFirst::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_responses_first()) {
    clear_login_responses_first();
  }
}

void LoginResponseFirst::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponseFirst::clear_login_responses_first() {
// @@protoc_insertion_point(one_of_clear_start:game.LoginResponseFirst)
  switch (login_responses_first_case()) {
    case kSalt: {
      _impl_.login_responses_first_.salt_.Destroy();
      break;
    }
    case kMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_first_.msg_;
      }
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_RESPONSES_FIRST_NOT_SET;
}


void LoginResponseFirst::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LoginResponseFirst)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_responses_first();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponseFirst::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.LoginResponseFirst.salt"));
        } else
          goto handle_unusual;
        continue;
      // .game.ErrorMessage msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponseFirst::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LoginResponseFirst)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string salt = 1;
  if (_internal_has_salt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.LoginResponseFirst.salt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_salt(), target);
  }

  // .game.ErrorMessage msg = 2;
  if (_internal_has_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LoginResponseFirst)
  return target;
}

size_t LoginResponseFirst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LoginResponseFirst)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_responses_first_case()) {
    // string salt = 1;
    case kSalt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_salt());
      break;
    }
    // .game.ErrorMessage msg = 2;
    case kMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_first_.msg_);
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponseFirst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponseFirst::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponseFirst::GetClassData() const { return &_class_data_; }


void LoginResponseFirst::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponseFirst*>(&to_msg);
  auto& from = static_cast<const LoginResponseFirst&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LoginResponseFirst)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_responses_first_case()) {
    case kSalt: {
      _this->_internal_set_salt(from._internal_salt());
      break;
    }
    case kMsg: {
      _this->_internal_mutable_msg()->::game::ErrorMessage::MergeFrom(
          from._internal_msg());
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponseFirst::CopyFrom(const LoginResponseFirst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LoginResponseFirst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponseFirst::IsInitialized() const {
  return true;
}

void LoginResponseFirst::InternalSwap(LoginResponseFirst* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_responses_first_, other->_impl_.login_responses_first_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponseFirst::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[6]);
}

// ===================================================================

class LoginResponseSecond::_Internal {
 public:
  static const ::game::PlayerInfo& player_info(const LoginResponseSecond* msg);
  static const ::game::ErrorMessage& msg(const LoginResponseSecond* msg);
};

const ::game::PlayerInfo&
LoginResponseSecond::_Internal::player_info(const LoginResponseSecond* msg) {
  return *msg->_impl_.login_responses_second_.player_info_;
}
const ::game::ErrorMessage&
LoginResponseSecond::_Internal::msg(const LoginResponseSecond* msg) {
  return *msg->_impl_.login_responses_second_.msg_;
}
void LoginResponseSecond::set_allocated_player_info(::game::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses_second();
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    set_has_player_info();
    _impl_.login_responses_second_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LoginResponseSecond.player_info)
}
void LoginResponseSecond::set_allocated_msg(::game::ErrorMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses_second();
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
    _impl_.login_responses_second_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LoginResponseSecond.msg)
}
LoginResponseSecond::LoginResponseSecond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LoginResponseSecond)
}
LoginResponseSecond::LoginResponseSecond(const LoginResponseSecond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponseSecond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_second_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_responses_second();
  switch (from.login_responses_second_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::PlayerInfo::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kMsg: {
      _this->_internal_mutable_msg()->::game::ErrorMessage::MergeFrom(
          from._internal_msg());
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.LoginResponseSecond)
}

inline void LoginResponseSecond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_second_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_responses_second();
}

LoginResponseSecond::~LoginResponseSecond() {
  // @@protoc_insertion_point(destructor:game.LoginResponseSecond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponseSecond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_responses_second()) {
    clear_login_responses_second();
  }
}

void LoginResponseSecond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponseSecond::clear_login_responses_second() {
// @@protoc_insertion_point(one_of_clear_start:game.LoginResponseSecond)
  switch (login_responses_second_case()) {
    case kPlayerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_second_.player_info_;
      }
      break;
    }
    case kMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_second_.msg_;
      }
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_RESPONSES_SECOND_NOT_SET;
}


void LoginResponseSecond::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LoginResponseSecond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_responses_second();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponseSecond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.PlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.ErrorMessage msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponseSecond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LoginResponseSecond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.PlayerInfo player_info = 1;
  if (_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.ErrorMessage msg = 2;
  if (_internal_has_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LoginResponseSecond)
  return target;
}

size_t LoginResponseSecond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LoginResponseSecond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_responses_second_case()) {
    // .game.PlayerInfo player_info = 1;
    case kPlayerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_second_.player_info_);
      break;
    }
    // .game.ErrorMessage msg = 2;
    case kMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_second_.msg_);
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponseSecond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponseSecond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponseSecond::GetClassData() const { return &_class_data_; }


void LoginResponseSecond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponseSecond*>(&to_msg);
  auto& from = static_cast<const LoginResponseSecond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LoginResponseSecond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_responses_second_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::PlayerInfo::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kMsg: {
      _this->_internal_mutable_msg()->::game::ErrorMessage::MergeFrom(
          from._internal_msg());
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponseSecond::CopyFrom(const LoginResponseSecond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LoginResponseSecond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponseSecond::IsInitialized() const {
  return true;
}

void LoginResponseSecond::InternalSwap(LoginResponseSecond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_responses_second_, other->_impl_.login_responses_second_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponseSecond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[7]);
}

// ===================================================================

class RegisterRequest::_Internal {
 public:
  static const ::game::SaltHash& salt_hash(const RegisterRequest* msg);
};

const ::game::SaltHash&
RegisterRequest::_Internal::salt_hash(const RegisterRequest* msg) {
  return *msg->_impl_.salt_hash_;
}
RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.salt_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_salt_hash()) {
    _this->_impl_.salt_hash_ = new ::game::SaltHash(*from._impl_.salt_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:game.RegisterRequest)
}

inline void RegisterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.salt_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:game.RegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.salt_hash_;
}

void RegisterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.salt_hash_ != nullptr) {
    delete _impl_.salt_hash_;
  }
  _impl_.salt_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.RegisterRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .game.SaltHash salt_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_salt_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.RegisterRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .game.SaltHash salt_hash = 2;
  if (this->_internal_has_salt_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::salt_hash(this),
        _Internal::salt_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.SaltHash salt_hash = 2;
  if (this->_internal_has_salt_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.salt_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }


void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_salt_hash()) {
    _this->_internal_mutable_salt_hash()->::game::SaltHash::MergeFrom(
        from._internal_salt_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.salt_hash_, other->_impl_.salt_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[8]);
}

// ===================================================================

class RegisterResponse::_Internal {
 public:
  static const ::game::PlayerInfo& player_info(const RegisterResponse* msg);
  static const ::game::ErrorMessage& msg(const RegisterResponse* msg);
};

const ::game::PlayerInfo&
RegisterResponse::_Internal::player_info(const RegisterResponse* msg) {
  return *msg->_impl_.register_responses_.player_info_;
}
const ::game::ErrorMessage&
RegisterResponse::_Internal::msg(const RegisterResponse* msg) {
  return *msg->_impl_.register_responses_.msg_;
}
void RegisterResponse::set_allocated_player_info(::game::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_register_responses();
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    set_has_player_info();
    _impl_.register_responses_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_set_allocated:game.RegisterResponse.player_info)
}
void RegisterResponse::set_allocated_msg(::game::ErrorMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_register_responses();
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
    _impl_.register_responses_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:game.RegisterResponse.msg)
}
RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.register_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_register_responses();
  switch (from.register_responses_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::PlayerInfo::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kMsg: {
      _this->_internal_mutable_msg()->::game::ErrorMessage::MergeFrom(
          from._internal_msg());
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.RegisterResponse)
}

inline void RegisterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.register_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_register_responses();
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:game.RegisterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_register_responses()) {
    clear_register_responses();
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterResponse::clear_register_responses() {
// @@protoc_insertion_point(one_of_clear_start:game.RegisterResponse)
  switch (register_responses_case()) {
    case kPlayerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.register_responses_.player_info_;
      }
      break;
    }
    case kMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.register_responses_.msg_;
      }
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REGISTER_RESPONSES_NOT_SET;
}


void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.RegisterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_register_responses();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.PlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.ErrorMessage msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.RegisterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.PlayerInfo player_info = 1;
  if (_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.ErrorMessage msg = 2;
  if (_internal_has_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.RegisterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (register_responses_case()) {
    // .game.PlayerInfo player_info = 1;
    case kPlayerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.register_responses_.player_info_);
      break;
    }
    // .game.ErrorMessage msg = 2;
    case kMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.register_responses_.msg_);
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterResponse::GetClassData() const { return &_class_data_; }


void RegisterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterResponse*>(&to_msg);
  auto& from = static_cast<const RegisterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.register_responses_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::PlayerInfo::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kMsg: {
      _this->_internal_mutable_msg()->::game::ErrorMessage::MergeFrom(
          from._internal_msg());
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.register_responses_, other->_impl_.register_responses_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[9]);
}

// ===================================================================

class SaltHash::_Internal {
 public:
};

SaltHash::SaltHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SaltHash)
}
SaltHash::SaltHash(const SaltHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaltHash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.SaltHash)
}

inline void SaltHash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaltHash::~SaltHash() {
  // @@protoc_insertion_point(destructor:game.SaltHash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaltHash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.salt_.Destroy();
  _impl_.hash_.Destroy();
}

void SaltHash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaltHash::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SaltHash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.salt_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaltHash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SaltHash.salt"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SaltHash.hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaltHash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SaltHash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string salt = 1;
  if (!this->_internal_salt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SaltHash.salt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_salt(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SaltHash.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SaltHash)
  return target;
}

size_t SaltHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SaltHash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string salt = 1;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaltHash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaltHash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaltHash::GetClassData() const { return &_class_data_; }


void SaltHash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaltHash*>(&to_msg);
  auto& from = static_cast<const SaltHash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SaltHash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaltHash::CopyFrom(const SaltHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SaltHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaltHash::IsInitialized() const {
  return true;
}

void SaltHash::InternalSwap(SaltHash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SaltHash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[10]);
}

// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:game.Player)
}

inline void Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:game.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:game.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.balance_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.Player.name"));
        } else
          goto handle_unusual;
        continue;
      // .game.PlayerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::game::PlayerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.Player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .game.PlayerStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // int32 balance = 3;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.PlayerStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 balance = 3;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, _impl_.balance_)
      + sizeof(Player::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(Player, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[11]);
}

// ===================================================================

class LobbyRequests::_Internal {
 public:
  static const ::game::CreateGameRequest& create_game_request(const LobbyRequests* msg);
  static const ::game::SearchGameRequest& search_game_request(const LobbyRequests* msg);
};

const ::game::CreateGameRequest&
LobbyRequests::_Internal::create_game_request(const LobbyRequests* msg) {
  return *msg->_impl_.requests_.create_game_request_;
}
const ::game::SearchGameRequest&
LobbyRequests::_Internal::search_game_request(const LobbyRequests* msg) {
  return *msg->_impl_.requests_.search_game_request_;
}
void LobbyRequests::set_allocated_create_game_request(::game::CreateGameRequest* create_game_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requests();
  if (create_game_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_game_request);
    if (message_arena != submessage_arena) {
      create_game_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_game_request, submessage_arena);
    }
    set_has_create_game_request();
    _impl_.requests_.create_game_request_ = create_game_request;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LobbyRequests.create_game_request)
}
void LobbyRequests::set_allocated_search_game_request(::game::SearchGameRequest* search_game_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requests();
  if (search_game_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_game_request);
    if (message_arena != submessage_arena) {
      search_game_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_game_request, submessage_arena);
    }
    set_has_search_game_request();
    _impl_.requests_.search_game_request_ = search_game_request;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LobbyRequests.search_game_request)
}
LobbyRequests::LobbyRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LobbyRequests)
}
LobbyRequests::LobbyRequests(const LobbyRequests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobbyRequests* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_requests();
  switch (from.requests_case()) {
    case kCreateGameRequest: {
      _this->_internal_mutable_create_game_request()->::game::CreateGameRequest::MergeFrom(
          from._internal_create_game_request());
      break;
    }
    case kSearchGameRequest: {
      _this->_internal_mutable_search_game_request()->::game::SearchGameRequest::MergeFrom(
          from._internal_search_game_request());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.LobbyRequests)
}

inline void LobbyRequests::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_requests();
}

LobbyRequests::~LobbyRequests() {
  // @@protoc_insertion_point(destructor:game.LobbyRequests)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LobbyRequests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_requests()) {
    clear_requests();
  }
}

void LobbyRequests::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobbyRequests::clear_requests() {
// @@protoc_insertion_point(one_of_clear_start:game.LobbyRequests)
  switch (requests_case()) {
    case kCreateGameRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requests_.create_game_request_;
      }
      break;
    }
    case kSearchGameRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requests_.search_game_request_;
      }
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUESTS_NOT_SET;
}


void LobbyRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LobbyRequests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_requests();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyRequests::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.CreateGameRequest create_game_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_game_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.SearchGameRequest search_game_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_game_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyRequests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LobbyRequests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.CreateGameRequest create_game_request = 1;
  if (_internal_has_create_game_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_game_request(this),
        _Internal::create_game_request(this).GetCachedSize(), target, stream);
  }

  // .game.SearchGameRequest search_game_request = 2;
  if (_internal_has_search_game_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::search_game_request(this),
        _Internal::search_game_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LobbyRequests)
  return target;
}

size_t LobbyRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LobbyRequests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (requests_case()) {
    // .game.CreateGameRequest create_game_request = 1;
    case kCreateGameRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_.create_game_request_);
      break;
    }
    // .game.SearchGameRequest search_game_request = 2;
    case kSearchGameRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_.search_game_request_);
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyRequests::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobbyRequests::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyRequests::GetClassData() const { return &_class_data_; }


void LobbyRequests::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobbyRequests*>(&to_msg);
  auto& from = static_cast<const LobbyRequests&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LobbyRequests)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.requests_case()) {
    case kCreateGameRequest: {
      _this->_internal_mutable_create_game_request()->::game::CreateGameRequest::MergeFrom(
          from._internal_create_game_request());
      break;
    }
    case kSearchGameRequest: {
      _this->_internal_mutable_search_game_request()->::game::SearchGameRequest::MergeFrom(
          from._internal_search_game_request());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyRequests::CopyFrom(const LobbyRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LobbyRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyRequests::IsInitialized() const {
  return true;
}

void LobbyRequests::InternalSwap(LobbyRequests* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.requests_, other->_impl_.requests_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyRequests::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[12]);
}

// ===================================================================

class LobbyResponses::_Internal {
 public:
  static const ::game::CreateGameResponse& create_game_response(const LobbyResponses* msg);
  static const ::game::SearchGameResponse& search_game_response(const LobbyResponses* msg);
};

const ::game::CreateGameResponse&
LobbyResponses::_Internal::create_game_response(const LobbyResponses* msg) {
  return *msg->_impl_.responses_.create_game_response_;
}
const ::game::SearchGameResponse&
LobbyResponses::_Internal::search_game_response(const LobbyResponses* msg) {
  return *msg->_impl_.responses_.search_game_response_;
}
void LobbyResponses::set_allocated_create_game_response(::game::CreateGameResponse* create_game_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_responses();
  if (create_game_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_game_response);
    if (message_arena != submessage_arena) {
      create_game_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_game_response, submessage_arena);
    }
    set_has_create_game_response();
    _impl_.responses_.create_game_response_ = create_game_response;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LobbyResponses.create_game_response)
}
void LobbyResponses::set_allocated_search_game_response(::game::SearchGameResponse* search_game_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_responses();
  if (search_game_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_game_response);
    if (message_arena != submessage_arena) {
      search_game_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_game_response, submessage_arena);
    }
    set_has_search_game_response();
    _impl_.responses_.search_game_response_ = search_game_response;
  }
  // @@protoc_insertion_point(field_set_allocated:game.LobbyResponses.search_game_response)
}
LobbyResponses::LobbyResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.LobbyResponses)
}
LobbyResponses::LobbyResponses(const LobbyResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobbyResponses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_responses();
  switch (from.responses_case()) {
    case kCreateGameResponse: {
      _this->_internal_mutable_create_game_response()->::game::CreateGameResponse::MergeFrom(
          from._internal_create_game_response());
      break;
    }
    case kSearchGameResponse: {
      _this->_internal_mutable_search_game_response()->::game::SearchGameResponse::MergeFrom(
          from._internal_search_game_response());
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.LobbyResponses)
}

inline void LobbyResponses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_responses();
}

LobbyResponses::~LobbyResponses() {
  // @@protoc_insertion_point(destructor:game.LobbyResponses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LobbyResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_responses()) {
    clear_responses();
  }
}

void LobbyResponses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobbyResponses::clear_responses() {
// @@protoc_insertion_point(one_of_clear_start:game.LobbyResponses)
  switch (responses_case()) {
    case kCreateGameResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.responses_.create_game_response_;
      }
      break;
    }
    case kSearchGameResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.responses_.search_game_response_;
      }
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSES_NOT_SET;
}


void LobbyResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:game.LobbyResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_responses();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyResponses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.CreateGameResponse create_game_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_game_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.SearchGameResponse search_game_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_game_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.LobbyResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.CreateGameResponse create_game_response = 1;
  if (_internal_has_create_game_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::create_game_response(this),
        _Internal::create_game_response(this).GetCachedSize(), target, stream);
  }

  // .game.SearchGameResponse search_game_response = 2;
  if (_internal_has_search_game_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::search_game_response(this),
        _Internal::search_game_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.LobbyResponses)
  return target;
}

size_t LobbyResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.LobbyResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (responses_case()) {
    // .game.CreateGameResponse create_game_response = 1;
    case kCreateGameResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responses_.create_game_response_);
      break;
    }
    // .game.SearchGameResponse search_game_response = 2;
    case kSearchGameResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responses_.search_game_response_);
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobbyResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyResponses::GetClassData() const { return &_class_data_; }


void LobbyResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobbyResponses*>(&to_msg);
  auto& from = static_cast<const LobbyResponses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.LobbyResponses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.responses_case()) {
    case kCreateGameResponse: {
      _this->_internal_mutable_create_game_response()->::game::CreateGameResponse::MergeFrom(
          from._internal_create_game_response());
      break;
    }
    case kSearchGameResponse: {
      _this->_internal_mutable_search_game_response()->::game::SearchGameResponse::MergeFrom(
          from._internal_search_game_response());
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyResponses::CopyFrom(const LobbyResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.LobbyResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyResponses::IsInitialized() const {
  return true;
}

void LobbyResponses::InternalSwap(LobbyResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.responses_, other->_impl_.responses_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyResponses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[13]);
}

// ===================================================================

class CreateGameRequest::_Internal {
 public:
  static const ::game::PlayerInfo& player_info(const CreateGameRequest* msg);
  static const ::game::GameParameters& game_parameters(const CreateGameRequest* msg);
};

const ::game::PlayerInfo&
CreateGameRequest::_Internal::player_info(const CreateGameRequest* msg) {
  return *msg->_impl_.player_info_;
}
const ::game::GameParameters&
CreateGameRequest::_Internal::game_parameters(const CreateGameRequest* msg) {
  return *msg->_impl_.game_parameters_;
}
CreateGameRequest::CreateGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CreateGameRequest)
}
CreateGameRequest::CreateGameRequest(const CreateGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_owner_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_owner().empty()) {
    _this->_impl_.game_owner_.Set(from._internal_game_owner(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::game::PlayerInfo(*from._impl_.player_info_);
  }
  if (from._internal_has_game_parameters()) {
    _this->_impl_.game_parameters_ = new ::game::GameParameters(*from._impl_.game_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:game.CreateGameRequest)
}

inline void CreateGameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_owner_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.game_owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateGameRequest::~CreateGameRequest() {
  // @@protoc_insertion_point(destructor:game.CreateGameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_owner_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_;
  if (this != internal_default_instance()) delete _impl_.game_parameters_;
}

void CreateGameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CreateGameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.game_parameters_ != nullptr) {
    delete _impl_.game_parameters_;
  }
  _impl_.game_parameters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string game_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_game_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CreateGameRequest.game_owner"));
        } else
          goto handle_unusual;
        continue;
      // .game.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.GameParameters game_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CreateGameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_owner = 1;
  if (!this->_internal_game_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_owner().data(), static_cast<int>(this->_internal_game_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CreateGameRequest.game_owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_owner(), target);
  }

  // .game.PlayerInfo player_info = 2;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.GameParameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::game_parameters(this),
        _Internal::game_parameters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CreateGameRequest)
  return target;
}

size_t CreateGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CreateGameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_owner = 1;
  if (!this->_internal_game_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_owner());
  }

  // .game.PlayerInfo player_info = 2;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  // .game.GameParameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_parameters_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGameRequest::GetClassData() const { return &_class_data_; }


void CreateGameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGameRequest*>(&to_msg);
  auto& from = static_cast<const CreateGameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CreateGameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_game_owner().empty()) {
    _this->_internal_set_game_owner(from._internal_game_owner());
  }
  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::game::PlayerInfo::MergeFrom(
        from._internal_player_info());
  }
  if (from._internal_has_game_parameters()) {
    _this->_internal_mutable_game_parameters()->::game::GameParameters::MergeFrom(
        from._internal_game_parameters());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGameRequest::CopyFrom(const CreateGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CreateGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameRequest::IsInitialized() const {
  return true;
}

void CreateGameRequest::InternalSwap(CreateGameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_owner_, lhs_arena,
      &other->_impl_.game_owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateGameRequest, _impl_.game_parameters_)
      + sizeof(CreateGameRequest::_impl_.game_parameters_)
      - PROTOBUF_FIELD_OFFSET(CreateGameRequest, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[14]);
}

// ===================================================================

class CreateGameResponse::_Internal {
 public:
  static const ::game::StatusMessage& status_message(const CreateGameResponse* msg);
};

const ::game::StatusMessage&
CreateGameResponse::_Internal::status_message(const CreateGameResponse* msg) {
  return *msg->_impl_.status_message_;
}
CreateGameResponse::CreateGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CreateGameResponse)
}
CreateGameResponse::CreateGameResponse(const CreateGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_ = new ::game::StatusMessage(*from._impl_.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:game.CreateGameResponse)
}

inline void CreateGameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateGameResponse::~CreateGameResponse() {
  // @@protoc_insertion_point(destructor:game.CreateGameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_message_;
}

void CreateGameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CreateGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.StatusMessage status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CreateGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.StatusMessage status_message = 1;
  if (this->_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  // repeated .game.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CreateGameResponse)
  return target;
}

size_t CreateGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CreateGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .game.StatusMessage status_message = 1;
  if (this->_internal_has_status_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGameResponse::GetClassData() const { return &_class_data_; }


void CreateGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGameResponse*>(&to_msg);
  auto& from = static_cast<const CreateGameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CreateGameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_status_message()) {
    _this->_internal_mutable_status_message()->::game::StatusMessage::MergeFrom(
        from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGameResponse::CopyFrom(const CreateGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CreateGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameResponse::IsInitialized() const {
  return true;
}

void CreateGameResponse::InternalSwap(CreateGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.status_message_, other->_impl_.status_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[15]);
}

// ===================================================================

class SearchGameRequest::_Internal {
 public:
  static const ::game::PlayerInfo& player_info(const SearchGameRequest* msg);
  static const ::game::GameParameters& game_parameters(const SearchGameRequest* msg);
};

const ::game::PlayerInfo&
SearchGameRequest::_Internal::player_info(const SearchGameRequest* msg) {
  return *msg->_impl_.player_info_;
}
const ::game::GameParameters&
SearchGameRequest::_Internal::game_parameters(const SearchGameRequest* msg) {
  return *msg->_impl_.game_parameters_;
}
SearchGameRequest::SearchGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SearchGameRequest)
}
SearchGameRequest::SearchGameRequest(const SearchGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchGameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::game::PlayerInfo(*from._impl_.player_info_);
  }
  if (from._internal_has_game_parameters()) {
    _this->_impl_.game_parameters_ = new ::game::GameParameters(*from._impl_.game_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:game.SearchGameRequest)
}

inline void SearchGameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchGameRequest::~SearchGameRequest() {
  // @@protoc_insertion_point(destructor:game.SearchGameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_;
  if (this != internal_default_instance()) delete _impl_.game_parameters_;
}

void SearchGameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SearchGameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.game_parameters_ != nullptr) {
    delete _impl_.game_parameters_;
  }
  _impl_.game_parameters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchGameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SearchGameRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .game.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.GameParameters game_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchGameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SearchGameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SearchGameRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .game.PlayerInfo player_info = 2;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.GameParameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::game_parameters(this),
        _Internal::game_parameters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SearchGameRequest)
  return target;
}

size_t SearchGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SearchGameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.PlayerInfo player_info = 2;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  // .game.GameParameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_parameters_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchGameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchGameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchGameRequest::GetClassData() const { return &_class_data_; }


void SearchGameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchGameRequest*>(&to_msg);
  auto& from = static_cast<const SearchGameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SearchGameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::game::PlayerInfo::MergeFrom(
        from._internal_player_info());
  }
  if (from._internal_has_game_parameters()) {
    _this->_internal_mutable_game_parameters()->::game::GameParameters::MergeFrom(
        from._internal_game_parameters());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchGameRequest::CopyFrom(const SearchGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SearchGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGameRequest::IsInitialized() const {
  return true;
}

void SearchGameRequest::InternalSwap(SearchGameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchGameRequest, _impl_.game_parameters_)
      + sizeof(SearchGameRequest::_impl_.game_parameters_)
      - PROTOBUF_FIELD_OFFSET(SearchGameRequest, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchGameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[16]);
}

// ===================================================================

class SearchGameResponse::_Internal {
 public:
  static const ::game::StatusMessage& status_message(const SearchGameResponse* msg);
};

const ::game::StatusMessage&
SearchGameResponse::_Internal::status_message(const SearchGameResponse* msg) {
  return *msg->_impl_.status_message_;
}
SearchGameResponse::SearchGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SearchGameResponse)
}
SearchGameResponse::SearchGameResponse(const SearchGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchGameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_ = new ::game::StatusMessage(*from._impl_.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:game.SearchGameResponse)
}

inline void SearchGameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchGameResponse::~SearchGameResponse() {
  // @@protoc_insertion_point(destructor:game.SearchGameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_message_;
}

void SearchGameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SearchGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchGameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.StatusMessage status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SearchGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.StatusMessage status_message = 1;
  if (this->_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  // repeated .game.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SearchGameResponse)
  return target;
}

size_t SearchGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SearchGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .game.StatusMessage status_message = 1;
  if (this->_internal_has_status_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchGameResponse::GetClassData() const { return &_class_data_; }


void SearchGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchGameResponse*>(&to_msg);
  auto& from = static_cast<const SearchGameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SearchGameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_status_message()) {
    _this->_internal_mutable_status_message()->::game::StatusMessage::MergeFrom(
        from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchGameResponse::CopyFrom(const SearchGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SearchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGameResponse::IsInitialized() const {
  return true;
}

void SearchGameResponse::InternalSwap(SearchGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.status_message_, other->_impl_.status_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[17]);
}

// ===================================================================

class GameRequests::_Internal {
 public:
  static const ::game::make_move_request& make_move_request(const GameRequests* msg);
};

const ::game::make_move_request&
GameRequests::_Internal::make_move_request(const GameRequests* msg) {
  return *msg->_impl_.requests_.make_move_request_;
}
void GameRequests::set_allocated_make_move_request(::game::make_move_request* make_move_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requests();
  if (make_move_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(make_move_request);
    if (message_arena != submessage_arena) {
      make_move_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_move_request, submessage_arena);
    }
    set_has_make_move_request();
    _impl_.requests_.make_move_request_ = make_move_request;
  }
  // @@protoc_insertion_point(field_set_allocated:game.GameRequests.MakeMoveRequest)
}
GameRequests::GameRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.GameRequests)
}
GameRequests::GameRequests(const GameRequests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameRequests* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_requests();
  switch (from.requests_case()) {
    case kMakeMoveRequest: {
      _this->_internal_mutable_make_move_request()->::game::make_move_request::MergeFrom(
          from._internal_make_move_request());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.GameRequests)
}

inline void GameRequests::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_requests();
}

GameRequests::~GameRequests() {
  // @@protoc_insertion_point(destructor:game.GameRequests)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameRequests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_requests()) {
    clear_requests();
  }
}

void GameRequests::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameRequests::clear_requests() {
// @@protoc_insertion_point(one_of_clear_start:game.GameRequests)
  switch (requests_case()) {
    case kMakeMoveRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requests_.make_move_request_;
      }
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUESTS_NOT_SET;
}


void GameRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GameRequests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_requests();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameRequests::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.MakeMoveRequest MakeMoveRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_move_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameRequests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GameRequests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.MakeMoveRequest MakeMoveRequest = 1;
  if (_internal_has_make_move_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::make_move_request(this),
        _Internal::make_move_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GameRequests)
  return target;
}

size_t GameRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GameRequests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (requests_case()) {
    // .game.MakeMoveRequest MakeMoveRequest = 1;
    case kMakeMoveRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_.make_move_request_);
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameRequests::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameRequests::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameRequests::GetClassData() const { return &_class_data_; }


void GameRequests::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameRequests*>(&to_msg);
  auto& from = static_cast<const GameRequests&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.GameRequests)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.requests_case()) {
    case kMakeMoveRequest: {
      _this->_internal_mutable_make_move_request()->::game::make_move_request::MergeFrom(
          from._internal_make_move_request());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameRequests::CopyFrom(const GameRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GameRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRequests::IsInitialized() const {
  return true;
}

void GameRequests::InternalSwap(GameRequests* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.requests_, other->_impl_.requests_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameRequests::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[18]);
}

// ===================================================================

class GameResponses::_Internal {
 public:
  static const ::game::make_move_response& make_move_response(const GameResponses* msg);
};

const ::game::make_move_response&
GameResponses::_Internal::make_move_response(const GameResponses* msg) {
  return *msg->_impl_.responses_.make_move_response_;
}
void GameResponses::set_allocated_make_move_response(::game::make_move_response* make_move_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_responses();
  if (make_move_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(make_move_response);
    if (message_arena != submessage_arena) {
      make_move_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_move_response, submessage_arena);
    }
    set_has_make_move_response();
    _impl_.responses_.make_move_response_ = make_move_response;
  }
  // @@protoc_insertion_point(field_set_allocated:game.GameResponses.MakeMoveResponse)
}
GameResponses::GameResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.GameResponses)
}
GameResponses::GameResponses(const GameResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameResponses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_responses();
  switch (from.responses_case()) {
    case kMakeMoveResponse: {
      _this->_internal_mutable_make_move_response()->::game::make_move_response::MergeFrom(
          from._internal_make_move_response());
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.GameResponses)
}

inline void GameResponses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_responses();
}

GameResponses::~GameResponses() {
  // @@protoc_insertion_point(destructor:game.GameResponses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_responses()) {
    clear_responses();
  }
}

void GameResponses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameResponses::clear_responses() {
// @@protoc_insertion_point(one_of_clear_start:game.GameResponses)
  switch (responses_case()) {
    case kMakeMoveResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.responses_.make_move_response_;
      }
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSES_NOT_SET;
}


void GameResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GameResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_responses();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameResponses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.MakeMoveResponse MakeMoveResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_move_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GameResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.MakeMoveResponse MakeMoveResponse = 1;
  if (_internal_has_make_move_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::make_move_response(this),
        _Internal::make_move_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GameResponses)
  return target;
}

size_t GameResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GameResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (responses_case()) {
    // .game.MakeMoveResponse MakeMoveResponse = 1;
    case kMakeMoveResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responses_.make_move_response_);
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameResponses::GetClassData() const { return &_class_data_; }


void GameResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameResponses*>(&to_msg);
  auto& from = static_cast<const GameResponses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.GameResponses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.responses_case()) {
    case kMakeMoveResponse: {
      _this->_internal_mutable_make_move_response()->::game::make_move_response::MergeFrom(
          from._internal_make_move_response());
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameResponses::CopyFrom(const GameResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GameResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResponses::IsInitialized() const {
  return true;
}

void GameResponses::InternalSwap(GameResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.responses_, other->_impl_.responses_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResponses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[19]);
}

// ===================================================================

class make_move_request::_Internal {
 public:
};

make_move_request::make_move_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.MakeMoveRequest)
}
make_move_request::make_move_request(const make_move_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  make_move_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_name_){}
    , decltype(_impl_.make_blind_){}
    , decltype(_impl_.fold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_name().empty()) {
    _this->_impl_.client_name_.Set(from._internal_client_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.make_blind_, &from._impl_.make_blind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fold_) -
    reinterpret_cast<char*>(&_impl_.make_blind_)) + sizeof(_impl_.fold_));
  // @@protoc_insertion_point(copy_constructor:game.MakeMoveRequest)
}

inline void make_move_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_name_){}
    , decltype(_impl_.make_blind_){0}
    , decltype(_impl_.fold_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

make_move_request::~make_move_request() {
  // @@protoc_insertion_point(destructor:game.MakeMoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void make_move_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_name_.Destroy();
}

void make_move_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void make_move_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.MakeMoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_name_.ClearToEmpty();
  ::memset(&_impl_.make_blind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fold_) -
      reinterpret_cast<char*>(&_impl_.make_blind_)) + sizeof(_impl_.fold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* make_move_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.MakeMoveRequest.client_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 make_blind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.make_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* make_move_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.MakeMoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_name = 1;
  if (!this->_internal_client_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.MakeMoveRequest.client_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_name(), target);
  }

  // int32 make_blind = 2;
  if (this->_internal_make_blind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_make_blind(), target);
  }

  // bool fold = 3;
  if (this->_internal_fold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_fold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.MakeMoveRequest)
  return target;
}

size_t make_move_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.MakeMoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_name = 1;
  if (!this->_internal_client_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // int32 make_blind = 2;
  if (this->_internal_make_blind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_make_blind());
  }

  // bool fold = 3;
  if (this->_internal_fold() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData make_move_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    make_move_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*make_move_request::GetClassData() const { return &_class_data_; }


void make_move_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<make_move_request*>(&to_msg);
  auto& from = static_cast<const make_move_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.MakeMoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_name().empty()) {
    _this->_internal_set_client_name(from._internal_client_name());
  }
  if (from._internal_make_blind() != 0) {
    _this->_internal_set_make_blind(from._internal_make_blind());
  }
  if (from._internal_fold() != 0) {
    _this->_internal_set_fold(from._internal_fold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void make_move_request::CopyFrom(const make_move_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.MakeMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool make_move_request::IsInitialized() const {
  return true;
}

void make_move_request::InternalSwap(make_move_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_name_, lhs_arena,
      &other->_impl_.client_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(make_move_request, _impl_.fold_)
      + sizeof(make_move_request::_impl_.fold_)
      - PROTOBUF_FIELD_OFFSET(make_move_request, _impl_.make_blind_)>(
          reinterpret_cast<char*>(&_impl_.make_blind_),
          reinterpret_cast<char*>(&other->_impl_.make_blind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata make_move_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[20]);
}

// ===================================================================

class make_move_response::_Internal {
 public:
};

make_move_response::make_move_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.MakeMoveResponse)
}
make_move_response::make_move_response(const make_move_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  make_move_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.MakeMoveResponse)
}

inline void make_move_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

make_move_response::~make_move_response() {
  // @@protoc_insertion_point(destructor:game.MakeMoveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void make_move_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void make_move_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void make_move_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.MakeMoveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* make_move_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* make_move_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.MakeMoveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.MakeMoveResponse)
  return target;
}

size_t make_move_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.MakeMoveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData make_move_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    make_move_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*make_move_response::GetClassData() const { return &_class_data_; }


void make_move_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<make_move_response*>(&to_msg);
  auto& from = static_cast<const make_move_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.MakeMoveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void make_move_response::CopyFrom(const make_move_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.MakeMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool make_move_response::IsInitialized() const {
  return true;
}

void make_move_response::InternalSwap(make_move_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata make_move_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[21]);
}

// ===================================================================

class GameParameters::_Internal {
 public:
};

GameParameters::GameParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.GameParameters)
}
GameParameters::GameParameters(const GameParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_name_){}
    , decltype(_impl_.number_of_players_){}
    , decltype(_impl_.minimal_bet_){}
    , decltype(_impl_.game_enter_balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_name().empty()) {
    _this->_impl_.game_name_.Set(from._internal_game_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.number_of_players_, &from._impl_.number_of_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_enter_balance_) -
    reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.game_enter_balance_));
  // @@protoc_insertion_point(copy_constructor:game.GameParameters)
}

inline void GameParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_name_){}
    , decltype(_impl_.number_of_players_){0}
    , decltype(_impl_.minimal_bet_){0}
    , decltype(_impl_.game_enter_balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameParameters::~GameParameters() {
  // @@protoc_insertion_point(destructor:game.GameParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_name_.Destroy();
}

void GameParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GameParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_name_.ClearToEmpty();
  ::memset(&_impl_.number_of_players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.game_enter_balance_) -
      reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.game_enter_balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string game_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_game_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.GameParameters.game_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 number_of_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.number_of_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minimal_bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.minimal_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 game_enter_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.game_enter_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GameParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_name = 1;
  if (!this->_internal_game_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.GameParameters.game_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_name(), target);
  }

  // int32 number_of_players = 2;
  if (this->_internal_number_of_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_number_of_players(), target);
  }

  // int32 minimal_bet = 3;
  if (this->_internal_minimal_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_minimal_bet(), target);
  }

  // int32 game_enter_balance = 4;
  if (this->_internal_game_enter_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_enter_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GameParameters)
  return target;
}

size_t GameParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GameParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_name = 1;
  if (!this->_internal_game_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_name());
  }

  // int32 number_of_players = 2;
  if (this->_internal_number_of_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_players());
  }

  // int32 minimal_bet = 3;
  if (this->_internal_minimal_bet() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minimal_bet());
  }

  // int32 game_enter_balance = 4;
  if (this->_internal_game_enter_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_enter_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameParameters::GetClassData() const { return &_class_data_; }


void GameParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameParameters*>(&to_msg);
  auto& from = static_cast<const GameParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.GameParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_game_name().empty()) {
    _this->_internal_set_game_name(from._internal_game_name());
  }
  if (from._internal_number_of_players() != 0) {
    _this->_internal_set_number_of_players(from._internal_number_of_players());
  }
  if (from._internal_minimal_bet() != 0) {
    _this->_internal_set_minimal_bet(from._internal_minimal_bet());
  }
  if (from._internal_game_enter_balance() != 0) {
    _this->_internal_set_game_enter_balance(from._internal_game_enter_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameParameters::CopyFrom(const GameParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GameParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameParameters::IsInitialized() const {
  return true;
}

void GameParameters::InternalSwap(GameParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_name_, lhs_arena,
      &other->_impl_.game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameParameters, _impl_.game_enter_balance_)
      + sizeof(GameParameters::_impl_.game_enter_balance_)
      - PROTOBUF_FIELD_OFFSET(GameParameters, _impl_.number_of_players_)>(
          reinterpret_cast<char*>(&_impl_.number_of_players_),
          reinterpret_cast<char*>(&other->_impl_.number_of_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[22]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , decltype(_impl_.client_games_){}
    , decltype(_impl_.client_wins_){}
    , decltype(_impl_.client_balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_balance_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.client_balance_));
  // @@protoc_insertion_point(copy_constructor:game.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){0}
    , decltype(_impl_.client_games_){0}
    , decltype(_impl_.client_wins_){0}
    , decltype(_impl_.client_balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:game.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.client_balance_) -
      reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.client_balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 client_games = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.client_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 client_wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.client_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 client_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.client_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // int32 client_games = 2;
  if (this->_internal_client_games() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_client_games(), target);
  }

  // int32 client_wins = 3;
  if (this->_internal_client_wins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_wins(), target);
  }

  // int32 client_balance = 4;
  if (this->_internal_client_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_client_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  // int32 client_games = 2;
  if (this->_internal_client_games() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_games());
  }

  // int32 client_wins = 3;
  if (this->_internal_client_wins() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_wins());
  }

  // int32 client_balance = 4;
  if (this->_internal_client_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_client_games() != 0) {
    _this->_internal_set_client_games(from._internal_client_games());
  }
  if (from._internal_client_wins() != 0) {
    _this->_internal_set_client_wins(from._internal_client_wins());
  }
  if (from._internal_client_balance() != 0) {
    _this->_internal_set_client_balance(from._internal_client_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.client_balance_)
      + sizeof(PlayerInfo::_impl_.client_balance_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.client_id_)>(
          reinterpret_cast<char*>(&_impl_.client_id_),
          reinterpret_cast<char*>(&other->_impl_.client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::StatusMessage*
Arena::CreateMaybeMessage< ::game::StatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::StatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::game::ErrorMessage*
Arena::CreateMaybeMessage< ::game::ErrorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::ErrorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LoginRequest*
Arena::CreateMaybeMessage< ::game::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LoginResponse*
Arena::CreateMaybeMessage< ::game::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LoginRequestFirst*
Arena::CreateMaybeMessage< ::game::LoginRequestFirst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LoginRequestFirst >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LoginRequestSecond*
Arena::CreateMaybeMessage< ::game::LoginRequestSecond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LoginRequestSecond >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LoginResponseFirst*
Arena::CreateMaybeMessage< ::game::LoginResponseFirst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LoginResponseFirst >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LoginResponseSecond*
Arena::CreateMaybeMessage< ::game::LoginResponseSecond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LoginResponseSecond >(arena);
}
template<> PROTOBUF_NOINLINE ::game::RegisterRequest*
Arena::CreateMaybeMessage< ::game::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::RegisterResponse*
Arena::CreateMaybeMessage< ::game::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SaltHash*
Arena::CreateMaybeMessage< ::game::SaltHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SaltHash >(arena);
}
template<> PROTOBUF_NOINLINE ::game::Player*
Arena::CreateMaybeMessage< ::game::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LobbyRequests*
Arena::CreateMaybeMessage< ::game::LobbyRequests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LobbyRequests >(arena);
}
template<> PROTOBUF_NOINLINE ::game::LobbyResponses*
Arena::CreateMaybeMessage< ::game::LobbyResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::LobbyResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CreateGameRequest*
Arena::CreateMaybeMessage< ::game::CreateGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CreateGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CreateGameResponse*
Arena::CreateMaybeMessage< ::game::CreateGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CreateGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SearchGameRequest*
Arena::CreateMaybeMessage< ::game::SearchGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SearchGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SearchGameResponse*
Arena::CreateMaybeMessage< ::game::SearchGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SearchGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GameRequests*
Arena::CreateMaybeMessage< ::game::GameRequests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::GameRequests >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GameResponses*
Arena::CreateMaybeMessage< ::game::GameResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::GameResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::game::make_move_request*
Arena::CreateMaybeMessage< ::game::make_move_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::make_move_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::make_move_response*
Arena::CreateMaybeMessage< ::game::make_move_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::make_move_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GameParameters*
Arena::CreateMaybeMessage< ::game::GameParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::GameParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::game::PlayerInfo*
Arena::CreateMaybeMessage< ::game::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::PlayerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
