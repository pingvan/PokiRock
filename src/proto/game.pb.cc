// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR login_request::login_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_events_request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct login_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_requestDefaultTypeInternal() {}
  union {
    login_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_requestDefaultTypeInternal _login_request_default_instance_;
PROTOBUF_CONSTEXPR login_response::login_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_events_response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct login_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_responseDefaultTypeInternal() {}
  union {
    login_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_responseDefaultTypeInternal _login_response_default_instance_;
PROTOBUF_CONSTEXPR register_request::register_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/nullptr
  , /*decltype(_impl_.salt_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct register_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR register_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~register_requestDefaultTypeInternal() {}
  union {
    register_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 register_requestDefaultTypeInternal _register_request_default_instance_;
PROTOBUF_CONSTEXPR register_response::register_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct register_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR register_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~register_responseDefaultTypeInternal() {}
  union {
    register_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 register_responseDefaultTypeInternal _register_response_default_instance_;
PROTOBUF_CONSTEXPR client_name::client_name(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct client_nameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR client_nameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~client_nameDefaultTypeInternal() {}
  union {
    client_name _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 client_nameDefaultTypeInternal _client_name_default_instance_;
PROTOBUF_CONSTEXPR salt_hash::salt_hash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct salt_hashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR salt_hashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~salt_hashDefaultTypeInternal() {}
  union {
    salt_hash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 salt_hashDefaultTypeInternal _salt_hash_default_instance_;
PROTOBUF_CONSTEXPR search_a_game_request::search_a_game_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_of_players_)*/0
  , /*decltype(_impl_.minimal_bet_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct search_a_game_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR search_a_game_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~search_a_game_requestDefaultTypeInternal() {}
  union {
    search_a_game_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 search_a_game_requestDefaultTypeInternal _search_a_game_request_default_instance_;
PROTOBUF_CONSTEXPR search_a_game_response::search_a_game_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct search_a_game_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR search_a_game_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~search_a_game_responseDefaultTypeInternal() {}
  union {
    search_a_game_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 search_a_game_responseDefaultTypeInternal _search_a_game_response_default_instance_;
PROTOBUF_CONSTEXPR make_move_request::make_move_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_name_)*/nullptr
  , /*decltype(_impl_.make_blind_)*/0
  , /*decltype(_impl_.fold_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct make_move_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR make_move_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~make_move_requestDefaultTypeInternal() {}
  union {
    make_move_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 make_move_requestDefaultTypeInternal _make_move_request_default_instance_;
PROTOBUF_CONSTEXPR make_move_response::make_move_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct make_move_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR make_move_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~make_move_responseDefaultTypeInternal() {}
  union {
    make_move_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 make_move_responseDefaultTypeInternal _make_move_response_default_instance_;
PROTOBUF_CONSTEXPR player::player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct playerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR playerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~playerDefaultTypeInternal() {}
  union {
    player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 playerDefaultTypeInternal _player_default_instance_;
PROTOBUF_CONSTEXPR status_message::status_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct status_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR status_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~status_messageDefaultTypeInternal() {}
  union {
    status_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 status_messageDefaultTypeInternal _status_message_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_game_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_game_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const uint32_t TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::login_request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::login_request, _impl_.login_events_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::login_response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::login_response, _impl_.login_events_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::register_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::register_request, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::register_request, _impl_.salt_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::register_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::register_response, _impl_.status_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::client_name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::client_name, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::salt_hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::salt_hash, _impl_.salt_),
  PROTOBUF_FIELD_OFFSET(::game::salt_hash, _impl_.hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_request, _impl_.number_of_players_),
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_request, _impl_.minimal_bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_response, _impl_.status_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.client_name_),
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.make_blind_),
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.fold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::make_move_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::make_move_response, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::player, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::player, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::game::player, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::status_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::status_message, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::game::status_message, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::login_request)},
  { 9, -1, -1, sizeof(::game::login_response)},
  { 18, -1, -1, sizeof(::game::register_request)},
  { 26, -1, -1, sizeof(::game::register_response)},
  { 33, -1, -1, sizeof(::game::client_name)},
  { 40, -1, -1, sizeof(::game::salt_hash)},
  { 48, -1, -1, sizeof(::game::search_a_game_request)},
  { 56, -1, -1, sizeof(::game::search_a_game_response)},
  { 63, -1, -1, sizeof(::game::make_move_request)},
  { 72, -1, -1, sizeof(::game::make_move_response)},
  { 79, -1, -1, sizeof(::game::player)},
  { 88, -1, -1, sizeof(::game::status_message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_login_request_default_instance_._instance,
  &::game::_login_response_default_instance_._instance,
  &::game::_register_request_default_instance_._instance,
  &::game::_register_response_default_instance_._instance,
  &::game::_client_name_default_instance_._instance,
  &::game::_salt_hash_default_instance_._instance,
  &::game::_search_a_game_request_default_instance_._instance,
  &::game::_search_a_game_response_default_instance_._instance,
  &::game::_make_move_request_default_instance_._instance,
  &::game::_make_move_response_default_instance_._instance,
  &::game::_player_default_instance_._instance,
  &::game::_status_message_default_instance_._instance,
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\022\004game\"c\n\rlogin_request\022!\n\004n"
  "ame\030\001 \001(\0132\021.game.client_nameH\000\022\027\n\rafter_"
  "compare\030\002 \001(\010H\000B\026\n\024login_events_request\""
  "\177\n\016login_response\022$\n\tsalt_hash\030\001 \001(\0132\017.g"
  "ame.salt_hashH\000\022.\n\016status_message\030\002 \001(\0132"
  "\024.game.status_messageH\000B\027\n\025login_events_"
  "response\"W\n\020register_request\022\037\n\004name\030\001 \001"
  "(\0132\021.game.client_name\022\"\n\tsalt_hash\030\002 \001(\013"
  "2\017.game.salt_hash\"A\n\021register_response\022,"
  "\n\016status_message\030\001 \001(\0132\024.game.status_mes"
  "sage\"\033\n\013client_name\022\014\n\004name\030\001 \001(\t\"\'\n\tsal"
  "t_hash\022\014\n\004salt\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t\"G\n\025se"
  "arch_a_game_request\022\031\n\021number_of_players"
  "\030\001 \001(\005\022\023\n\013minimal_bet\030\002 \001(\005\"F\n\026search_a_"
  "game_response\022,\n\016status_message\030\001 \001(\0132\024."
  "game.status_message\"]\n\021make_move_request"
  "\022&\n\013client_name\030\001 \001(\0132\021.game.client_name"
  "\022\022\n\nmake_blind\030\002 \001(\005\022\014\n\004fold\030\003 \001(\010\"3\n\022ma"
  "ke_move_response\022\035\n\007players\030\001 \003(\0132\014.game"
  ".player\"_\n\006player\022\037\n\004name\030\001 \001(\0132\021.game.c"
  "lient_name\022#\n\006status\030\002 \001(\0162\023.game.player"
  "_status\022\017\n\007balance\030\003 \001(\005\"1\n\016status_messa"
  "ge\022\016\n\006status\030\001 \001(\010\022\017\n\007message\030\002 \001(\t*/\n\rp"
  "layer_status\022\010\n\004fold\020\000\022\013\n\007playing\020\001\022\007\n\003w"
  "in\020\0022\277\001\n\005lobby\0222\n\005Login\022\023.game.login_req"
  "uest\032\024.game.login_response\022;\n\010Register\022\026"
  ".game.register_request\032\027.game.register_r"
  "esponse\022E\n\010FindGame\022\033.game.search_a_game"
  "_request\032\034.game.search_a_game_response2E"
  "\n\004game\022=\n\010MakeMove\022\027.game.make_move_requ"
  "est\032\030.game.make_move_responseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_game_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_game_2eproto = {
    false, false, 1237, descriptor_table_protodef_game_2eproto,
    "game.proto",
    &descriptor_table_game_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_game_2eproto::offsets,
    file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto,
    file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_game_2eproto_getter() {
  return &descriptor_table_game_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* player_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[0];
}
bool player_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class login_request::_Internal {
 public:
  static const ::game::client_name& name(const login_request* msg);
};

const ::game::client_name&
login_request::_Internal::name(const login_request* msg) {
  return *msg->_impl_.login_events_request_.name_;
}
void login_request::set_allocated_name(::game::client_name* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_events_request();
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    set_has_name();
    _impl_.login_events_request_.name_ = name;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_request.name)
}
login_request::login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_request)
}
login_request::login_request(const login_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_events_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_events_request();
  switch (from.login_events_request_case()) {
    case kName: {
      _this->_internal_mutable_name()->::game::client_name::MergeFrom(
          from._internal_name());
      break;
    }
    case kAfterCompare: {
      _this->_internal_set_after_compare(from._internal_after_compare());
      break;
    }
    case LOGIN_EVENTS_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.login_request)
}

inline void login_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_events_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_events_request();
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:game.login_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_events_request()) {
    clear_login_events_request();
  }
}

void login_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_request::clear_login_events_request() {
// @@protoc_insertion_point(one_of_clear_start:game.login_request)
  switch (login_events_request_case()) {
    case kName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_events_request_.name_;
      }
      break;
    }
    case kAfterCompare: {
      // No need to clear
      break;
    }
    case LOGIN_EVENTS_REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_EVENTS_REQUEST_NOT_SET;
}


void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_events_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.client_name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool after_compare = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_after_compare(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.client_name name = 1;
  if (_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // bool after_compare = 2;
  if (_internal_has_after_compare()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_after_compare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_request)
  return target;
}

size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_events_request_case()) {
    // .game.client_name name = 1;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_events_request_.name_);
      break;
    }
    // bool after_compare = 2;
    case kAfterCompare: {
      total_size += 1 + 1;
      break;
    }
    case LOGIN_EVENTS_REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_request::GetClassData() const { return &_class_data_; }


void login_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_request*>(&to_msg);
  auto& from = static_cast<const login_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_events_request_case()) {
    case kName: {
      _this->_internal_mutable_name()->::game::client_name::MergeFrom(
          from._internal_name());
      break;
    }
    case kAfterCompare: {
      _this->_internal_set_after_compare(from._internal_after_compare());
      break;
    }
    case LOGIN_EVENTS_REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  return true;
}

void login_request::InternalSwap(login_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_events_request_, other->_impl_.login_events_request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[0]);
}

// ===================================================================

class login_response::_Internal {
 public:
  static const ::game::salt_hash& salt_hash(const login_response* msg);
  static const ::game::status_message& status_message(const login_response* msg);
};

const ::game::salt_hash&
login_response::_Internal::salt_hash(const login_response* msg) {
  return *msg->_impl_.login_events_response_.salt_hash_;
}
const ::game::status_message&
login_response::_Internal::status_message(const login_response* msg) {
  return *msg->_impl_.login_events_response_.status_message_;
}
void login_response::set_allocated_salt_hash(::game::salt_hash* salt_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_events_response();
  if (salt_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(salt_hash);
    if (message_arena != submessage_arena) {
      salt_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, salt_hash, submessage_arena);
    }
    set_has_salt_hash();
    _impl_.login_events_response_.salt_hash_ = salt_hash;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_response.salt_hash)
}
void login_response::set_allocated_status_message(::game::status_message* status_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_events_response();
  if (status_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status_message);
    if (message_arena != submessage_arena) {
      status_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_message, submessage_arena);
    }
    set_has_status_message();
    _impl_.login_events_response_.status_message_ = status_message;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_response.status_message)
}
login_response::login_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_response)
}
login_response::login_response(const login_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_events_response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_events_response();
  switch (from.login_events_response_case()) {
    case kSaltHash: {
      _this->_internal_mutable_salt_hash()->::game::salt_hash::MergeFrom(
          from._internal_salt_hash());
      break;
    }
    case kStatusMessage: {
      _this->_internal_mutable_status_message()->::game::status_message::MergeFrom(
          from._internal_status_message());
      break;
    }
    case LOGIN_EVENTS_RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.login_response)
}

inline void login_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_events_response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_events_response();
}

login_response::~login_response() {
  // @@protoc_insertion_point(destructor:game.login_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_events_response()) {
    clear_login_events_response();
  }
}

void login_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_response::clear_login_events_response() {
// @@protoc_insertion_point(one_of_clear_start:game.login_response)
  switch (login_events_response_case()) {
    case kSaltHash: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_events_response_.salt_hash_;
      }
      break;
    }
    case kStatusMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_events_response_.status_message_;
      }
      break;
    }
    case LOGIN_EVENTS_RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_EVENTS_RESPONSE_NOT_SET;
}


void login_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_events_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.salt_hash salt_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_salt_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.status_message status_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.salt_hash salt_hash = 1;
  if (_internal_has_salt_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::salt_hash(this),
        _Internal::salt_hash(this).GetCachedSize(), target, stream);
  }

  // .game.status_message status_message = 2;
  if (_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_response)
  return target;
}

size_t login_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_events_response_case()) {
    // .game.salt_hash salt_hash = 1;
    case kSaltHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_events_response_.salt_hash_);
      break;
    }
    // .game.status_message status_message = 2;
    case kStatusMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_events_response_.status_message_);
      break;
    }
    case LOGIN_EVENTS_RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_response::GetClassData() const { return &_class_data_; }


void login_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_response*>(&to_msg);
  auto& from = static_cast<const login_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_events_response_case()) {
    case kSaltHash: {
      _this->_internal_mutable_salt_hash()->::game::salt_hash::MergeFrom(
          from._internal_salt_hash());
      break;
    }
    case kStatusMessage: {
      _this->_internal_mutable_status_message()->::game::status_message::MergeFrom(
          from._internal_status_message());
      break;
    }
    case LOGIN_EVENTS_RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_response::CopyFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response::IsInitialized() const {
  return true;
}

void login_response::InternalSwap(login_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_events_response_, other->_impl_.login_events_response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[1]);
}

// ===================================================================

class register_request::_Internal {
 public:
  static const ::game::client_name& name(const register_request* msg);
  static const ::game::salt_hash& salt_hash(const register_request* msg);
};

const ::game::client_name&
register_request::_Internal::name(const register_request* msg) {
  return *msg->_impl_.name_;
}
const ::game::salt_hash&
register_request::_Internal::salt_hash(const register_request* msg) {
  return *msg->_impl_.salt_hash_;
}
register_request::register_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.register_request)
}
register_request::register_request(const register_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  register_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){nullptr}
    , decltype(_impl_.salt_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name()) {
    _this->_impl_.name_ = new ::game::client_name(*from._impl_.name_);
  }
  if (from._internal_has_salt_hash()) {
    _this->_impl_.salt_hash_ = new ::game::salt_hash(*from._impl_.salt_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:game.register_request)
}

inline void register_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){nullptr}
    , decltype(_impl_.salt_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

register_request::~register_request() {
  // @@protoc_insertion_point(destructor:game.register_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void register_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.name_;
  if (this != internal_default_instance()) delete _impl_.salt_hash_;
}

void register_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void register_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.register_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.salt_hash_ != nullptr) {
    delete _impl_.salt_hash_;
  }
  _impl_.salt_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.client_name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.salt_hash salt_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_salt_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* register_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.register_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.client_name name = 1;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // .game.salt_hash salt_hash = 2;
  if (this->_internal_has_salt_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::salt_hash(this),
        _Internal::salt_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.register_request)
  return target;
}

size_t register_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.register_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.client_name name = 1;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_);
  }

  // .game.salt_hash salt_hash = 2;
  if (this->_internal_has_salt_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.salt_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData register_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    register_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*register_request::GetClassData() const { return &_class_data_; }


void register_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<register_request*>(&to_msg);
  auto& from = static_cast<const register_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.register_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_mutable_name()->::game::client_name::MergeFrom(
        from._internal_name());
  }
  if (from._internal_has_salt_hash()) {
    _this->_internal_mutable_salt_hash()->::game::salt_hash::MergeFrom(
        from._internal_salt_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void register_request::CopyFrom(const register_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.register_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_request::IsInitialized() const {
  return true;
}

void register_request::InternalSwap(register_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(register_request, _impl_.salt_hash_)
      + sizeof(register_request::_impl_.salt_hash_)
      - PROTOBUF_FIELD_OFFSET(register_request, _impl_.name_)>(
          reinterpret_cast<char*>(&_impl_.name_),
          reinterpret_cast<char*>(&other->_impl_.name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata register_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[2]);
}

// ===================================================================

class register_response::_Internal {
 public:
  static const ::game::status_message& status_message(const register_response* msg);
};

const ::game::status_message&
register_response::_Internal::status_message(const register_response* msg) {
  return *msg->_impl_.status_message_;
}
register_response::register_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.register_response)
}
register_response::register_response(const register_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  register_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_ = new ::game::status_message(*from._impl_.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:game.register_response)
}

inline void register_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

register_response::~register_response() {
  // @@protoc_insertion_point(destructor:game.register_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void register_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_message_;
}

void register_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void register_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.register_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.status_message status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* register_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.register_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.register_response)
  return target;
}

size_t register_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.register_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData register_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    register_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*register_response::GetClassData() const { return &_class_data_; }


void register_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<register_response*>(&to_msg);
  auto& from = static_cast<const register_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.register_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status_message()) {
    _this->_internal_mutable_status_message()->::game::status_message::MergeFrom(
        from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void register_response::CopyFrom(const register_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.register_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_response::IsInitialized() const {
  return true;
}

void register_response::InternalSwap(register_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_message_, other->_impl_.status_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata register_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[3]);
}

// ===================================================================

class client_name::_Internal {
 public:
};

client_name::client_name(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.client_name)
}
client_name::client_name(const client_name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  client_name* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.client_name)
}

inline void client_name::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_name::~client_name() {
  // @@protoc_insertion_point(destructor:game.client_name)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void client_name::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void client_name::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void client_name::Clear() {
// @@protoc_insertion_point(message_clear_start:game.client_name)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_name::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.client_name.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_name::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.client_name)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.client_name.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.client_name)
  return target;
}

size_t client_name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.client_name)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_name::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    client_name::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_name::GetClassData() const { return &_class_data_; }


void client_name::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<client_name*>(&to_msg);
  auto& from = static_cast<const client_name&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.client_name)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_name::CopyFrom(const client_name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.client_name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_name::IsInitialized() const {
  return true;
}

void client_name::InternalSwap(client_name* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata client_name::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[4]);
}

// ===================================================================

class salt_hash::_Internal {
 public:
};

salt_hash::salt_hash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.salt_hash)
}
salt_hash::salt_hash(const salt_hash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  salt_hash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.salt_hash)
}

inline void salt_hash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

salt_hash::~salt_hash() {
  // @@protoc_insertion_point(destructor:game.salt_hash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void salt_hash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.salt_.Destroy();
  _impl_.hash_.Destroy();
}

void salt_hash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void salt_hash::Clear() {
// @@protoc_insertion_point(message_clear_start:game.salt_hash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.salt_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* salt_hash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.salt_hash.salt"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.salt_hash.hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* salt_hash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.salt_hash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string salt = 1;
  if (!this->_internal_salt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.salt_hash.salt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_salt(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.salt_hash.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.salt_hash)
  return target;
}

size_t salt_hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.salt_hash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string salt = 1;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData salt_hash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    salt_hash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*salt_hash::GetClassData() const { return &_class_data_; }


void salt_hash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<salt_hash*>(&to_msg);
  auto& from = static_cast<const salt_hash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.salt_hash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void salt_hash::CopyFrom(const salt_hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.salt_hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool salt_hash::IsInitialized() const {
  return true;
}

void salt_hash::InternalSwap(salt_hash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata salt_hash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[5]);
}

// ===================================================================

class search_a_game_request::_Internal {
 public:
};

search_a_game_request::search_a_game_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.search_a_game_request)
}
search_a_game_request::search_a_game_request(const search_a_game_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  search_a_game_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_of_players_){}
    , decltype(_impl_.minimal_bet_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.number_of_players_, &from._impl_.number_of_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minimal_bet_) -
    reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.minimal_bet_));
  // @@protoc_insertion_point(copy_constructor:game.search_a_game_request)
}

inline void search_a_game_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_of_players_){0}
    , decltype(_impl_.minimal_bet_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

search_a_game_request::~search_a_game_request() {
  // @@protoc_insertion_point(destructor:game.search_a_game_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void search_a_game_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void search_a_game_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void search_a_game_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.search_a_game_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.number_of_players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.minimal_bet_) -
      reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.minimal_bet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* search_a_game_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 number_of_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_of_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minimal_bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minimal_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* search_a_game_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.search_a_game_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number_of_players = 1;
  if (this->_internal_number_of_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_number_of_players(), target);
  }

  // int32 minimal_bet = 2;
  if (this->_internal_minimal_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_minimal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.search_a_game_request)
  return target;
}

size_t search_a_game_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.search_a_game_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number_of_players = 1;
  if (this->_internal_number_of_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_players());
  }

  // int32 minimal_bet = 2;
  if (this->_internal_minimal_bet() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minimal_bet());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData search_a_game_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    search_a_game_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*search_a_game_request::GetClassData() const { return &_class_data_; }


void search_a_game_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<search_a_game_request*>(&to_msg);
  auto& from = static_cast<const search_a_game_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.search_a_game_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number_of_players() != 0) {
    _this->_internal_set_number_of_players(from._internal_number_of_players());
  }
  if (from._internal_minimal_bet() != 0) {
    _this->_internal_set_minimal_bet(from._internal_minimal_bet());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void search_a_game_request::CopyFrom(const search_a_game_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.search_a_game_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_a_game_request::IsInitialized() const {
  return true;
}

void search_a_game_request::InternalSwap(search_a_game_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(search_a_game_request, _impl_.minimal_bet_)
      + sizeof(search_a_game_request::_impl_.minimal_bet_)
      - PROTOBUF_FIELD_OFFSET(search_a_game_request, _impl_.number_of_players_)>(
          reinterpret_cast<char*>(&_impl_.number_of_players_),
          reinterpret_cast<char*>(&other->_impl_.number_of_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata search_a_game_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[6]);
}

// ===================================================================

class search_a_game_response::_Internal {
 public:
  static const ::game::status_message& status_message(const search_a_game_response* msg);
};

const ::game::status_message&
search_a_game_response::_Internal::status_message(const search_a_game_response* msg) {
  return *msg->_impl_.status_message_;
}
search_a_game_response::search_a_game_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.search_a_game_response)
}
search_a_game_response::search_a_game_response(const search_a_game_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  search_a_game_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_ = new ::game::status_message(*from._impl_.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:game.search_a_game_response)
}

inline void search_a_game_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

search_a_game_response::~search_a_game_response() {
  // @@protoc_insertion_point(destructor:game.search_a_game_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void search_a_game_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_message_;
}

void search_a_game_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void search_a_game_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.search_a_game_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* search_a_game_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.status_message status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* search_a_game_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.search_a_game_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.search_a_game_response)
  return target;
}

size_t search_a_game_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.search_a_game_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData search_a_game_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    search_a_game_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*search_a_game_response::GetClassData() const { return &_class_data_; }


void search_a_game_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<search_a_game_response*>(&to_msg);
  auto& from = static_cast<const search_a_game_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.search_a_game_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status_message()) {
    _this->_internal_mutable_status_message()->::game::status_message::MergeFrom(
        from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void search_a_game_response::CopyFrom(const search_a_game_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.search_a_game_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_a_game_response::IsInitialized() const {
  return true;
}

void search_a_game_response::InternalSwap(search_a_game_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_message_, other->_impl_.status_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata search_a_game_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[7]);
}

// ===================================================================

class make_move_request::_Internal {
 public:
  static const ::game::client_name& client_name(const make_move_request* msg);
};

const ::game::client_name&
make_move_request::_Internal::client_name(const make_move_request* msg) {
  return *msg->_impl_.client_name_;
}
make_move_request::make_move_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.make_move_request)
}
make_move_request::make_move_request(const make_move_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  make_move_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_name_){nullptr}
    , decltype(_impl_.make_blind_){}
    , decltype(_impl_.fold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client_name()) {
    _this->_impl_.client_name_ = new ::game::client_name(*from._impl_.client_name_);
  }
  ::memcpy(&_impl_.make_blind_, &from._impl_.make_blind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fold_) -
    reinterpret_cast<char*>(&_impl_.make_blind_)) + sizeof(_impl_.fold_));
  // @@protoc_insertion_point(copy_constructor:game.make_move_request)
}

inline void make_move_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_name_){nullptr}
    , decltype(_impl_.make_blind_){0}
    , decltype(_impl_.fold_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

make_move_request::~make_move_request() {
  // @@protoc_insertion_point(destructor:game.make_move_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void make_move_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.client_name_;
}

void make_move_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void make_move_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.make_move_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.client_name_ != nullptr) {
    delete _impl_.client_name_;
  }
  _impl_.client_name_ = nullptr;
  ::memset(&_impl_.make_blind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fold_) -
      reinterpret_cast<char*>(&_impl_.make_blind_)) + sizeof(_impl_.fold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* make_move_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.client_name client_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 make_blind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.make_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* make_move_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.make_move_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.client_name client_name = 1;
  if (this->_internal_has_client_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_name(this),
        _Internal::client_name(this).GetCachedSize(), target, stream);
  }

  // int32 make_blind = 2;
  if (this->_internal_make_blind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_make_blind(), target);
  }

  // bool fold = 3;
  if (this->_internal_fold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_fold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.make_move_request)
  return target;
}

size_t make_move_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.make_move_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.client_name client_name = 1;
  if (this->_internal_has_client_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_name_);
  }

  // int32 make_blind = 2;
  if (this->_internal_make_blind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_make_blind());
  }

  // bool fold = 3;
  if (this->_internal_fold() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData make_move_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    make_move_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*make_move_request::GetClassData() const { return &_class_data_; }


void make_move_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<make_move_request*>(&to_msg);
  auto& from = static_cast<const make_move_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.make_move_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_name()) {
    _this->_internal_mutable_client_name()->::game::client_name::MergeFrom(
        from._internal_client_name());
  }
  if (from._internal_make_blind() != 0) {
    _this->_internal_set_make_blind(from._internal_make_blind());
  }
  if (from._internal_fold() != 0) {
    _this->_internal_set_fold(from._internal_fold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void make_move_request::CopyFrom(const make_move_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.make_move_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool make_move_request::IsInitialized() const {
  return true;
}

void make_move_request::InternalSwap(make_move_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(make_move_request, _impl_.fold_)
      + sizeof(make_move_request::_impl_.fold_)
      - PROTOBUF_FIELD_OFFSET(make_move_request, _impl_.client_name_)>(
          reinterpret_cast<char*>(&_impl_.client_name_),
          reinterpret_cast<char*>(&other->_impl_.client_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata make_move_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[8]);
}

// ===================================================================

class make_move_response::_Internal {
 public:
};

make_move_response::make_move_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.make_move_response)
}
make_move_response::make_move_response(const make_move_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  make_move_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.make_move_response)
}

inline void make_move_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

make_move_response::~make_move_response() {
  // @@protoc_insertion_point(destructor:game.make_move_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void make_move_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void make_move_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void make_move_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.make_move_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* make_move_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* make_move_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.make_move_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.make_move_response)
  return target;
}

size_t make_move_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.make_move_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData make_move_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    make_move_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*make_move_response::GetClassData() const { return &_class_data_; }


void make_move_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<make_move_response*>(&to_msg);
  auto& from = static_cast<const make_move_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.make_move_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void make_move_response::CopyFrom(const make_move_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.make_move_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool make_move_response::IsInitialized() const {
  return true;
}

void make_move_response::InternalSwap(make_move_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata make_move_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[9]);
}

// ===================================================================

class player::_Internal {
 public:
  static const ::game::client_name& name(const player* msg);
};

const ::game::client_name&
player::_Internal::name(const player* msg) {
  return *msg->_impl_.name_;
}
player::player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.player)
}
player::player(const player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){nullptr}
    , decltype(_impl_.status_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name()) {
    _this->_impl_.name_ = new ::game::client_name(*from._impl_.name_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:game.player)
}

inline void player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){nullptr}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

player::~player() {
  // @@protoc_insertion_point(destructor:game.player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.name_;
}

void player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void player::Clear() {
// @@protoc_insertion_point(message_clear_start:game.player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.balance_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.client_name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.player_status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::game::player_status>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.client_name name = 1;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // .game.player_status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // int32 balance = 3;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.player)
  return target;
}

size_t player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.client_name name = 1;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_);
  }

  // .game.player_status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 balance = 3;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*player::GetClassData() const { return &_class_data_; }


void player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<player*>(&to_msg);
  auto& from = static_cast<const player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_mutable_name()->::game::client_name::MergeFrom(
        from._internal_name());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void player::CopyFrom(const player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player::IsInitialized() const {
  return true;
}

void player::InternalSwap(player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(player, _impl_.balance_)
      + sizeof(player::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(player, _impl_.name_)>(
          reinterpret_cast<char*>(&_impl_.name_),
          reinterpret_cast<char*>(&other->_impl_.name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[10]);
}

// ===================================================================

class status_message::_Internal {
 public:
};

status_message::status_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.status_message)
}
status_message::status_message(const status_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  status_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:game.status_message)
}

inline void status_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

status_message::~status_message() {
  // @@protoc_insertion_point(destructor:game.status_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void status_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void status_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void status_message::Clear() {
// @@protoc_insertion_point(message_clear_start:game.status_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* status_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.status_message.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* status_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.status_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.status_message.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.status_message)
  return target;
}

size_t status_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.status_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData status_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    status_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*status_message::GetClassData() const { return &_class_data_; }


void status_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<status_message*>(&to_msg);
  auto& from = static_cast<const status_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.status_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void status_message::CopyFrom(const status_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.status_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool status_message::IsInitialized() const {
  return true;
}

void status_message::InternalSwap(status_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata status_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::login_request*
Arena::CreateMaybeMessage< ::game::login_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_response*
Arena::CreateMaybeMessage< ::game::login_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::register_request*
Arena::CreateMaybeMessage< ::game::register_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::register_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::register_response*
Arena::CreateMaybeMessage< ::game::register_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::register_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::client_name*
Arena::CreateMaybeMessage< ::game::client_name >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::client_name >(arena);
}
template<> PROTOBUF_NOINLINE ::game::salt_hash*
Arena::CreateMaybeMessage< ::game::salt_hash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::salt_hash >(arena);
}
template<> PROTOBUF_NOINLINE ::game::search_a_game_request*
Arena::CreateMaybeMessage< ::game::search_a_game_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::search_a_game_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::search_a_game_response*
Arena::CreateMaybeMessage< ::game::search_a_game_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::search_a_game_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::make_move_request*
Arena::CreateMaybeMessage< ::game::make_move_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::make_move_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::make_move_response*
Arena::CreateMaybeMessage< ::game::make_move_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::make_move_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::player*
Arena::CreateMaybeMessage< ::game::player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::player >(arena);
}
template<> PROTOBUF_NOINLINE ::game::status_message*
Arena::CreateMaybeMessage< ::game::status_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::status_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
