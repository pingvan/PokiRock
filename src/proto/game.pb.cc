// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR Requests::Requests(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestsDefaultTypeInternal() {}
  union {
    Requests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestsDefaultTypeInternal _Requests_default_instance_;
PROTOBUF_CONSTEXPR Responses::Responses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponsesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponsesDefaultTypeInternal() {}
  union {
    Responses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponsesDefaultTypeInternal _Responses_default_instance_;
PROTOBUF_CONSTEXPR create_game_request::create_game_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.game_parameters_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct create_game_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR create_game_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~create_game_requestDefaultTypeInternal() {}
  union {
    create_game_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 create_game_requestDefaultTypeInternal _create_game_request_default_instance_;
PROTOBUF_CONSTEXPR create_game_response::create_game_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.status_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct create_game_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR create_game_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~create_game_responseDefaultTypeInternal() {}
  union {
    create_game_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 create_game_responseDefaultTypeInternal _create_game_response_default_instance_;
PROTOBUF_CONSTEXPR search_game_request::search_game_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.game_parameters_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct search_game_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR search_game_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~search_game_requestDefaultTypeInternal() {}
  union {
    search_game_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 search_game_requestDefaultTypeInternal _search_game_request_default_instance_;
PROTOBUF_CONSTEXPR search_game_response::search_game_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.status_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct search_game_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR search_game_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~search_game_responseDefaultTypeInternal() {}
  union {
    search_game_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 search_game_responseDefaultTypeInternal _search_game_response_default_instance_;
PROTOBUF_CONSTEXPR move_request::move_request(
    ::_pbi::ConstantInitialized) {}
struct move_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR move_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~move_requestDefaultTypeInternal() {}
  union {
    move_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 move_requestDefaultTypeInternal _move_request_default_instance_;
PROTOBUF_CONSTEXPR move_response::move_response(
    ::_pbi::ConstantInitialized) {}
struct move_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR move_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~move_responseDefaultTypeInternal() {}
  union {
    move_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 move_responseDefaultTypeInternal _move_response_default_instance_;
PROTOBUF_CONSTEXPR login_request::login_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_requests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct login_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_requestDefaultTypeInternal() {}
  union {
    login_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_requestDefaultTypeInternal _login_request_default_instance_;
PROTOBUF_CONSTEXPR login_response::login_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct login_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_responseDefaultTypeInternal() {}
  union {
    login_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_responseDefaultTypeInternal _login_response_default_instance_;
PROTOBUF_CONSTEXPR login_request_first::login_request_first(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct login_request_firstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_request_firstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_request_firstDefaultTypeInternal() {}
  union {
    login_request_first _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_request_firstDefaultTypeInternal _login_request_first_default_instance_;
PROTOBUF_CONSTEXPR login_request_second::login_request_second(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hashed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct login_request_secondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_request_secondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_request_secondDefaultTypeInternal() {}
  union {
    login_request_second _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_request_secondDefaultTypeInternal _login_request_second_default_instance_;
PROTOBUF_CONSTEXPR login_response_first::login_response_first(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_responses_first_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct login_response_firstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_response_firstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_response_firstDefaultTypeInternal() {}
  union {
    login_response_first _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_response_firstDefaultTypeInternal _login_response_first_default_instance_;
PROTOBUF_CONSTEXPR login_response_second::login_response_second(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_responses_second_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct login_response_secondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_response_secondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_response_secondDefaultTypeInternal() {}
  union {
    login_response_second _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_response_secondDefaultTypeInternal _login_response_second_default_instance_;
PROTOBUF_CONSTEXPR register_request::register_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct register_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR register_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~register_requestDefaultTypeInternal() {}
  union {
    register_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 register_requestDefaultTypeInternal _register_request_default_instance_;
PROTOBUF_CONSTEXPR register_response::register_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.register_responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct register_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR register_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~register_responseDefaultTypeInternal() {}
  union {
    register_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 register_responseDefaultTypeInternal _register_response_default_instance_;
PROTOBUF_CONSTEXPR salt_hash::salt_hash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct salt_hashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR salt_hashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~salt_hashDefaultTypeInternal() {}
  union {
    salt_hash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 salt_hashDefaultTypeInternal _salt_hash_default_instance_;
PROTOBUF_CONSTEXPR search_a_game_request::search_a_game_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_of_players_)*/0
  , /*decltype(_impl_.minimal_bet_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct search_a_game_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR search_a_game_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~search_a_game_requestDefaultTypeInternal() {}
  union {
    search_a_game_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 search_a_game_requestDefaultTypeInternal _search_a_game_request_default_instance_;
PROTOBUF_CONSTEXPR search_a_game_response::search_a_game_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct search_a_game_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR search_a_game_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~search_a_game_responseDefaultTypeInternal() {}
  union {
    search_a_game_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 search_a_game_responseDefaultTypeInternal _search_a_game_response_default_instance_;
PROTOBUF_CONSTEXPR make_move_request::make_move_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.make_blind_)*/0
  , /*decltype(_impl_.fold_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct make_move_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR make_move_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~make_move_requestDefaultTypeInternal() {}
  union {
    make_move_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 make_move_requestDefaultTypeInternal _make_move_request_default_instance_;
PROTOBUF_CONSTEXPR make_move_response::make_move_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct make_move_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR make_move_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~make_move_responseDefaultTypeInternal() {}
  union {
    make_move_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 make_move_responseDefaultTypeInternal _make_move_response_default_instance_;
PROTOBUF_CONSTEXPR player::player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct playerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR playerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~playerDefaultTypeInternal() {}
  union {
    player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 playerDefaultTypeInternal _player_default_instance_;
PROTOBUF_CONSTEXPR status_message::status_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct status_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR status_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~status_messageDefaultTypeInternal() {}
  union {
    status_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 status_messageDefaultTypeInternal _status_message_default_instance_;
PROTOBUF_CONSTEXPR error_message::error_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0} {}
struct error_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR error_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~error_messageDefaultTypeInternal() {}
  union {
    error_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 error_messageDefaultTypeInternal _error_message_default_instance_;
PROTOBUF_CONSTEXPR game_parameters::game_parameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.number_of_players_)*/0
  , /*decltype(_impl_.minimal_bet_)*/0
  , /*decltype(_impl_.game_enter_balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct game_parametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR game_parametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~game_parametersDefaultTypeInternal() {}
  union {
    game_parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 game_parametersDefaultTypeInternal _game_parameters_default_instance_;
PROTOBUF_CONSTEXPR game_::game_(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct game_DefaultTypeInternal {
  PROTOBUF_CONSTEXPR game_DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~game_DefaultTypeInternal() {}
  union {
    game_ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 game_DefaultTypeInternal _game__default_instance_;
PROTOBUF_CONSTEXPR player_info::player_info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/0
  , /*decltype(_impl_.client_games_)*/0
  , /*decltype(_impl_.client_wins_)*/0
  , /*decltype(_impl_.client_balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct player_infoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR player_infoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~player_infoDefaultTypeInternal() {}
  union {
    player_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 player_infoDefaultTypeInternal _player_info_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_game_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_game_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const uint32_t TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::Requests, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::Requests, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::Requests, _impl_.requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::Responses, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::Responses, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::Responses, _impl_.responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::create_game_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::create_game_request, _impl_.game_owner_),
  PROTOBUF_FIELD_OFFSET(::game::create_game_request, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::game::create_game_request, _impl_.game_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::create_game_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::create_game_response, _impl_.status_message_),
  PROTOBUF_FIELD_OFFSET(::game::create_game_response, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::search_game_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::search_game_request, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::search_game_request, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::game::search_game_request, _impl_.game_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::search_game_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::search_game_response, _impl_.status_message_),
  PROTOBUF_FIELD_OFFSET(::game::search_game_response, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::move_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::move_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::login_request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::login_request, _impl_.login_requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::login_response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::login_response, _impl_.login_responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_request_first, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::login_request_first, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_request_second, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::login_request_second, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::login_request_second, _impl_.hashed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_response_first, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::login_response_first, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::login_response_first, _impl_.login_responses_first_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::login_response_second, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::login_response_second, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::login_response_second, _impl_.login_responses_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::register_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::register_request, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::register_request, _impl_.salt_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::register_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::register_response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::register_response, _impl_.register_responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::salt_hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::salt_hash, _impl_.salt_),
  PROTOBUF_FIELD_OFFSET(::game::salt_hash, _impl_.hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_request, _impl_.number_of_players_),
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_request, _impl_.minimal_bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::search_a_game_response, _impl_.status_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.client_name_),
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.make_blind_),
  PROTOBUF_FIELD_OFFSET(::game::make_move_request, _impl_.fold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::make_move_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::make_move_response, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::player, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::player, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::game::player, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::status_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::status_message, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::game::status_message, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::game::error_message, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::game::error_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::error_message, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::game::error_message, _impl_.error_message_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::game_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::game_parameters, _impl_.game_name_),
  PROTOBUF_FIELD_OFFSET(::game::game_parameters, _impl_.number_of_players_),
  PROTOBUF_FIELD_OFFSET(::game::game_parameters, _impl_.minimal_bet_),
  PROTOBUF_FIELD_OFFSET(::game::game_parameters, _impl_.game_enter_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::game_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::game_, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::player_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::player_info, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::game::player_info, _impl_.client_games_),
  PROTOBUF_FIELD_OFFSET(::game::player_info, _impl_.client_wins_),
  PROTOBUF_FIELD_OFFSET(::game::player_info, _impl_.client_balance_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::Requests)},
  { 11, -1, -1, sizeof(::game::Responses)},
  { 22, -1, -1, sizeof(::game::create_game_request)},
  { 31, -1, -1, sizeof(::game::create_game_response)},
  { 39, -1, -1, sizeof(::game::search_game_request)},
  { 48, -1, -1, sizeof(::game::search_game_response)},
  { 56, -1, -1, sizeof(::game::move_request)},
  { 62, -1, -1, sizeof(::game::move_response)},
  { 68, -1, -1, sizeof(::game::login_request)},
  { 77, -1, -1, sizeof(::game::login_response)},
  { 86, -1, -1, sizeof(::game::login_request_first)},
  { 93, -1, -1, sizeof(::game::login_request_second)},
  { 101, -1, -1, sizeof(::game::login_response_first)},
  { 110, -1, -1, sizeof(::game::login_response_second)},
  { 119, -1, -1, sizeof(::game::register_request)},
  { 127, -1, -1, sizeof(::game::register_response)},
  { 136, -1, -1, sizeof(::game::salt_hash)},
  { 144, -1, -1, sizeof(::game::search_a_game_request)},
  { 152, -1, -1, sizeof(::game::search_a_game_response)},
  { 159, -1, -1, sizeof(::game::make_move_request)},
  { 168, -1, -1, sizeof(::game::make_move_response)},
  { 175, -1, -1, sizeof(::game::player)},
  { 184, -1, -1, sizeof(::game::status_message)},
  { 192, 200, -1, sizeof(::game::error_message)},
  { 202, -1, -1, sizeof(::game::game_parameters)},
  { 212, -1, -1, sizeof(::game::game_)},
  { 219, -1, -1, sizeof(::game::player_info)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_Requests_default_instance_._instance,
  &::game::_Responses_default_instance_._instance,
  &::game::_create_game_request_default_instance_._instance,
  &::game::_create_game_response_default_instance_._instance,
  &::game::_search_game_request_default_instance_._instance,
  &::game::_search_game_response_default_instance_._instance,
  &::game::_move_request_default_instance_._instance,
  &::game::_move_response_default_instance_._instance,
  &::game::_login_request_default_instance_._instance,
  &::game::_login_response_default_instance_._instance,
  &::game::_login_request_first_default_instance_._instance,
  &::game::_login_request_second_default_instance_._instance,
  &::game::_login_response_first_default_instance_._instance,
  &::game::_login_response_second_default_instance_._instance,
  &::game::_register_request_default_instance_._instance,
  &::game::_register_response_default_instance_._instance,
  &::game::_salt_hash_default_instance_._instance,
  &::game::_search_a_game_request_default_instance_._instance,
  &::game::_search_a_game_response_default_instance_._instance,
  &::game::_make_move_request_default_instance_._instance,
  &::game::_make_move_response_default_instance_._instance,
  &::game::_player_default_instance_._instance,
  &::game::_status_message_default_instance_._instance,
  &::game::_error_message_default_instance_._instance,
  &::game::_game_parameters_default_instance_._instance,
  &::game::_game__default_instance_._instance,
  &::game::_player_info_default_instance_._instance,
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\022\004game\"\354\001\n\010Requests\022,\n\rlogin"
  "_request\030\001 \001(\0132\023.game.login_requestH\000\0222\n"
  "\020register_request\030\002 \001(\0132\026.game.register_"
  "requestH\000\0228\n\023create_game_request\030\003 \001(\0132\031"
  ".game.create_game_requestH\000\0228\n\023search_ga"
  "me_request\030\004 \001(\0132\031.game.search_game_requ"
  "estH\000B\n\n\010requests\"\366\001\n\tResponses\022.\n\016login"
  "_response\030\001 \001(\0132\024.game.login_responseH\000\022"
  "4\n\021register_response\030\002 \001(\0132\027.game.regist"
  "er_responseH\000\022:\n\024create_game_response\030\003 "
  "\001(\0132\032.game.create_game_responseH\000\022:\n\024sea"
  "rch_game_response\030\004 \001(\0132\032.game.search_ga"
  "me_responseH\000B\013\n\tresponses\"\201\001\n\023create_ga"
  "me_request\022\022\n\ngame_owner\030\001 \001(\t\022&\n\013player"
  "_info\030\002 \001(\0132\021.game.player_info\022.\n\017game_p"
  "arameters\030\003 \001(\0132\025.game.game_parameters\"c"
  "\n\024create_game_response\022,\n\016status_message"
  "\030\001 \001(\0132\024.game.status_message\022\035\n\007players\030"
  "\002 \003(\0132\014.game.player\"{\n\023search_game_reque"
  "st\022\014\n\004name\030\001 \001(\t\022&\n\013player_info\030\002 \001(\0132\021."
  "game.player_info\022.\n\017game_parameters\030\003 \001("
  "\0132\025.game.game_parameters\"c\n\024search_game_"
  "response\022,\n\016status_message\030\001 \001(\0132\024.game."
  "status_message\022\035\n\007players\030\002 \003(\0132\014.game.p"
  "layer\"\016\n\014move_request\"\017\n\rmove_response\"\227"
  "\001\n\rlogin_request\0228\n\023login_request_first\030"
  "\001 \001(\0132\031.game.login_request_firstH\000\022:\n\024lo"
  "gin_request_second\030\002 \001(\0132\032.game.login_re"
  "quest_secondH\000B\020\n\016login_requests\"\235\001\n\016log"
  "in_response\022:\n\024login_response_first\030\001 \001("
  "\0132\032.game.login_response_firstH\000\022<\n\025login"
  "_response_second\030\002 \001(\0132\033.game.login_resp"
  "onse_secondH\000B\021\n\017login_responses\"#\n\023logi"
  "n_request_first\022\014\n\004name\030\001 \001(\t\"4\n\024login_r"
  "equest_second\022\014\n\004name\030\001 \001(\t\022\016\n\006hashed\030\002 "
  "\001(\t\"m\n\024login_response_first\022\016\n\004salt\030\001 \001("
  "\tH\000\022,\n\rerror_message\030\002 \001(\0132\023.game.error_"
  "messageH\000B\027\n\025login_responses_first\"\211\001\n\025l"
  "ogin_response_second\022(\n\013player_info\030\001 \001("
  "\0132\021.game.player_infoH\000\022,\n\rerror_message\030"
  "\002 \001(\0132\023.game.error_messageH\000B\030\n\026login_re"
  "sponses_second\"D\n\020register_request\022\014\n\004na"
  "me\030\001 \001(\t\022\"\n\tsalt_hash\030\002 \001(\0132\017.game.salt_"
  "hash\"\201\001\n\021register_response\022(\n\013player_inf"
  "o\030\001 \001(\0132\021.game.player_infoH\000\022,\n\rerror_me"
  "ssage\030\002 \001(\0132\023.game.error_messageH\000B\024\n\022re"
  "gister_responses\"\'\n\tsalt_hash\022\014\n\004salt\030\001 "
  "\001(\t\022\014\n\004hash\030\002 \001(\t\"G\n\025search_a_game_reque"
  "st\022\031\n\021number_of_players\030\001 \001(\005\022\023\n\013minimal"
  "_bet\030\002 \001(\005\"F\n\026search_a_game_response\022,\n\016"
  "status_message\030\001 \001(\0132\024.game.status_messa"
  "ge\"J\n\021make_move_request\022\023\n\013client_name\030\001"
  " \001(\t\022\022\n\nmake_blind\030\002 \001(\005\022\014\n\004fold\030\003 \001(\010\"3"
  "\n\022make_move_response\022\035\n\007players\030\001 \003(\0132\014."
  "game.player\"L\n\006player\022\014\n\004name\030\001 \001(\t\022#\n\006s"
  "tatus\030\002 \001(\0162\023.game.player_status\022\017\n\007bala"
  "nce\030\003 \001(\005\"1\n\016status_message\022\016\n\006status\030\001 "
  "\001(\010\022\017\n\007message\030\002 \001(\t\"Z\n\rerror_message\022\033\n"
  "\005error\030\001 \001(\0162\014.game.errors\022\032\n\rerror_mess"
  "age\030\002 \001(\tH\000\210\001\001B\020\n\016_error_message\"p\n\017game"
  "_parameters\022\021\n\tgame_name\030\001 \001(\t\022\031\n\021number"
  "_of_players\030\002 \001(\005\022\023\n\013minimal_bet\030\003 \001(\005\022\032"
  "\n\022game_enter_balance\030\004 \001(\005\"&\n\005game_\022\035\n\007p"
  "layers\030\001 \003(\0132\014.game.player\"c\n\013player_inf"
  "o\022\021\n\tclient_id\030\001 \001(\005\022\024\n\014client_games\030\002 \001"
  "(\005\022\023\n\013client_wins\030\003 \001(\005\022\026\n\016client_balanc"
  "e\030\004 \001(\005*/\n\rplayer_status\022\010\n\004fold\020\000\022\013\n\007pl"
  "aying\020\001\022\007\n\003win\020\002*u\n\006errors\022\033\n\027no_user_wi"
  "th_this_login\020\000\022\'\n#user_with_this_login_"
  "already_exists\020\001\022\026\n\022uncorrect_password\020\002"
  "\022\r\n\texception\020\0032=\n\tPokerGame\0220\n\tPokerFun"
  "c\022\016.game.Requests\032\017.game.Responses(\0010\001b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_game_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_game_2eproto = {
    false, false, 2886, descriptor_table_protodef_game_2eproto,
    "game.proto",
    &descriptor_table_game_2eproto_once, nullptr, 0, 27,
    schemas, file_default_instances, TableStruct_game_2eproto::offsets,
    file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto,
    file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_game_2eproto_getter() {
  return &descriptor_table_game_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* player_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[0];
}
bool player_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* errors_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[1];
}
bool errors_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Requests::_Internal {
 public:
  static const ::game::login_request& login_request(const Requests* msg);
  static const ::game::register_request& register_request(const Requests* msg);
  static const ::game::create_game_request& create_game_request(const Requests* msg);
  static const ::game::search_game_request& search_game_request(const Requests* msg);
};

const ::game::login_request&
Requests::_Internal::login_request(const Requests* msg) {
  return *msg->_impl_.requests_.login_request_;
}
const ::game::register_request&
Requests::_Internal::register_request(const Requests* msg) {
  return *msg->_impl_.requests_.register_request_;
}
const ::game::create_game_request&
Requests::_Internal::create_game_request(const Requests* msg) {
  return *msg->_impl_.requests_.create_game_request_;
}
const ::game::search_game_request&
Requests::_Internal::search_game_request(const Requests* msg) {
  return *msg->_impl_.requests_.search_game_request_;
}
void Requests::set_allocated_login_request(::game::login_request* login_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requests();
  if (login_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request);
    if (message_arena != submessage_arena) {
      login_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request, submessage_arena);
    }
    set_has_login_request();
    _impl_.requests_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Requests.login_request)
}
void Requests::set_allocated_register_request(::game::register_request* register_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requests();
  if (register_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(register_request);
    if (message_arena != submessage_arena) {
      register_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_request, submessage_arena);
    }
    set_has_register_request();
    _impl_.requests_.register_request_ = register_request;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Requests.register_request)
}
void Requests::set_allocated_create_game_request(::game::create_game_request* create_game_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requests();
  if (create_game_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_game_request);
    if (message_arena != submessage_arena) {
      create_game_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_game_request, submessage_arena);
    }
    set_has_create_game_request();
    _impl_.requests_.create_game_request_ = create_game_request;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Requests.create_game_request)
}
void Requests::set_allocated_search_game_request(::game::search_game_request* search_game_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_requests();
  if (search_game_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_game_request);
    if (message_arena != submessage_arena) {
      search_game_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_game_request, submessage_arena);
    }
    set_has_search_game_request();
    _impl_.requests_.search_game_request_ = search_game_request;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Requests.search_game_request)
}
Requests::Requests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.Requests)
}
Requests::Requests(const Requests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Requests* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_requests();
  switch (from.requests_case()) {
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::game::login_request::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kRegisterRequest: {
      _this->_internal_mutable_register_request()->::game::register_request::MergeFrom(
          from._internal_register_request());
      break;
    }
    case kCreateGameRequest: {
      _this->_internal_mutable_create_game_request()->::game::create_game_request::MergeFrom(
          from._internal_create_game_request());
      break;
    }
    case kSearchGameRequest: {
      _this->_internal_mutable_search_game_request()->::game::search_game_request::MergeFrom(
          from._internal_search_game_request());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.Requests)
}

inline void Requests::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_requests();
}

Requests::~Requests() {
  // @@protoc_insertion_point(destructor:game.Requests)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Requests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_requests()) {
    clear_requests();
  }
}

void Requests::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Requests::clear_requests() {
// @@protoc_insertion_point(one_of_clear_start:game.Requests)
  switch (requests_case()) {
    case kLoginRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requests_.login_request_;
      }
      break;
    }
    case kRegisterRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requests_.register_request_;
      }
      break;
    }
    case kCreateGameRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requests_.create_game_request_;
      }
      break;
    }
    case kSearchGameRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.requests_.search_game_request_;
      }
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUESTS_NOT_SET;
}


void Requests::Clear() {
// @@protoc_insertion_point(message_clear_start:game.Requests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_requests();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Requests::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.login_request login_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.register_request register_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.create_game_request create_game_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_game_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.search_game_request search_game_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_game_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Requests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Requests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.login_request login_request = 1;
  if (_internal_has_login_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::login_request(this),
        _Internal::login_request(this).GetCachedSize(), target, stream);
  }

  // .game.register_request register_request = 2;
  if (_internal_has_register_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::register_request(this),
        _Internal::register_request(this).GetCachedSize(), target, stream);
  }

  // .game.create_game_request create_game_request = 3;
  if (_internal_has_create_game_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::create_game_request(this),
        _Internal::create_game_request(this).GetCachedSize(), target, stream);
  }

  // .game.search_game_request search_game_request = 4;
  if (_internal_has_search_game_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::search_game_request(this),
        _Internal::search_game_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.Requests)
  return target;
}

size_t Requests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.Requests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (requests_case()) {
    // .game.login_request login_request = 1;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_.login_request_);
      break;
    }
    // .game.register_request register_request = 2;
    case kRegisterRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_.register_request_);
      break;
    }
    // .game.create_game_request create_game_request = 3;
    case kCreateGameRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_.create_game_request_);
      break;
    }
    // .game.search_game_request search_game_request = 4;
    case kSearchGameRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requests_.search_game_request_);
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Requests::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Requests::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Requests::GetClassData() const { return &_class_data_; }


void Requests::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Requests*>(&to_msg);
  auto& from = static_cast<const Requests&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.Requests)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.requests_case()) {
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::game::login_request::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kRegisterRequest: {
      _this->_internal_mutable_register_request()->::game::register_request::MergeFrom(
          from._internal_register_request());
      break;
    }
    case kCreateGameRequest: {
      _this->_internal_mutable_create_game_request()->::game::create_game_request::MergeFrom(
          from._internal_create_game_request());
      break;
    }
    case kSearchGameRequest: {
      _this->_internal_mutable_search_game_request()->::game::search_game_request::MergeFrom(
          from._internal_search_game_request());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Requests::CopyFrom(const Requests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.Requests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Requests::IsInitialized() const {
  return true;
}

void Requests::InternalSwap(Requests* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.requests_, other->_impl_.requests_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Requests::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[0]);
}

// ===================================================================

class Responses::_Internal {
 public:
  static const ::game::login_response& login_response(const Responses* msg);
  static const ::game::register_response& register_response(const Responses* msg);
  static const ::game::create_game_response& create_game_response(const Responses* msg);
  static const ::game::search_game_response& search_game_response(const Responses* msg);
};

const ::game::login_response&
Responses::_Internal::login_response(const Responses* msg) {
  return *msg->_impl_.responses_.login_response_;
}
const ::game::register_response&
Responses::_Internal::register_response(const Responses* msg) {
  return *msg->_impl_.responses_.register_response_;
}
const ::game::create_game_response&
Responses::_Internal::create_game_response(const Responses* msg) {
  return *msg->_impl_.responses_.create_game_response_;
}
const ::game::search_game_response&
Responses::_Internal::search_game_response(const Responses* msg) {
  return *msg->_impl_.responses_.search_game_response_;
}
void Responses::set_allocated_login_response(::game::login_response* login_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_responses();
  if (login_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_response);
    if (message_arena != submessage_arena) {
      login_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_response, submessage_arena);
    }
    set_has_login_response();
    _impl_.responses_.login_response_ = login_response;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Responses.login_response)
}
void Responses::set_allocated_register_response(::game::register_response* register_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_responses();
  if (register_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(register_response);
    if (message_arena != submessage_arena) {
      register_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_response, submessage_arena);
    }
    set_has_register_response();
    _impl_.responses_.register_response_ = register_response;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Responses.register_response)
}
void Responses::set_allocated_create_game_response(::game::create_game_response* create_game_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_responses();
  if (create_game_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_game_response);
    if (message_arena != submessage_arena) {
      create_game_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_game_response, submessage_arena);
    }
    set_has_create_game_response();
    _impl_.responses_.create_game_response_ = create_game_response;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Responses.create_game_response)
}
void Responses::set_allocated_search_game_response(::game::search_game_response* search_game_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_responses();
  if (search_game_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_game_response);
    if (message_arena != submessage_arena) {
      search_game_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_game_response, submessage_arena);
    }
    set_has_search_game_response();
    _impl_.responses_.search_game_response_ = search_game_response;
  }
  // @@protoc_insertion_point(field_set_allocated:game.Responses.search_game_response)
}
Responses::Responses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.Responses)
}
Responses::Responses(const Responses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Responses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_responses();
  switch (from.responses_case()) {
    case kLoginResponse: {
      _this->_internal_mutable_login_response()->::game::login_response::MergeFrom(
          from._internal_login_response());
      break;
    }
    case kRegisterResponse: {
      _this->_internal_mutable_register_response()->::game::register_response::MergeFrom(
          from._internal_register_response());
      break;
    }
    case kCreateGameResponse: {
      _this->_internal_mutable_create_game_response()->::game::create_game_response::MergeFrom(
          from._internal_create_game_response());
      break;
    }
    case kSearchGameResponse: {
      _this->_internal_mutable_search_game_response()->::game::search_game_response::MergeFrom(
          from._internal_search_game_response());
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.Responses)
}

inline void Responses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_responses();
}

Responses::~Responses() {
  // @@protoc_insertion_point(destructor:game.Responses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Responses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_responses()) {
    clear_responses();
  }
}

void Responses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Responses::clear_responses() {
// @@protoc_insertion_point(one_of_clear_start:game.Responses)
  switch (responses_case()) {
    case kLoginResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.responses_.login_response_;
      }
      break;
    }
    case kRegisterResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.responses_.register_response_;
      }
      break;
    }
    case kCreateGameResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.responses_.create_game_response_;
      }
      break;
    }
    case kSearchGameResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.responses_.search_game_response_;
      }
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSES_NOT_SET;
}


void Responses::Clear() {
// @@protoc_insertion_point(message_clear_start:game.Responses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_responses();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Responses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.login_response login_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.register_response register_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.create_game_response create_game_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_game_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.search_game_response search_game_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_game_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Responses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Responses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.login_response login_response = 1;
  if (_internal_has_login_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::login_response(this),
        _Internal::login_response(this).GetCachedSize(), target, stream);
  }

  // .game.register_response register_response = 2;
  if (_internal_has_register_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::register_response(this),
        _Internal::register_response(this).GetCachedSize(), target, stream);
  }

  // .game.create_game_response create_game_response = 3;
  if (_internal_has_create_game_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::create_game_response(this),
        _Internal::create_game_response(this).GetCachedSize(), target, stream);
  }

  // .game.search_game_response search_game_response = 4;
  if (_internal_has_search_game_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::search_game_response(this),
        _Internal::search_game_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.Responses)
  return target;
}

size_t Responses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.Responses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (responses_case()) {
    // .game.login_response login_response = 1;
    case kLoginResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responses_.login_response_);
      break;
    }
    // .game.register_response register_response = 2;
    case kRegisterResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responses_.register_response_);
      break;
    }
    // .game.create_game_response create_game_response = 3;
    case kCreateGameResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responses_.create_game_response_);
      break;
    }
    // .game.search_game_response search_game_response = 4;
    case kSearchGameResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.responses_.search_game_response_);
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Responses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Responses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Responses::GetClassData() const { return &_class_data_; }


void Responses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Responses*>(&to_msg);
  auto& from = static_cast<const Responses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.Responses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.responses_case()) {
    case kLoginResponse: {
      _this->_internal_mutable_login_response()->::game::login_response::MergeFrom(
          from._internal_login_response());
      break;
    }
    case kRegisterResponse: {
      _this->_internal_mutable_register_response()->::game::register_response::MergeFrom(
          from._internal_register_response());
      break;
    }
    case kCreateGameResponse: {
      _this->_internal_mutable_create_game_response()->::game::create_game_response::MergeFrom(
          from._internal_create_game_response());
      break;
    }
    case kSearchGameResponse: {
      _this->_internal_mutable_search_game_response()->::game::search_game_response::MergeFrom(
          from._internal_search_game_response());
      break;
    }
    case RESPONSES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Responses::CopyFrom(const Responses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.Responses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Responses::IsInitialized() const {
  return true;
}

void Responses::InternalSwap(Responses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.responses_, other->_impl_.responses_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Responses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[1]);
}

// ===================================================================

class create_game_request::_Internal {
 public:
  static const ::game::player_info& player_info(const create_game_request* msg);
  static const ::game::game_parameters& game_parameters(const create_game_request* msg);
};

const ::game::player_info&
create_game_request::_Internal::player_info(const create_game_request* msg) {
  return *msg->_impl_.player_info_;
}
const ::game::game_parameters&
create_game_request::_Internal::game_parameters(const create_game_request* msg) {
  return *msg->_impl_.game_parameters_;
}
create_game_request::create_game_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.create_game_request)
}
create_game_request::create_game_request(const create_game_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  create_game_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_owner_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_owner().empty()) {
    _this->_impl_.game_owner_.Set(from._internal_game_owner(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::game::player_info(*from._impl_.player_info_);
  }
  if (from._internal_has_game_parameters()) {
    _this->_impl_.game_parameters_ = new ::game::game_parameters(*from._impl_.game_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:game.create_game_request)
}

inline void create_game_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_owner_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.game_owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

create_game_request::~create_game_request() {
  // @@protoc_insertion_point(destructor:game.create_game_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void create_game_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_owner_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_;
  if (this != internal_default_instance()) delete _impl_.game_parameters_;
}

void create_game_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void create_game_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.create_game_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.game_parameters_ != nullptr) {
    delete _impl_.game_parameters_;
  }
  _impl_.game_parameters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_game_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string game_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_game_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.create_game_request.game_owner"));
        } else
          goto handle_unusual;
        continue;
      // .game.player_info player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.game_parameters game_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* create_game_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.create_game_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_owner = 1;
  if (!this->_internal_game_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_owner().data(), static_cast<int>(this->_internal_game_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.create_game_request.game_owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_owner(), target);
  }

  // .game.player_info player_info = 2;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.game_parameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::game_parameters(this),
        _Internal::game_parameters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.create_game_request)
  return target;
}

size_t create_game_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.create_game_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_owner = 1;
  if (!this->_internal_game_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_owner());
  }

  // .game.player_info player_info = 2;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  // .game.game_parameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_parameters_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData create_game_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    create_game_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*create_game_request::GetClassData() const { return &_class_data_; }


void create_game_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<create_game_request*>(&to_msg);
  auto& from = static_cast<const create_game_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.create_game_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_game_owner().empty()) {
    _this->_internal_set_game_owner(from._internal_game_owner());
  }
  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::game::player_info::MergeFrom(
        from._internal_player_info());
  }
  if (from._internal_has_game_parameters()) {
    _this->_internal_mutable_game_parameters()->::game::game_parameters::MergeFrom(
        from._internal_game_parameters());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void create_game_request::CopyFrom(const create_game_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.create_game_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_game_request::IsInitialized() const {
  return true;
}

void create_game_request::InternalSwap(create_game_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_owner_, lhs_arena,
      &other->_impl_.game_owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(create_game_request, _impl_.game_parameters_)
      + sizeof(create_game_request::_impl_.game_parameters_)
      - PROTOBUF_FIELD_OFFSET(create_game_request, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata create_game_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[2]);
}

// ===================================================================

class create_game_response::_Internal {
 public:
  static const ::game::status_message& status_message(const create_game_response* msg);
};

const ::game::status_message&
create_game_response::_Internal::status_message(const create_game_response* msg) {
  return *msg->_impl_.status_message_;
}
create_game_response::create_game_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.create_game_response)
}
create_game_response::create_game_response(const create_game_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  create_game_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_ = new ::game::status_message(*from._impl_.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:game.create_game_response)
}

inline void create_game_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

create_game_response::~create_game_response() {
  // @@protoc_insertion_point(destructor:game.create_game_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void create_game_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_message_;
}

void create_game_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void create_game_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.create_game_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_game_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.status_message status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* create_game_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.create_game_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  // repeated .game.player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.create_game_response)
  return target;
}

size_t create_game_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.create_game_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData create_game_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    create_game_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*create_game_response::GetClassData() const { return &_class_data_; }


void create_game_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<create_game_response*>(&to_msg);
  auto& from = static_cast<const create_game_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.create_game_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_status_message()) {
    _this->_internal_mutable_status_message()->::game::status_message::MergeFrom(
        from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void create_game_response::CopyFrom(const create_game_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.create_game_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_game_response::IsInitialized() const {
  return true;
}

void create_game_response::InternalSwap(create_game_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.status_message_, other->_impl_.status_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_game_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[3]);
}

// ===================================================================

class search_game_request::_Internal {
 public:
  static const ::game::player_info& player_info(const search_game_request* msg);
  static const ::game::game_parameters& game_parameters(const search_game_request* msg);
};

const ::game::player_info&
search_game_request::_Internal::player_info(const search_game_request* msg) {
  return *msg->_impl_.player_info_;
}
const ::game::game_parameters&
search_game_request::_Internal::game_parameters(const search_game_request* msg) {
  return *msg->_impl_.game_parameters_;
}
search_game_request::search_game_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.search_game_request)
}
search_game_request::search_game_request(const search_game_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  search_game_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::game::player_info(*from._impl_.player_info_);
  }
  if (from._internal_has_game_parameters()) {
    _this->_impl_.game_parameters_ = new ::game::game_parameters(*from._impl_.game_parameters_);
  }
  // @@protoc_insertion_point(copy_constructor:game.search_game_request)
}

inline void search_game_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.game_parameters_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

search_game_request::~search_game_request() {
  // @@protoc_insertion_point(destructor:game.search_game_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void search_game_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_;
  if (this != internal_default_instance()) delete _impl_.game_parameters_;
}

void search_game_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void search_game_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.search_game_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.game_parameters_ != nullptr) {
    delete _impl_.game_parameters_;
  }
  _impl_.game_parameters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* search_game_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.search_game_request.name"));
        } else
          goto handle_unusual;
        continue;
      // .game.player_info player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.game_parameters game_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* search_game_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.search_game_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.search_game_request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .game.player_info player_info = 2;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.game_parameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::game_parameters(this),
        _Internal::game_parameters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.search_game_request)
  return target;
}

size_t search_game_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.search_game_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.player_info player_info = 2;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  // .game.game_parameters game_parameters = 3;
  if (this->_internal_has_game_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_parameters_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData search_game_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    search_game_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*search_game_request::GetClassData() const { return &_class_data_; }


void search_game_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<search_game_request*>(&to_msg);
  auto& from = static_cast<const search_game_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.search_game_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::game::player_info::MergeFrom(
        from._internal_player_info());
  }
  if (from._internal_has_game_parameters()) {
    _this->_internal_mutable_game_parameters()->::game::game_parameters::MergeFrom(
        from._internal_game_parameters());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void search_game_request::CopyFrom(const search_game_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.search_game_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_game_request::IsInitialized() const {
  return true;
}

void search_game_request::InternalSwap(search_game_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(search_game_request, _impl_.game_parameters_)
      + sizeof(search_game_request::_impl_.game_parameters_)
      - PROTOBUF_FIELD_OFFSET(search_game_request, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata search_game_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[4]);
}

// ===================================================================

class search_game_response::_Internal {
 public:
  static const ::game::status_message& status_message(const search_game_response* msg);
};

const ::game::status_message&
search_game_response::_Internal::status_message(const search_game_response* msg) {
  return *msg->_impl_.status_message_;
}
search_game_response::search_game_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.search_game_response)
}
search_game_response::search_game_response(const search_game_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  search_game_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_ = new ::game::status_message(*from._impl_.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:game.search_game_response)
}

inline void search_game_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

search_game_response::~search_game_response() {
  // @@protoc_insertion_point(destructor:game.search_game_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void search_game_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_message_;
}

void search_game_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void search_game_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.search_game_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* search_game_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.status_message status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* search_game_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.search_game_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  // repeated .game.player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.search_game_response)
  return target;
}

size_t search_game_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.search_game_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData search_game_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    search_game_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*search_game_response::GetClassData() const { return &_class_data_; }


void search_game_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<search_game_response*>(&to_msg);
  auto& from = static_cast<const search_game_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.search_game_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_status_message()) {
    _this->_internal_mutable_status_message()->::game::status_message::MergeFrom(
        from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void search_game_response::CopyFrom(const search_game_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.search_game_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_game_response::IsInitialized() const {
  return true;
}

void search_game_response::InternalSwap(search_game_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.status_message_, other->_impl_.status_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata search_game_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[5]);
}

// ===================================================================

class move_request::_Internal {
 public:
};

move_request::move_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:game.move_request)
}
move_request::move_request(const move_request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  move_request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.move_request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData move_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*move_request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata move_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[6]);
}

// ===================================================================

class move_response::_Internal {
 public:
};

move_response::move_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:game.move_response)
}
move_response::move_response(const move_response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  move_response* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.move_response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData move_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*move_response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata move_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[7]);
}

// ===================================================================

class login_request::_Internal {
 public:
  static const ::game::login_request_first& login_request_first(const login_request* msg);
  static const ::game::login_request_second& login_request_second(const login_request* msg);
};

const ::game::login_request_first&
login_request::_Internal::login_request_first(const login_request* msg) {
  return *msg->_impl_.login_requests_.login_request_first_;
}
const ::game::login_request_second&
login_request::_Internal::login_request_second(const login_request* msg) {
  return *msg->_impl_.login_requests_.login_request_second_;
}
void login_request::set_allocated_login_request_first(::game::login_request_first* login_request_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_requests();
  if (login_request_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request_first);
    if (message_arena != submessage_arena) {
      login_request_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request_first, submessage_arena);
    }
    set_has_login_request_first();
    _impl_.login_requests_.login_request_first_ = login_request_first;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_request.login_request_first)
}
void login_request::set_allocated_login_request_second(::game::login_request_second* login_request_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_requests();
  if (login_request_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request_second);
    if (message_arena != submessage_arena) {
      login_request_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request_second, submessage_arena);
    }
    set_has_login_request_second();
    _impl_.login_requests_.login_request_second_ = login_request_second;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_request.login_request_second)
}
login_request::login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_request)
}
login_request::login_request(const login_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_requests();
  switch (from.login_requests_case()) {
    case kLoginRequestFirst: {
      _this->_internal_mutable_login_request_first()->::game::login_request_first::MergeFrom(
          from._internal_login_request_first());
      break;
    }
    case kLoginRequestSecond: {
      _this->_internal_mutable_login_request_second()->::game::login_request_second::MergeFrom(
          from._internal_login_request_second());
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.login_request)
}

inline void login_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_requests_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_requests();
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:game.login_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_requests()) {
    clear_login_requests();
  }
}

void login_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_request::clear_login_requests() {
// @@protoc_insertion_point(one_of_clear_start:game.login_request)
  switch (login_requests_case()) {
    case kLoginRequestFirst: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_requests_.login_request_first_;
      }
      break;
    }
    case kLoginRequestSecond: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_requests_.login_request_second_;
      }
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_REQUESTS_NOT_SET;
}


void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_requests();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.login_request_first login_request_first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.login_request_second login_request_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.login_request_first login_request_first = 1;
  if (_internal_has_login_request_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::login_request_first(this),
        _Internal::login_request_first(this).GetCachedSize(), target, stream);
  }

  // .game.login_request_second login_request_second = 2;
  if (_internal_has_login_request_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login_request_second(this),
        _Internal::login_request_second(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_request)
  return target;
}

size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_requests_case()) {
    // .game.login_request_first login_request_first = 1;
    case kLoginRequestFirst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_requests_.login_request_first_);
      break;
    }
    // .game.login_request_second login_request_second = 2;
    case kLoginRequestSecond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_requests_.login_request_second_);
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_request::GetClassData() const { return &_class_data_; }


void login_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_request*>(&to_msg);
  auto& from = static_cast<const login_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_requests_case()) {
    case kLoginRequestFirst: {
      _this->_internal_mutable_login_request_first()->::game::login_request_first::MergeFrom(
          from._internal_login_request_first());
      break;
    }
    case kLoginRequestSecond: {
      _this->_internal_mutable_login_request_second()->::game::login_request_second::MergeFrom(
          from._internal_login_request_second());
      break;
    }
    case LOGIN_REQUESTS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  return true;
}

void login_request::InternalSwap(login_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_requests_, other->_impl_.login_requests_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[8]);
}

// ===================================================================

class login_response::_Internal {
 public:
  static const ::game::login_response_first& login_response_first(const login_response* msg);
  static const ::game::login_response_second& login_response_second(const login_response* msg);
};

const ::game::login_response_first&
login_response::_Internal::login_response_first(const login_response* msg) {
  return *msg->_impl_.login_responses_.login_response_first_;
}
const ::game::login_response_second&
login_response::_Internal::login_response_second(const login_response* msg) {
  return *msg->_impl_.login_responses_.login_response_second_;
}
void login_response::set_allocated_login_response_first(::game::login_response_first* login_response_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses();
  if (login_response_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_response_first);
    if (message_arena != submessage_arena) {
      login_response_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_response_first, submessage_arena);
    }
    set_has_login_response_first();
    _impl_.login_responses_.login_response_first_ = login_response_first;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_response.login_response_first)
}
void login_response::set_allocated_login_response_second(::game::login_response_second* login_response_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses();
  if (login_response_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_response_second);
    if (message_arena != submessage_arena) {
      login_response_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_response_second, submessage_arena);
    }
    set_has_login_response_second();
    _impl_.login_responses_.login_response_second_ = login_response_second;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_response.login_response_second)
}
login_response::login_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_response)
}
login_response::login_response(const login_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_responses();
  switch (from.login_responses_case()) {
    case kLoginResponseFirst: {
      _this->_internal_mutable_login_response_first()->::game::login_response_first::MergeFrom(
          from._internal_login_response_first());
      break;
    }
    case kLoginResponseSecond: {
      _this->_internal_mutable_login_response_second()->::game::login_response_second::MergeFrom(
          from._internal_login_response_second());
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.login_response)
}

inline void login_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_responses();
}

login_response::~login_response() {
  // @@protoc_insertion_point(destructor:game.login_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_responses()) {
    clear_login_responses();
  }
}

void login_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_response::clear_login_responses() {
// @@protoc_insertion_point(one_of_clear_start:game.login_response)
  switch (login_responses_case()) {
    case kLoginResponseFirst: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_.login_response_first_;
      }
      break;
    }
    case kLoginResponseSecond: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_.login_response_second_;
      }
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_RESPONSES_NOT_SET;
}


void login_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_responses();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.login_response_first login_response_first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_response_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.login_response_second login_response_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_response_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.login_response_first login_response_first = 1;
  if (_internal_has_login_response_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::login_response_first(this),
        _Internal::login_response_first(this).GetCachedSize(), target, stream);
  }

  // .game.login_response_second login_response_second = 2;
  if (_internal_has_login_response_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login_response_second(this),
        _Internal::login_response_second(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_response)
  return target;
}

size_t login_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_responses_case()) {
    // .game.login_response_first login_response_first = 1;
    case kLoginResponseFirst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_.login_response_first_);
      break;
    }
    // .game.login_response_second login_response_second = 2;
    case kLoginResponseSecond: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_.login_response_second_);
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_response::GetClassData() const { return &_class_data_; }


void login_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_response*>(&to_msg);
  auto& from = static_cast<const login_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_responses_case()) {
    case kLoginResponseFirst: {
      _this->_internal_mutable_login_response_first()->::game::login_response_first::MergeFrom(
          from._internal_login_response_first());
      break;
    }
    case kLoginResponseSecond: {
      _this->_internal_mutable_login_response_second()->::game::login_response_second::MergeFrom(
          from._internal_login_response_second());
      break;
    }
    case LOGIN_RESPONSES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_response::CopyFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response::IsInitialized() const {
  return true;
}

void login_response::InternalSwap(login_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_responses_, other->_impl_.login_responses_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[9]);
}

// ===================================================================

class login_request_first::_Internal {
 public:
};

login_request_first::login_request_first(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_request_first)
}
login_request_first::login_request_first(const login_request_first& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_request_first* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.login_request_first)
}

inline void login_request_first::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

login_request_first::~login_request_first() {
  // @@protoc_insertion_point(destructor:game.login_request_first)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_request_first::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void login_request_first::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_request_first::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_request_first)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_request_first::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.login_request_first.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_request_first::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_request_first)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.login_request_first.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_request_first)
  return target;
}

size_t login_request_first::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_request_first)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_request_first::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_request_first::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_request_first::GetClassData() const { return &_class_data_; }


void login_request_first::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_request_first*>(&to_msg);
  auto& from = static_cast<const login_request_first&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_request_first)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_request_first::CopyFrom(const login_request_first& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_request_first)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request_first::IsInitialized() const {
  return true;
}

void login_request_first::InternalSwap(login_request_first* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata login_request_first::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[10]);
}

// ===================================================================

class login_request_second::_Internal {
 public:
};

login_request_second::login_request_second(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_request_second)
}
login_request_second::login_request_second(const login_request_second& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_request_second* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.hashed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hashed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hashed().empty()) {
    _this->_impl_.hashed_.Set(from._internal_hashed(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.login_request_second)
}

inline void login_request_second::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.hashed_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hashed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

login_request_second::~login_request_second() {
  // @@protoc_insertion_point(destructor:game.login_request_second)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_request_second::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.hashed_.Destroy();
}

void login_request_second::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_request_second::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_request_second)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.hashed_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_request_second::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.login_request_second.name"));
        } else
          goto handle_unusual;
        continue;
      // string hashed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hashed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.login_request_second.hashed"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_request_second::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_request_second)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.login_request_second.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string hashed = 2;
  if (!this->_internal_hashed().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hashed().data(), static_cast<int>(this->_internal_hashed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.login_request_second.hashed");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hashed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_request_second)
  return target;
}

size_t login_request_second::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_request_second)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string hashed = 2;
  if (!this->_internal_hashed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_request_second::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_request_second::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_request_second::GetClassData() const { return &_class_data_; }


void login_request_second::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_request_second*>(&to_msg);
  auto& from = static_cast<const login_request_second&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_request_second)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_hashed().empty()) {
    _this->_internal_set_hashed(from._internal_hashed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_request_second::CopyFrom(const login_request_second& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_request_second)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request_second::IsInitialized() const {
  return true;
}

void login_request_second::InternalSwap(login_request_second* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hashed_, lhs_arena,
      &other->_impl_.hashed_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata login_request_second::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[11]);
}

// ===================================================================

class login_response_first::_Internal {
 public:
  static const ::game::error_message& error_message(const login_response_first* msg);
};

const ::game::error_message&
login_response_first::_Internal::error_message(const login_response_first* msg) {
  return *msg->_impl_.login_responses_first_.error_message_;
}
void login_response_first::set_allocated_error_message(::game::error_message* error_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses_first();
  if (error_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_message);
    if (message_arena != submessage_arena) {
      error_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_message, submessage_arena);
    }
    set_has_error_message();
    _impl_.login_responses_first_.error_message_ = error_message;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_response_first.error_message)
}
login_response_first::login_response_first(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_response_first)
}
login_response_first::login_response_first(const login_response_first& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_response_first* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_first_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_responses_first();
  switch (from.login_responses_first_case()) {
    case kSalt: {
      _this->_internal_set_salt(from._internal_salt());
      break;
    }
    case kErrorMessage: {
      _this->_internal_mutable_error_message()->::game::error_message::MergeFrom(
          from._internal_error_message());
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.login_response_first)
}

inline void login_response_first::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_first_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_responses_first();
}

login_response_first::~login_response_first() {
  // @@protoc_insertion_point(destructor:game.login_response_first)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_response_first::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_responses_first()) {
    clear_login_responses_first();
  }
}

void login_response_first::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_response_first::clear_login_responses_first() {
// @@protoc_insertion_point(one_of_clear_start:game.login_response_first)
  switch (login_responses_first_case()) {
    case kSalt: {
      _impl_.login_responses_first_.salt_.Destroy();
      break;
    }
    case kErrorMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_first_.error_message_;
      }
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_RESPONSES_FIRST_NOT_SET;
}


void login_response_first::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_response_first)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_responses_first();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_response_first::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.login_response_first.salt"));
        } else
          goto handle_unusual;
        continue;
      // .game.error_message error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_response_first::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_response_first)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string salt = 1;
  if (_internal_has_salt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.login_response_first.salt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_salt(), target);
  }

  // .game.error_message error_message = 2;
  if (_internal_has_error_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_message(this),
        _Internal::error_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_response_first)
  return target;
}

size_t login_response_first::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_response_first)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_responses_first_case()) {
    // string salt = 1;
    case kSalt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_salt());
      break;
    }
    // .game.error_message error_message = 2;
    case kErrorMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_first_.error_message_);
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_response_first::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_response_first::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_response_first::GetClassData() const { return &_class_data_; }


void login_response_first::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_response_first*>(&to_msg);
  auto& from = static_cast<const login_response_first&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_response_first)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_responses_first_case()) {
    case kSalt: {
      _this->_internal_set_salt(from._internal_salt());
      break;
    }
    case kErrorMessage: {
      _this->_internal_mutable_error_message()->::game::error_message::MergeFrom(
          from._internal_error_message());
      break;
    }
    case LOGIN_RESPONSES_FIRST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_response_first::CopyFrom(const login_response_first& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_response_first)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response_first::IsInitialized() const {
  return true;
}

void login_response_first::InternalSwap(login_response_first* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_responses_first_, other->_impl_.login_responses_first_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_response_first::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[12]);
}

// ===================================================================

class login_response_second::_Internal {
 public:
  static const ::game::player_info& player_info(const login_response_second* msg);
  static const ::game::error_message& error_message(const login_response_second* msg);
};

const ::game::player_info&
login_response_second::_Internal::player_info(const login_response_second* msg) {
  return *msg->_impl_.login_responses_second_.player_info_;
}
const ::game::error_message&
login_response_second::_Internal::error_message(const login_response_second* msg) {
  return *msg->_impl_.login_responses_second_.error_message_;
}
void login_response_second::set_allocated_player_info(::game::player_info* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses_second();
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    set_has_player_info();
    _impl_.login_responses_second_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_response_second.player_info)
}
void login_response_second::set_allocated_error_message(::game::error_message* error_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_login_responses_second();
  if (error_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_message);
    if (message_arena != submessage_arena) {
      error_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_message, submessage_arena);
    }
    set_has_error_message();
    _impl_.login_responses_second_.error_message_ = error_message;
  }
  // @@protoc_insertion_point(field_set_allocated:game.login_response_second.error_message)
}
login_response_second::login_response_second(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.login_response_second)
}
login_response_second::login_response_second(const login_response_second& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_response_second* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_second_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_login_responses_second();
  switch (from.login_responses_second_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::player_info::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kErrorMessage: {
      _this->_internal_mutable_error_message()->::game::error_message::MergeFrom(
          from._internal_error_message());
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.login_response_second)
}

inline void login_response_second::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_responses_second_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_login_responses_second();
}

login_response_second::~login_response_second() {
  // @@protoc_insertion_point(destructor:game.login_response_second)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_response_second::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_login_responses_second()) {
    clear_login_responses_second();
  }
}

void login_response_second::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_response_second::clear_login_responses_second() {
// @@protoc_insertion_point(one_of_clear_start:game.login_response_second)
  switch (login_responses_second_case()) {
    case kPlayerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_second_.player_info_;
      }
      break;
    }
    case kErrorMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.login_responses_second_.error_message_;
      }
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOGIN_RESPONSES_SECOND_NOT_SET;
}


void login_response_second::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login_response_second)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_login_responses_second();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_response_second::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.player_info player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.error_message error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_response_second::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.login_response_second)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.player_info player_info = 1;
  if (_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.error_message error_message = 2;
  if (_internal_has_error_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_message(this),
        _Internal::error_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.login_response_second)
  return target;
}

size_t login_response_second::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login_response_second)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (login_responses_second_case()) {
    // .game.player_info player_info = 1;
    case kPlayerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_second_.player_info_);
      break;
    }
    // .game.error_message error_message = 2;
    case kErrorMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_responses_second_.error_message_);
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_response_second::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_response_second::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_response_second::GetClassData() const { return &_class_data_; }


void login_response_second::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_response_second*>(&to_msg);
  auto& from = static_cast<const login_response_second&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.login_response_second)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.login_responses_second_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::player_info::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kErrorMessage: {
      _this->_internal_mutable_error_message()->::game::error_message::MergeFrom(
          from._internal_error_message());
      break;
    }
    case LOGIN_RESPONSES_SECOND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_response_second::CopyFrom(const login_response_second& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login_response_second)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response_second::IsInitialized() const {
  return true;
}

void login_response_second::InternalSwap(login_response_second* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.login_responses_second_, other->_impl_.login_responses_second_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_response_second::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[13]);
}

// ===================================================================

class register_request::_Internal {
 public:
  static const ::game::salt_hash& salt_hash(const register_request* msg);
};

const ::game::salt_hash&
register_request::_Internal::salt_hash(const register_request* msg) {
  return *msg->_impl_.salt_hash_;
}
register_request::register_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.register_request)
}
register_request::register_request(const register_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  register_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.salt_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_salt_hash()) {
    _this->_impl_.salt_hash_ = new ::game::salt_hash(*from._impl_.salt_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:game.register_request)
}

inline void register_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.salt_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

register_request::~register_request() {
  // @@protoc_insertion_point(destructor:game.register_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void register_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.salt_hash_;
}

void register_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void register_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.register_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.salt_hash_ != nullptr) {
    delete _impl_.salt_hash_;
  }
  _impl_.salt_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.register_request.name"));
        } else
          goto handle_unusual;
        continue;
      // .game.salt_hash salt_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_salt_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* register_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.register_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.register_request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .game.salt_hash salt_hash = 2;
  if (this->_internal_has_salt_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::salt_hash(this),
        _Internal::salt_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.register_request)
  return target;
}

size_t register_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.register_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.salt_hash salt_hash = 2;
  if (this->_internal_has_salt_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.salt_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData register_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    register_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*register_request::GetClassData() const { return &_class_data_; }


void register_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<register_request*>(&to_msg);
  auto& from = static_cast<const register_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.register_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_salt_hash()) {
    _this->_internal_mutable_salt_hash()->::game::salt_hash::MergeFrom(
        from._internal_salt_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void register_request::CopyFrom(const register_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.register_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_request::IsInitialized() const {
  return true;
}

void register_request::InternalSwap(register_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.salt_hash_, other->_impl_.salt_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata register_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[14]);
}

// ===================================================================

class register_response::_Internal {
 public:
  static const ::game::player_info& player_info(const register_response* msg);
  static const ::game::error_message& error_message(const register_response* msg);
};

const ::game::player_info&
register_response::_Internal::player_info(const register_response* msg) {
  return *msg->_impl_.register_responses_.player_info_;
}
const ::game::error_message&
register_response::_Internal::error_message(const register_response* msg) {
  return *msg->_impl_.register_responses_.error_message_;
}
void register_response::set_allocated_player_info(::game::player_info* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_register_responses();
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    set_has_player_info();
    _impl_.register_responses_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_set_allocated:game.register_response.player_info)
}
void register_response::set_allocated_error_message(::game::error_message* error_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_register_responses();
  if (error_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_message);
    if (message_arena != submessage_arena) {
      error_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_message, submessage_arena);
    }
    set_has_error_message();
    _impl_.register_responses_.error_message_ = error_message;
  }
  // @@protoc_insertion_point(field_set_allocated:game.register_response.error_message)
}
register_response::register_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.register_response)
}
register_response::register_response(const register_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  register_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.register_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_register_responses();
  switch (from.register_responses_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::player_info::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kErrorMessage: {
      _this->_internal_mutable_error_message()->::game::error_message::MergeFrom(
          from._internal_error_message());
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.register_response)
}

inline void register_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.register_responses_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_register_responses();
}

register_response::~register_response() {
  // @@protoc_insertion_point(destructor:game.register_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void register_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_register_responses()) {
    clear_register_responses();
  }
}

void register_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void register_response::clear_register_responses() {
// @@protoc_insertion_point(one_of_clear_start:game.register_response)
  switch (register_responses_case()) {
    case kPlayerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.register_responses_.player_info_;
      }
      break;
    }
    case kErrorMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.register_responses_.error_message_;
      }
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REGISTER_RESPONSES_NOT_SET;
}


void register_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.register_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_register_responses();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.player_info player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.error_message error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* register_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.register_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.player_info player_info = 1;
  if (_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // .game.error_message error_message = 2;
  if (_internal_has_error_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_message(this),
        _Internal::error_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.register_response)
  return target;
}

size_t register_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.register_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (register_responses_case()) {
    // .game.player_info player_info = 1;
    case kPlayerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.register_responses_.player_info_);
      break;
    }
    // .game.error_message error_message = 2;
    case kErrorMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.register_responses_.error_message_);
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData register_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    register_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*register_response::GetClassData() const { return &_class_data_; }


void register_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<register_response*>(&to_msg);
  auto& from = static_cast<const register_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.register_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.register_responses_case()) {
    case kPlayerInfo: {
      _this->_internal_mutable_player_info()->::game::player_info::MergeFrom(
          from._internal_player_info());
      break;
    }
    case kErrorMessage: {
      _this->_internal_mutable_error_message()->::game::error_message::MergeFrom(
          from._internal_error_message());
      break;
    }
    case REGISTER_RESPONSES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void register_response::CopyFrom(const register_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.register_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_response::IsInitialized() const {
  return true;
}

void register_response::InternalSwap(register_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.register_responses_, other->_impl_.register_responses_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata register_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[15]);
}

// ===================================================================

class salt_hash::_Internal {
 public:
};

salt_hash::salt_hash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.salt_hash)
}
salt_hash::salt_hash(const salt_hash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  salt_hash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.salt_hash)
}

inline void salt_hash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.salt_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

salt_hash::~salt_hash() {
  // @@protoc_insertion_point(destructor:game.salt_hash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void salt_hash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.salt_.Destroy();
  _impl_.hash_.Destroy();
}

void salt_hash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void salt_hash::Clear() {
// @@protoc_insertion_point(message_clear_start:game.salt_hash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.salt_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* salt_hash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.salt_hash.salt"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.salt_hash.hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* salt_hash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.salt_hash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string salt = 1;
  if (!this->_internal_salt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.salt_hash.salt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_salt(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.salt_hash.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.salt_hash)
  return target;
}

size_t salt_hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.salt_hash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string salt = 1;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_salt());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData salt_hash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    salt_hash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*salt_hash::GetClassData() const { return &_class_data_; }


void salt_hash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<salt_hash*>(&to_msg);
  auto& from = static_cast<const salt_hash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.salt_hash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void salt_hash::CopyFrom(const salt_hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.salt_hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool salt_hash::IsInitialized() const {
  return true;
}

void salt_hash::InternalSwap(salt_hash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata salt_hash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[16]);
}

// ===================================================================

class search_a_game_request::_Internal {
 public:
};

search_a_game_request::search_a_game_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.search_a_game_request)
}
search_a_game_request::search_a_game_request(const search_a_game_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  search_a_game_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_of_players_){}
    , decltype(_impl_.minimal_bet_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.number_of_players_, &from._impl_.number_of_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minimal_bet_) -
    reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.minimal_bet_));
  // @@protoc_insertion_point(copy_constructor:game.search_a_game_request)
}

inline void search_a_game_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_of_players_){0}
    , decltype(_impl_.minimal_bet_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

search_a_game_request::~search_a_game_request() {
  // @@protoc_insertion_point(destructor:game.search_a_game_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void search_a_game_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void search_a_game_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void search_a_game_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.search_a_game_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.number_of_players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.minimal_bet_) -
      reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.minimal_bet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* search_a_game_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 number_of_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_of_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minimal_bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minimal_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* search_a_game_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.search_a_game_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number_of_players = 1;
  if (this->_internal_number_of_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_number_of_players(), target);
  }

  // int32 minimal_bet = 2;
  if (this->_internal_minimal_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_minimal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.search_a_game_request)
  return target;
}

size_t search_a_game_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.search_a_game_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number_of_players = 1;
  if (this->_internal_number_of_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_players());
  }

  // int32 minimal_bet = 2;
  if (this->_internal_minimal_bet() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minimal_bet());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData search_a_game_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    search_a_game_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*search_a_game_request::GetClassData() const { return &_class_data_; }


void search_a_game_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<search_a_game_request*>(&to_msg);
  auto& from = static_cast<const search_a_game_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.search_a_game_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number_of_players() != 0) {
    _this->_internal_set_number_of_players(from._internal_number_of_players());
  }
  if (from._internal_minimal_bet() != 0) {
    _this->_internal_set_minimal_bet(from._internal_minimal_bet());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void search_a_game_request::CopyFrom(const search_a_game_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.search_a_game_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_a_game_request::IsInitialized() const {
  return true;
}

void search_a_game_request::InternalSwap(search_a_game_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(search_a_game_request, _impl_.minimal_bet_)
      + sizeof(search_a_game_request::_impl_.minimal_bet_)
      - PROTOBUF_FIELD_OFFSET(search_a_game_request, _impl_.number_of_players_)>(
          reinterpret_cast<char*>(&_impl_.number_of_players_),
          reinterpret_cast<char*>(&other->_impl_.number_of_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata search_a_game_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[17]);
}

// ===================================================================

class search_a_game_response::_Internal {
 public:
  static const ::game::status_message& status_message(const search_a_game_response* msg);
};

const ::game::status_message&
search_a_game_response::_Internal::status_message(const search_a_game_response* msg) {
  return *msg->_impl_.status_message_;
}
search_a_game_response::search_a_game_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.search_a_game_response)
}
search_a_game_response::search_a_game_response(const search_a_game_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  search_a_game_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_message()) {
    _this->_impl_.status_message_ = new ::game::status_message(*from._impl_.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:game.search_a_game_response)
}

inline void search_a_game_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

search_a_game_response::~search_a_game_response() {
  // @@protoc_insertion_point(destructor:game.search_a_game_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void search_a_game_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_message_;
}

void search_a_game_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void search_a_game_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.search_a_game_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_message_ != nullptr) {
    delete _impl_.status_message_;
  }
  _impl_.status_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* search_a_game_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.status_message status_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* search_a_game_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.search_a_game_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status_message(this),
        _Internal::status_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.search_a_game_response)
  return target;
}

size_t search_a_game_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.search_a_game_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.status_message status_message = 1;
  if (this->_internal_has_status_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData search_a_game_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    search_a_game_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*search_a_game_response::GetClassData() const { return &_class_data_; }


void search_a_game_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<search_a_game_response*>(&to_msg);
  auto& from = static_cast<const search_a_game_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.search_a_game_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status_message()) {
    _this->_internal_mutable_status_message()->::game::status_message::MergeFrom(
        from._internal_status_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void search_a_game_response::CopyFrom(const search_a_game_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.search_a_game_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search_a_game_response::IsInitialized() const {
  return true;
}

void search_a_game_response::InternalSwap(search_a_game_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_message_, other->_impl_.status_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata search_a_game_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[18]);
}

// ===================================================================

class make_move_request::_Internal {
 public:
};

make_move_request::make_move_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.make_move_request)
}
make_move_request::make_move_request(const make_move_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  make_move_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_name_){}
    , decltype(_impl_.make_blind_){}
    , decltype(_impl_.fold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_name().empty()) {
    _this->_impl_.client_name_.Set(from._internal_client_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.make_blind_, &from._impl_.make_blind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fold_) -
    reinterpret_cast<char*>(&_impl_.make_blind_)) + sizeof(_impl_.fold_));
  // @@protoc_insertion_point(copy_constructor:game.make_move_request)
}

inline void make_move_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_name_){}
    , decltype(_impl_.make_blind_){0}
    , decltype(_impl_.fold_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

make_move_request::~make_move_request() {
  // @@protoc_insertion_point(destructor:game.make_move_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void make_move_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_name_.Destroy();
}

void make_move_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void make_move_request::Clear() {
// @@protoc_insertion_point(message_clear_start:game.make_move_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_name_.ClearToEmpty();
  ::memset(&_impl_.make_blind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fold_) -
      reinterpret_cast<char*>(&_impl_.make_blind_)) + sizeof(_impl_.fold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* make_move_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.make_move_request.client_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 make_blind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.make_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* make_move_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.make_move_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_name = 1;
  if (!this->_internal_client_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.make_move_request.client_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_name(), target);
  }

  // int32 make_blind = 2;
  if (this->_internal_make_blind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_make_blind(), target);
  }

  // bool fold = 3;
  if (this->_internal_fold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_fold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.make_move_request)
  return target;
}

size_t make_move_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.make_move_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_name = 1;
  if (!this->_internal_client_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // int32 make_blind = 2;
  if (this->_internal_make_blind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_make_blind());
  }

  // bool fold = 3;
  if (this->_internal_fold() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData make_move_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    make_move_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*make_move_request::GetClassData() const { return &_class_data_; }


void make_move_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<make_move_request*>(&to_msg);
  auto& from = static_cast<const make_move_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.make_move_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_name().empty()) {
    _this->_internal_set_client_name(from._internal_client_name());
  }
  if (from._internal_make_blind() != 0) {
    _this->_internal_set_make_blind(from._internal_make_blind());
  }
  if (from._internal_fold() != 0) {
    _this->_internal_set_fold(from._internal_fold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void make_move_request::CopyFrom(const make_move_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.make_move_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool make_move_request::IsInitialized() const {
  return true;
}

void make_move_request::InternalSwap(make_move_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_name_, lhs_arena,
      &other->_impl_.client_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(make_move_request, _impl_.fold_)
      + sizeof(make_move_request::_impl_.fold_)
      - PROTOBUF_FIELD_OFFSET(make_move_request, _impl_.make_blind_)>(
          reinterpret_cast<char*>(&_impl_.make_blind_),
          reinterpret_cast<char*>(&other->_impl_.make_blind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata make_move_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[19]);
}

// ===================================================================

class make_move_response::_Internal {
 public:
};

make_move_response::make_move_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.make_move_response)
}
make_move_response::make_move_response(const make_move_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  make_move_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.make_move_response)
}

inline void make_move_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

make_move_response::~make_move_response() {
  // @@protoc_insertion_point(destructor:game.make_move_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void make_move_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void make_move_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void make_move_response::Clear() {
// @@protoc_insertion_point(message_clear_start:game.make_move_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* make_move_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* make_move_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.make_move_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.make_move_response)
  return target;
}

size_t make_move_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.make_move_response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData make_move_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    make_move_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*make_move_response::GetClassData() const { return &_class_data_; }


void make_move_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<make_move_response*>(&to_msg);
  auto& from = static_cast<const make_move_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.make_move_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void make_move_response::CopyFrom(const make_move_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.make_move_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool make_move_response::IsInitialized() const {
  return true;
}

void make_move_response::InternalSwap(make_move_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata make_move_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[20]);
}

// ===================================================================

class player::_Internal {
 public:
};

player::player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.player)
}
player::player(const player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:game.player)
}

inline void player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

player::~player() {
  // @@protoc_insertion_point(destructor:game.player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void player::Clear() {
// @@protoc_insertion_point(message_clear_start:game.player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.balance_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.player.name"));
        } else
          goto handle_unusual;
        continue;
      // .game.player_status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::game::player_status>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .game.player_status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // int32 balance = 3;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.player)
  return target;
}

size_t player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.player_status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 balance = 3;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*player::GetClassData() const { return &_class_data_; }


void player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<player*>(&to_msg);
  auto& from = static_cast<const player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void player::CopyFrom(const player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player::IsInitialized() const {
  return true;
}

void player::InternalSwap(player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(player, _impl_.balance_)
      + sizeof(player::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(player, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[21]);
}

// ===================================================================

class status_message::_Internal {
 public:
};

status_message::status_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.status_message)
}
status_message::status_message(const status_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  status_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:game.status_message)
}

inline void status_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

status_message::~status_message() {
  // @@protoc_insertion_point(destructor:game.status_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void status_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void status_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void status_message::Clear() {
// @@protoc_insertion_point(message_clear_start:game.status_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* status_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.status_message.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* status_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.status_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.status_message.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.status_message)
  return target;
}

size_t status_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.status_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData status_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    status_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*status_message::GetClassData() const { return &_class_data_; }


void status_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<status_message*>(&to_msg);
  auto& from = static_cast<const status_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.status_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void status_message::CopyFrom(const status_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.status_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool status_message::IsInitialized() const {
  return true;
}

void status_message::InternalSwap(status_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata status_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[22]);
}

// ===================================================================

class error_message::_Internal {
 public:
  using HasBits = decltype(std::declval<error_message>()._impl_._has_bits_);
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

error_message::error_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.error_message)
}
error_message::error_message(const error_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  error_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:game.error_message)
}

inline void error_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.error_){0}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

error_message::~error_message() {
  // @@protoc_insertion_point(destructor:game.error_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void error_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void error_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void error_message::Clear() {
// @@protoc_insertion_point(message_clear_start:game.error_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_message_.ClearNonDefaultToEmpty();
  }
  _impl_.error_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* error_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.errors error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::game::errors>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.error_message.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* error_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.error_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.errors error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional string error_message = 2;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.error_message.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.error_message)
  return target;
}

size_t error_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.error_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error_message = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .game.errors error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData error_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    error_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*error_message::GetClassData() const { return &_class_data_; }


void error_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<error_message*>(&to_msg);
  auto& from = static_cast<const error_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.error_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_message()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void error_message::CopyFrom(const error_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.error_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error_message::IsInitialized() const {
  return true;
}

void error_message::InternalSwap(error_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata error_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[23]);
}

// ===================================================================

class game_parameters::_Internal {
 public:
};

game_parameters::game_parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.game_parameters)
}
game_parameters::game_parameters(const game_parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  game_parameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_name_){}
    , decltype(_impl_.number_of_players_){}
    , decltype(_impl_.minimal_bet_){}
    , decltype(_impl_.game_enter_balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_name().empty()) {
    _this->_impl_.game_name_.Set(from._internal_game_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.number_of_players_, &from._impl_.number_of_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_enter_balance_) -
    reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.game_enter_balance_));
  // @@protoc_insertion_point(copy_constructor:game.game_parameters)
}

inline void game_parameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_name_){}
    , decltype(_impl_.number_of_players_){0}
    , decltype(_impl_.minimal_bet_){0}
    , decltype(_impl_.game_enter_balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

game_parameters::~game_parameters() {
  // @@protoc_insertion_point(destructor:game.game_parameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void game_parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_name_.Destroy();
}

void game_parameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void game_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:game.game_parameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_name_.ClearToEmpty();
  ::memset(&_impl_.number_of_players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.game_enter_balance_) -
      reinterpret_cast<char*>(&_impl_.number_of_players_)) + sizeof(_impl_.game_enter_balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* game_parameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string game_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_game_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.game_parameters.game_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 number_of_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.number_of_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minimal_bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.minimal_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 game_enter_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.game_enter_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* game_parameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.game_parameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_name = 1;
  if (!this->_internal_game_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.game_parameters.game_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_name(), target);
  }

  // int32 number_of_players = 2;
  if (this->_internal_number_of_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_number_of_players(), target);
  }

  // int32 minimal_bet = 3;
  if (this->_internal_minimal_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_minimal_bet(), target);
  }

  // int32 game_enter_balance = 4;
  if (this->_internal_game_enter_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_enter_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.game_parameters)
  return target;
}

size_t game_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.game_parameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_name = 1;
  if (!this->_internal_game_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_name());
  }

  // int32 number_of_players = 2;
  if (this->_internal_number_of_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_players());
  }

  // int32 minimal_bet = 3;
  if (this->_internal_minimal_bet() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minimal_bet());
  }

  // int32 game_enter_balance = 4;
  if (this->_internal_game_enter_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_enter_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData game_parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    game_parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*game_parameters::GetClassData() const { return &_class_data_; }


void game_parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<game_parameters*>(&to_msg);
  auto& from = static_cast<const game_parameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.game_parameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_game_name().empty()) {
    _this->_internal_set_game_name(from._internal_game_name());
  }
  if (from._internal_number_of_players() != 0) {
    _this->_internal_set_number_of_players(from._internal_number_of_players());
  }
  if (from._internal_minimal_bet() != 0) {
    _this->_internal_set_minimal_bet(from._internal_minimal_bet());
  }
  if (from._internal_game_enter_balance() != 0) {
    _this->_internal_set_game_enter_balance(from._internal_game_enter_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void game_parameters::CopyFrom(const game_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.game_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_parameters::IsInitialized() const {
  return true;
}

void game_parameters::InternalSwap(game_parameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_name_, lhs_arena,
      &other->_impl_.game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(game_parameters, _impl_.game_enter_balance_)
      + sizeof(game_parameters::_impl_.game_enter_balance_)
      - PROTOBUF_FIELD_OFFSET(game_parameters, _impl_.number_of_players_)>(
          reinterpret_cast<char*>(&_impl_.number_of_players_),
          reinterpret_cast<char*>(&other->_impl_.number_of_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata game_parameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[24]);
}

// ===================================================================

class game_::_Internal {
 public:
};

game_::game_(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.game_)
}
game_::game_(const game_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  game_* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.game_)
}

inline void game_::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

game_::~game_() {
  // @@protoc_insertion_point(destructor:game.game_)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void game_::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void game_::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void game_::Clear() {
// @@protoc_insertion_point(message_clear_start:game.game_)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* game_::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* game_::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.game_)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.game_)
  return target;
}

size_t game_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.game_)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData game_::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    game_::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*game_::GetClassData() const { return &_class_data_; }


void game_::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<game_*>(&to_msg);
  auto& from = static_cast<const game_&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.game_)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void game_::CopyFrom(const game_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.game_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_::IsInitialized() const {
  return true;
}

void game_::InternalSwap(game_* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata game_::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[25]);
}

// ===================================================================

class player_info::_Internal {
 public:
};

player_info::player_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.player_info)
}
player_info::player_info(const player_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  player_info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , decltype(_impl_.client_games_){}
    , decltype(_impl_.client_wins_){}
    , decltype(_impl_.client_balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_balance_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.client_balance_));
  // @@protoc_insertion_point(copy_constructor:game.player_info)
}

inline void player_info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){0}
    , decltype(_impl_.client_games_){0}
    , decltype(_impl_.client_wins_){0}
    , decltype(_impl_.client_balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

player_info::~player_info() {
  // @@protoc_insertion_point(destructor:game.player_info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void player_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void player_info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void player_info::Clear() {
// @@protoc_insertion_point(message_clear_start:game.player_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.client_balance_) -
      reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.client_balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player_info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 client_games = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.client_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 client_wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.client_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 client_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.client_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* player_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.player_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // int32 client_games = 2;
  if (this->_internal_client_games() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_client_games(), target);
  }

  // int32 client_wins = 3;
  if (this->_internal_client_wins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_wins(), target);
  }

  // int32 client_balance = 4;
  if (this->_internal_client_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_client_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.player_info)
  return target;
}

size_t player_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.player_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  // int32 client_games = 2;
  if (this->_internal_client_games() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_games());
  }

  // int32 client_wins = 3;
  if (this->_internal_client_wins() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_wins());
  }

  // int32 client_balance = 4;
  if (this->_internal_client_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData player_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    player_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*player_info::GetClassData() const { return &_class_data_; }


void player_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<player_info*>(&to_msg);
  auto& from = static_cast<const player_info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.player_info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_client_games() != 0) {
    _this->_internal_set_client_games(from._internal_client_games());
  }
  if (from._internal_client_wins() != 0) {
    _this->_internal_set_client_wins(from._internal_client_wins());
  }
  if (from._internal_client_balance() != 0) {
    _this->_internal_set_client_balance(from._internal_client_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void player_info::CopyFrom(const player_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.player_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {
  return true;
}

void player_info::InternalSwap(player_info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(player_info, _impl_.client_balance_)
      + sizeof(player_info::_impl_.client_balance_)
      - PROTOBUF_FIELD_OFFSET(player_info, _impl_.client_id_)>(
          reinterpret_cast<char*>(&_impl_.client_id_),
          reinterpret_cast<char*>(&other->_impl_.client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata player_info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::Requests*
Arena::CreateMaybeMessage< ::game::Requests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::Requests >(arena);
}
template<> PROTOBUF_NOINLINE ::game::Responses*
Arena::CreateMaybeMessage< ::game::Responses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::Responses >(arena);
}
template<> PROTOBUF_NOINLINE ::game::create_game_request*
Arena::CreateMaybeMessage< ::game::create_game_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::create_game_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::create_game_response*
Arena::CreateMaybeMessage< ::game::create_game_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::create_game_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::search_game_request*
Arena::CreateMaybeMessage< ::game::search_game_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::search_game_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::search_game_response*
Arena::CreateMaybeMessage< ::game::search_game_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::search_game_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::move_request*
Arena::CreateMaybeMessage< ::game::move_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::move_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::move_response*
Arena::CreateMaybeMessage< ::game::move_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::move_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_request*
Arena::CreateMaybeMessage< ::game::login_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_response*
Arena::CreateMaybeMessage< ::game::login_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_request_first*
Arena::CreateMaybeMessage< ::game::login_request_first >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_request_first >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_request_second*
Arena::CreateMaybeMessage< ::game::login_request_second >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_request_second >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_response_first*
Arena::CreateMaybeMessage< ::game::login_response_first >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_response_first >(arena);
}
template<> PROTOBUF_NOINLINE ::game::login_response_second*
Arena::CreateMaybeMessage< ::game::login_response_second >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::login_response_second >(arena);
}
template<> PROTOBUF_NOINLINE ::game::register_request*
Arena::CreateMaybeMessage< ::game::register_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::register_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::register_response*
Arena::CreateMaybeMessage< ::game::register_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::register_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::salt_hash*
Arena::CreateMaybeMessage< ::game::salt_hash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::salt_hash >(arena);
}
template<> PROTOBUF_NOINLINE ::game::search_a_game_request*
Arena::CreateMaybeMessage< ::game::search_a_game_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::search_a_game_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::search_a_game_response*
Arena::CreateMaybeMessage< ::game::search_a_game_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::search_a_game_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::make_move_request*
Arena::CreateMaybeMessage< ::game::make_move_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::make_move_request >(arena);
}
template<> PROTOBUF_NOINLINE ::game::make_move_response*
Arena::CreateMaybeMessage< ::game::make_move_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::make_move_response >(arena);
}
template<> PROTOBUF_NOINLINE ::game::player*
Arena::CreateMaybeMessage< ::game::player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::player >(arena);
}
template<> PROTOBUF_NOINLINE ::game::status_message*
Arena::CreateMaybeMessage< ::game::status_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::status_message >(arena);
}
template<> PROTOBUF_NOINLINE ::game::error_message*
Arena::CreateMaybeMessage< ::game::error_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::error_message >(arena);
}
template<> PROTOBUF_NOINLINE ::game::game_parameters*
Arena::CreateMaybeMessage< ::game::game_parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::game_parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::game::game_*
Arena::CreateMaybeMessage< ::game::game_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::game_ >(arena);
}
template<> PROTOBUF_NOINLINE ::game::player_info*
Arena::CreateMaybeMessage< ::game::player_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::player_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
