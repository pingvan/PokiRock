syntax = "proto3";

package game;

enum error {
    ERROR_NO_USER_WITH_THIS_LOGIN = 0;
    ERROR_USER_WITH_THIS_LOGIN_ALREADY_EXISTS = 1;
    ERROR_UNCORRECT_PASSWORD = 2;
    ERROR_EXCEPTION = 3;
    ERROR_GAME_NOT_FOUND = 4;
}

message ErrorMessage {
    error error = 1;
    optional string message_string = 2;
}

service Authorization {
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Registration(RegisterRequest) returns (RegisterResponse);
}

message LoginRequest {
    oneof login_requests {
        LoginRequestFirst login_request_first = 1;
        LoginRequestSecond login_request_second = 2;
    }
}

message LoginResponse {
    oneof login_responses {
        LoginResponseFirst login_response_first = 1;
        LoginResponseSecond login_response_second = 2;
    }
}

message LoginRequestFirst {
    string name = 1;
}

message LoginRequestSecond {
    string name = 1;
    string hashed = 2;
}

message LoginResponseFirst {
    oneof login_responses_first {
        string salt = 1;
        ErrorMessage msg = 2;
    }
}

message LoginResponseSecond {
    oneof login_responses_second {
        PlayerInfo player_info = 1;
        ErrorMessage msg = 2;
    }
}


message RegisterRequest {
    string name = 1;
    SaltHash salt_hash = 2;
}

message RegisterResponse {
    oneof register_responses {
        PlayerInfo player_info = 1;
        ErrorMessage msg = 2;
    }
}

message SaltHash {
    string salt = 1;
    string hash = 2;
}

service Lobby {
    rpc LobbyFunc(stream LobbyRequests) returns (stream LobbyResponses);
}

message Player {
    string name = 1;
    PlayerStatus status = 2;
    uint32 balance = 3;
}

message LobbyRequests {
    oneof requests {
        CreateGameRequest create_game_request = 1;
        SearchGameRequest search_game_request = 2;
    }
}

message LobbyResponses {
    oneof responses {
        CreateGameResponse create_game_response = 1;
        SearchGameResponse search_game_response = 2;
    }
}

message CreateGameRequest {
    uint32 game_owner_id = 1;
    //PlayerInfo player_info = 2;
    GameParameters game_parameters = 2;
}

message CreateGameResponse {
    oneof responses {
        uint32 game_id = 1;
        ErrorMessage msg = 2;
    }
//    repeated Player players = 3;
}

message SearchGameRequest {
//    string name = 1;
    uint32 id = 1;
    //PlayerInfo player_info = 2;
    GameParameters game_parameters = 2;
}

message SearchGameResponse {
    oneof responses {
        uint32 game_id = 1;
        ErrorMessage msg = 2;
    }
//    repeated Player players = 2;
}

message GameParameters {
    string game_name = 1;
    uint32 number_of_players = 2;
    uint32 minimal_bet = 3;
    uint32 game_enter_balance = 4;
}


enum PlayerStatus {
    PLAYER_STATUS_FOLD = 0;
    PLAYER_STATUS_PLAYING = 1;
    PLAYER_STATUS_WIN = 2;
}

message PlayerInfo {
    uint32 client_id = 1;
    uint32 client_games = 2;
    uint32 client_wins = 3;
    uint32 client_balance = 4;
}


service PokerGame {
    rpc GameFunc(stream GameRequests) returns (stream GameResponses);
}


message GameRequests {
    oneof requests {
        MakeMoveRequest make_move_request = 1;
        JoinGameRequest join_game_request = 2;
        JoinGameAsOwnerRequest join_game_as_owner_request = 3;
    }
}

message GameResponses {
    oneof responses {
        MakeMoveResponse make_move_response = 1;
        GameState game_state = 2;
        JoinGameResponse join_game_response = 3;
        JoinGameAsOwnerResponse join_game_as_owner_response = 4;
    }
}

message JoinGameRequest {
    uint32 game_id = 1;
    string player_name = 2;
    PlayerInfo player_info = 3;
}

message JoinGameResponse {
    GameState game_state = 1;
    ErrorMessage msg = 2;
}

message JoinGameAsOwnerRequest {
    uint32 game_id = 1;
    string player_name = 2;
    PlayerInfo player_info = 3;
}

message JoinGameAsOwnerResponse {
    GameState game_state = 1;
    ErrorMessage msg = 2;
}

message GameState { //everything optional depends on what changed
    repeated Card player_cards = 1;
    repeated Card board_cards = 2;
    repeated Player players = 3;
}

message MakeMoveRequest {
    uint32 player_id = 1;
    MoveType move_type = 2;
    optional uint32 blind_size = 3; //TODO::study English
}

message MakeMoveResponse {

}

enum MoveType {
    MOVE_TYPE_FOLD = 0;
    MOVE_TYPE_ALL_IN = 1;
    MOVE_TYPE_CHECK = 2;
    MOVE_TYPE_RAISE_BLIND = 3;
}

message Card {
    Suits suit = 1;
    Values value = 2;
}

enum Suits {
    SUITS_DIAMONDS = 0;
    SUITS_HEARTS = 1;
    SUITS_CLUBS = 2;
    SUITS_SPADES = 3;
}

enum Values {
    VALUES_TWO = 0;
    VALUES_THREE = 1;
    VALUES_FOUR = 2;
    VALUES_FIVE = 3;
    VALUES_SIX = 4;
    VALUES_SEVEN = 5;
    VALUES_EIGHT = 6;
    VALUES_NINE = 7;
    VALUES_TEN = 8;
    VALUES_JACK = 9;
    VALUES_QUEEN = 10;
    VALUES_KING = 11;
    VALUES_ACE = 12;
}