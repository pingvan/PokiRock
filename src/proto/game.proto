syntax = "proto3";

package game;

service PokerGame {
    rpc PokerFunc(stream Requests) returns (stream Responses);
}


message Requests { //here we create login as normal login
    oneof requests {
        login_request login_request = 1;
        register_request register_request = 2;
        create_game_request create_game_request = 3;
        search_game_request search_game_request = 4;
    }
}

message Responses {
    oneof responses {
        login_response login_response = 1;
        register_response register_response = 2;
        create_game_response create_game_response = 3;
        search_game_response search_game_response = 4;
    }
}

message create_game_request {
    string game_owner = 1;
    game_parameters game_parameters = 2;
}

message create_game_response {
    status_message status_message = 1;
    repeated player players = 2;
}

message search_game_request {
    player player = 1;
    game_parameters game_parameters = 2;
}

message search_game_response {
    status_message status_message = 1;
    repeated player players = 2;
}

message move_request {

}

message move_response {

}

message login_request {
    oneof login_requests {
        login_request_first login_request_first = 1;
        login_request_second login_request_second = 2;
    }
}

message login_response {
    oneof login_responses {
        login_response_first login_response_first = 1;
        login_response_second login_response_second = 2;
    }
}

message login_request_first {
    string name = 1;
}

message login_request_second {
    string hashed = 1;
}

message login_response_first {
    string salt = 1;
    status_message status_message = 2;
}

message login_response_second {
    status_message status_message = 1;
    optional player_info player_info = 2;
}


message register_request {
    string name = 1;
    salt_hash salt_hash = 2;
}

message register_response {
    status_message status_message = 1;
    optional player_info player_info = 2;
}


message salt_hash {
    string salt = 1;
    string hash = 2;
}

message search_a_game_request {
    int32 number_of_players = 1;
    int32 minimal_bet = 2;
}

message search_a_game_response {
    status_message status_message = 1;
}

message make_move_request {
    string client_name = 1;
    int32 make_blind = 2;
    bool fold = 3;
}

message make_move_response {
    repeated player players = 1;
}

message player {
    string name = 1;
    player_status status = 2;
    int32 balance = 3;
}

message status_message {
    bool status = 1;
    string message = 2;
}

message game_parameters {
    string game_name = 1;
    int32 number_of_players = 2;
    int32 minimal_bet = 3;
}

message game_ {
    repeated player players = 1;
}

enum player_status {
    fold = 0;
    playing = 1;
    win = 2;
}

message player_info {
    int32 client_id = 1;
    int32 client_games = 2;
    int32 client_wins = 3;
    int32 client_balance = 4;
}
